tokens {
 '_'            underscore
 'as'           as
 'case'         case
 'class'        class
 'data'         data
 'default'      default
 'deriving'     deriving
 'do'           do
 'else'         else
 'hiding'       hiding
 'if'           if
 'import'       import
 'in'           in
 'infix'        infix
 'infixl'       infixl
 'infixr'       infixr
 'instance'     instance
 'let'          let
 'module'       module
 'newtype'      newtype
 'of'           of
 'qualified'    qualified
 'then'         then
 'type'         type
 'where'        where

 'forall'       forall
 'foreign'      foreign
 'export'       export
 'label'        label
 'dynamic'      dynamic
 'safe'         safe
 'interruptible' interruptible
 'unsafe'       unsafe
 'mdo'          mdo
 'family'       family
 'role'         role
 'stdcall'      stdcallconv
 'ccall'        ccallconv
 'capi'         capiconv
 'prim'         primcallconv
 'javascript'   javascriptcallconv
 'proc'         proc                -- for arrow notation extension
 'rec'          rec                 -- for arrow notation extension
 'group'        group               -- for list transform extension
 'by'           by                  -- for list transform extension
 'using'        using               -- for list transform extension
 'pattern'      pattern             -- for pattern synonyms
 '{-# INLINE'            inline_prag
 '{-# SPECIALISE'        spec_prag
 '{-# SPECIALISE_INLINE' spec_inline_prag
 '{-# SOURCE'            source_prag
 '{-# RULES'             rules_prag
 '{-# CORE'              core_prag               -- hdaume: annotated core
 '{-# SCC'               scc_prag
 '{-# GENERATED'         generated_prag
 '{-# DEPRECATED'        deprecated_prag
 '{-# WARNING'           warning_prag
 '{-# UNPACK'            unpack_prag
 '{-# NOUNPACK'          nounpack_prag
 '{-# ANN'               ann_prag
 '{-# VECTORISE'         vect_prag
 '{-# VECTORISE_SCALAR'  vect_scalar_prag
 '{-# NOVECTORISE'       novect_prag
 '{-# MINIMAL'           minimal_prag
 '{-# CTYPE'             ctype
 '{-# OVERLAPPABLE'      overlappable
 '{-# OVERLAPPING'       overlapping
 '{-# OVERLAPS'          overlaps
 '{-# INCOHERENT'        incoherent
 '#-}'                   close_prag

 '..'           dotdot              -- reserved symbols
 ':'            colon
 '::'           dcolon
 '='            equal
 '\\'           lam
 'lcase'        lcase
 '|'            vbar
 '<-'           larrow
 '->'           rarrow
 '@'            at
 '~'            tilde
 '~#'           tildehsh
 '=>'           darrow
 '-'            minus
 '!'            bang
 '*'            star
 '-<'           larrowtail             -- for arrow notation
 '>-'           rarrowtail             -- for arrow notation
 '-<<'          LLarrowtail            -- for arrow notation
 '>>-'          RRarrowtail            -- for arrow notation
 '.'            dot

 '{'            ocurly                 -- special symbols
 '}'            ccurly
 vocurly        vocurly                -- virtual open curly (from layout)
 vccurly        vccurly                -- virtual close curly (from layout)
 '['            obrack
 ']'            cbrack
 '[:'           opabrack
 ':]'           cpabrack
 '('            oparen
 ')'            cparen
 '(#'           oubxparen
 '#)'           cubxparen
 '(|'           oparenbar
 '|)'           cparenbar
 ';'            semi
 ','            comma
 '`'            backquote
 SIMPLEQUOTE    simpleQuote           -- 'x

 VARID          varid              -- identifiers
 CONID          conid
 VARSYM         varsym
 CONSYM         consym
 QVARID         qvarid
 QCONID         qconid
 QVARSYM        qvarsym
 QCONSYM        qconsym
 PREFIXQVARSYM  prefixqvarsym
 PREFIXQCONSYM  prefixqconsym

 IPDUPVARID     dupipvarid                 -- GHC extension

 CHAR           char
 STRING         string
 INTEGER        integer
 RATIONAL       rational

 PRIMCHAR       primchar
 PRIMSTRING     primstring
 PRIMINTEGER    primint
 PRIMWORD       primword
 PRIMFLOAT      primfloat
 PRIMDOUBLE     primdouble

 DOCNEXT        docCommentNext
 DOCPREV        docCommentPrev
 DOCNAMED       docCommentNamed
 DOCSECTION     docSection

-- Template Haskell
 '[|'            openExpQuote
 '[p|'           openPatQuote
 '[t|'           openTypQuote
 '[d|'           openDecQuote
 '|]'            closeQuote
 '[||'           openTExpQuote
 '||]'           closeTExpQuote
 TH_ID_SPLICE    idEscape         -- $x
 '$('            parenEscape      -- $( exp )
 TH_ID_TY_SPLICE idTyEscape       -- $$x
 '$$('           parenTyEscape    -- $$( exp )
 TH_TY_QUOTE     tyQuote          -- ''T
 TH_QUASIQUOTE   quasiQuote
 TH_QQUASIQUOTE  qQuasiQuote
}

-----------------------------------------------------------------------------
-- Module Header

-- The place for module deprecation is really too restrictive, but if it
-- was allowed at its natural place just before 'module', we get an ugly
-- s/r conflict with the second alternative. Another solution would be the
-- introduction of a new pragma DEPRECATED_MODULE, but this is not very nice,
-- either, and DEPRECATED is only expected to be used by people who really
-- know what they are doing. :-)

module
        : maybedocheader 'module' modid maybemodwarning maybeexports 'where' body { Module }
        | body2                                                                   { Module }
;

maybedocheader
        : moduleheader
        | {- empty -}
;

missing_module_keyword
        : {- empty -}
;

maybemodwarning
    : '{-# DEPRECATED' strings '#-}'
    | '{-# WARNING' strings '#-}'
    |  {- empty -}
;

body
        :  '{'            top '}'
        |      vocurly    top close
;

body2
        :  '{' top '}'
        |  missing_module_keyword top close
;

top
        : importdecls
        | importdecls ';' cvtopdecls
        | cvtopdecls
;

cvtopdecls
        : topdecls
;

-----------------------------------------------------------------------------
-- Module declaration & imports only

header
        : maybedocheader 'module' modid maybemodwarning maybeexports 'where' header_body
        | header_body2
;

header_body
        :  '{'            importdecls
        |      vocurly    importdecls
;

header_body2
        :  '{' importdecls
        |  missing_module_keyword importdecls
;


-----------------------------------------------------------------------------
-- The Export List

maybeexports
        :  '(' exportlist ')'              { ModuleExports }
        |  {- empty -}
;

exportlist
        : expdoclist ',' expdoclist
        | exportlist1
;

exportlist1
        : expdoclist export expdoclist ',' exportlist1
        | expdoclist export expdoclist
        | expdoclist
;

expdoclist
        : exp_doc expdoclist
        | {- empty -}
;

exp_doc
        : docsection
        | docnamed
        | docnext
;

   -- No longer allow things like [] and (,,,) to be exported
   -- They are built in syntax, always available
export
        : qcname_ext export_subspec
        |  'module' modid
        |  'pattern' qcon
;

export_subspec
        : {- empty -}
        | '(' '..' ')'
        | '(' ')'
        | '(' qcnames ')'
;

qcnames      -- A reversed list
        :  qcnames ',' qcname_ext
        |  qcname_ext
;

qcname_ext                              -- Variable or data constructor
                                        -- or tagged type constructor
        :  qcname
        |  'type' qcname
;

-- Cannot pull into qcname_ext, as qcname is also used in expression.
qcname                                  -- Variable or data constructor
        :  qvar
        |  qcon
;


-----------------------------------------------------------------------------
-- Import Declarations

-- import decls can be *empty*, or even just a string of semicolons
-- whereas topdecls must contain at least one topdecl.

importdecls
        : importdecls ';' importdecl
--        | importdecls ';'              -- TODO Fix parser for this rule
        | importdecl
        | {- empty -}
;

importdecl
        : 'import' maybe_src maybe_safe optqualified maybe_pkg modid maybeas maybeimpspec
                                       { Import }
;
maybe_src
        : '{-# SOURCE' '#-}'
        | {- empty -}
;
maybe_safe
        : 'safe'
        | {- empty -}
;
maybe_pkg
        : STRING
        | {- empty -}
;
optqualified
        : 'qualified'
        | {- empty -}
;
maybeas
        : 'as' modid                   { ImportAsPart }
        | {- empty -}
;
maybeimpspec
        : impspec
        | {- empty -}
;
impspec
        :  '(' exportlist ')'
        |  'hiding' '(' exportlist ')'
;

-----------------------------------------------------------------------------
-- Fixity Declarations

prec
        : {- empty -}
        | INTEGER
;
infix
        : 'infix'
        | 'infixl'
        | 'infixr'
;
ops
        : ops ',' op
        | op
;

-----------------------------------------------------------------------------
-- Top-Level Declarations

topdecls
        : topdecls ';' topdecl
        | topdecls ';'
        | topdecl
;

topdecl
        : cl_decl                                                     { ClassDeclaration }
        | ty_decl
        | inst_decl                                                   { InstanceDeclaration }
        | stand_alone_deriving
        | role_annot
        | 'default' '(' comma_types0 ')'
        | 'foreign' fdecl
        | '{-# DEPRECATED' deprecations '#-}'
        | '{-# WARNING' warnings '#-}'
        | '{-# RULES' rules '#-}'
        | '{-# VECTORISE' qvar '=' exp '#-}'
        | '{-# NOVECTORISE' qvar '#-}'
        | '{-# VECTORISE' 'type' gtycon '#-}'
        | '{-# VECTORISE_SCALAR' 'type' gtycon '#-}'
        | '{-# VECTORISE' 'type' gtycon '=' gtycon '#-}'
        | '{-# VECTORISE_SCALAR' 'type' gtycon '=' gtycon '#-}'
        | '{-# VECTORISE' 'class' gtycon '#-}'
        | annotation
        | decl_no_th
        -- Template Haskell Extension
        -- The $(..) form is one possible form of infixexp
        -- but we treat an arbitrary expression just as if
        -- it had a $(..) wrapped around it
        | infixexp
;

-- Type classes
--
cl_decl
        : 'class' tycl_hdr fds where_cls
;

-- Type declarations (toplevel)
--
ty_decl
           -- ordinary type synonyms
        : 'type' type '=' ctypedoc
                                   { TypeSynonym }
                -- Note ctype, not sigtype, on the right of '='
                -- We allow an explicit for-all but we don't insert one
                -- in   type Foo a = (b,b)
                -- Instead we just say b is out of scope
                --
                -- Note the use of type for the head; this allows
                -- infix type constructors to be declared

           -- type family declarations
        | 'type' 'family' type opt_kind_sig where_type_family
                -- Note the use of type for the head; this allows
                -- infix type constructors to be declared

          -- ordinary data type or newtype declaration
        | data_or_newtype capi_ctype tycl_hdr constrs deriving
                                   -- We need the location on tycl_hdr in case
                                   -- constrs and deriving are both empty
                                   { DataDeclaration }

          -- ordinary GADT declaration
        | data_or_newtype capi_ctype tycl_hdr opt_kind_sig
                 gadt_constrlist
                 deriving
                                   -- We need the location on tycl_hdr in case
                                   -- constrs and deriving are both empty
          -- data/newtype family
        | 'data' 'family' type opt_kind_sig
;

inst_decl
        : 'instance' overlap_pragma inst_type where_inst
           -- type instance declarations
        | 'type' 'instance' ty_fam_inst_eqn
          -- data/newtype instance declaration
        | data_or_newtype 'instance' capi_ctype tycl_hdr constrs deriving
          -- GADT instance declaration
        | data_or_newtype 'instance' capi_ctype tycl_hdr opt_kind_sig
                 gadt_constrlist
                 deriving
;

overlap_pragma
  : '{-# OVERLAPPABLE'    '#-}'
  | '{-# OVERLAPPING'     '#-}'
  | '{-# OVERLAPS'        '#-}'
  | '{-# INCOHERENT'      '#-}'
  | {- empty -}
;

-- Closed type families

where_type_family
        : {- empty -}
        | 'where' ty_fam_inst_eqn_list
;

ty_fam_inst_eqn_list
        :     '{' ty_fam_inst_eqns '}'
        | vocurly ty_fam_inst_eqns close
        |     '{' '..' '}'
        | vocurly '..' close
;

ty_fam_inst_eqns
        : ty_fam_inst_eqns ';' ty_fam_inst_eqn
        | ty_fam_inst_eqns ';'
        | ty_fam_inst_eqn
;

ty_fam_inst_eqn
        : type '=' ctype
                -- Note the use of type for the head; this allows
                -- infix type constructors and type patterns
;
-- Associated type family declarations
--
-- * They have a different syntax than on the toplevel (no family special
--   identifier).
--
-- * They also need to be separate from instances; otherwise, data family
--   declarations without a kind signature cause parsing conflicts with empty
--   data declarations.
--
at_decl_cls
        :  -- data family declarations, with optional 'family' keyword
          'data' opt_family type opt_kind_sig
           -- type family declarations, with optional 'family' keyword
           -- (can't use opt_instance because you get shift/reduce errors
        | 'type' type opt_kind_sig
        | 'type' 'family' type opt_kind_sig
           -- default type instances, with optional 'instance' keyword
        | 'type' ty_fam_inst_eqn
        | 'type' 'instance' ty_fam_inst_eqn
;

opt_family
              : {- empty -}
              | 'family'
;

-- Associated type instances
--
at_decl_inst
           -- type instance declarations
        : 'type' ty_fam_inst_eqn
                -- Note the use of type for the head; this allows
                -- infix type constructors and type patterns
        -- data/newtype instance declaration
        | data_or_newtype capi_ctype tycl_hdr constrs deriving            { DataDeclaration }
        -- GADT instance declaration
        | data_or_newtype capi_ctype tycl_hdr opt_kind_sig
                 gadt_constrlist
                 deriving
;

data_or_newtype
        : 'data'
        | 'newtype'
;

opt_kind_sig
        : {- nothing -}
        | '::' kind
;

-- tycl_hdr parses the header of a class or data type decl,
-- which takes the form
--      T a b
--      Eq a => T a
--      (Eq a, Ord b) => T a b
--      T Int [a]                       -- for associated types
-- Rather a lot of inlining here, else we get reduce/reduce errors
tycl_hdr
        : context '=>' type
        | type
;

capi_ctype : '{-# CTYPE' STRING STRING '#-}'
           | '{-# CTYPE'        STRING '#-}'
           |  {- nothing -}
;


-----------------------------------------------------------------------------
-- Stand-alone deriving

-- Glasgow extension: stand-alone deriving declarations
stand_alone_deriving
  : 'deriving' 'instance' overlap_pragma inst_type
;

-----------------------------------------------------------------------------
-- Role annotations

role_annot : 'type' 'role' oqtycon maybe_roles
;

-- Reversed!
maybe_roles : {- empty -}
            | roles
;

roles : role
      | roles role
;

-- read it in as a varid for better error messages
role : VARID
     | '_'
;

-- Pattern synonyms

-- Glasgow extension: pattern synonyms
pattern_synonym_decl
        : 'pattern' pat '=' pat
        | 'pattern' pat '<-' pat
        | 'pattern' pat '<-' pat where_decls
;

where_decls
        : 'where' '{' decls '}'
        | 'where' vocurly decls close
;

vars0
        : {- empty -}
        | varid vars0
;

-----------------------------------------------------------------------------
-- Nested declarations

-- Declaration in class bodies
--
decl_cls  : at_decl_cls
          | decl

          -- A 'default' signature used with the generic-programming extension
          | 'default' infixexp '::' sigtypedoc
;

decls_cls -- Reversed
          : decls_cls ';' decl_cls
          | decls_cls ';'
          | decl_cls
          | {- empty -}
;

decllist_cls   -- Reversed
        : '{'         decls_cls '}'
        |     vocurly decls_cls close
;

-- Class body
--
where_cls -- Reversed
                                -- No implicit parameters
                                -- May have type declarations
        : 'where' decllist_cls
        | {- empty -}
;

-- Declarations in instance bodies
--
decl_inst  : at_decl_inst
           | decl
;

decls_inst    -- Reversed
           : decls_inst ';' decl_inst
           | decls_inst ';'
           | decl_inst
           | {- empty -}
;

decllist_inst    -- Reversed
        : '{'         decls_inst '}'
        |     vocurly decls_inst close
;

-- Instance body
--
where_inst  -- Reversed
            -- No implicit parameters
            -- May have type declarations
        : 'where' decllist_inst
        | {- empty -}
;


-- Declarations in binding groups other than classes and instances
--
decls
        : decls ';' decl
        | decls ';'
        | decl
        | {- empty -}
;

decllist
        : '{'            decls '}'
        |     vocurly    decls close
;


-- Binding groups other than those of class and instance declarations
--
binds              -- May have implicit parameters
                   -- No type declarations
        : decllist
        | '{'            dbinds '}'
        |     vocurly    dbinds close
;
wherebinds                                      -- May have implicit parameters
                                                -- No type declarations
        : 'where' binds                         { WhereBindings }
        | {- empty -}
;


-----------------------------------------------------------------------------
-- Transformation Rules

rules
        :  rules ';' rule
        |  rules ';'
        |  rule
        |  {- empty -}
;

rule
        : STRING rule_activation rule_forall infixexp '=' exp
;

-- Rules can be specified to be NeverActive, unlike inline/specialize pragmas
rule_activation
        : {- empty -}
        | rule_explicit_activation
;

rule_explicit_activation                        -- In brackets
        : '[' INTEGER ']'
        | '[' '~' INTEGER ']'
        | '[' '~' ']'
;

rule_forall
        : 'forall' rule_var_list '.'
        | {- empty -}
;

rule_var_list
        : rule_var
        | rule_var rule_var_list
;

rule_var
        : varid
        | '(' varid '::' ctype ')'
;

-----------------------------------------------------------------------------
-- Warnings and deprecations (c.f. rules)

warnings
        : warnings ';' warning
        | warnings ';'
        | warning
        | {- empty -}
;

-- SUP: TEMPORARY HACK, not checking for `module Foo'
warning
        : namelist strings
;

deprecations
        : deprecations ';' deprecation
        | deprecations ';'
        | deprecation
        | {- empty -}
;

-- SUP: TEMPORARY HACK, not checking for `module Foo'
deprecation
        : namelist strings
;

strings
    : STRING
    | '[' stringlist ']'
;

stringlist
    : stringlist ',' STRING
    | STRING
;

-----------------------------------------------------------------------------
-- Annotations
annotation
    : '{-# ANN' name_var aexp '#-}'
    | '{-# ANN' 'type' tycon aexp '#-}'
    | '{-# ANN' 'module' aexp '#-}'
;

-----------------------------------------------------------------------------
-- Foreign import and export declarations

fdecl : 'import' callconv safety fspec
      | 'import' callconv        fspec
      | 'export' callconv fspec
;

callconv
          : 'stdcall'
          | 'ccall'
          | 'capi'
          | 'prim'
          | 'javascript'
;

safety
        : 'unsafe'
        | 'safe'
        | 'interruptible'
;

fspec
       : STRING var '::' sigtypedoc
       |        var '::' sigtypedoc
         -- if the entity string is missing, it defaults to the empty string;
         -- the meaning of an empty entity string depends on the calling
         -- convention
;

-----------------------------------------------------------------------------
-- Type signatures

opt_sig
        : {- empty -}
        | '::' sigtype
;

opt_asig
        : {- empty -}
        | '::' atype
;

sigtype                                 -- Always a HsForAllTy,
                                        -- to tell the renamer where to generalise
        : ctype
        -- Wrap an Implicit forall if there isn't one there already
;

sigtypedoc                              -- Always a HsForAllTy
        : ctypedoc
        -- Wrap an Implicit forall if there isn't one there already
;

sig_vars                                -- Returned in reversed order
         : sig_vars ',' var
         | var
;

sigtypes1                               -- Always HsForAllTys
        : sigtype
        | sigtype ',' sigtypes1
;


-----------------------------------------------------------------------------
-- Types

strict_mark
        : '!'
        | '{-# UNPACK' '#-}'
        | '{-# NOUNPACK' '#-}'
        | '{-# UNPACK' '#-}' '!'
        | '{-# NOUNPACK' '#-}' '!'
        -- Although UNPACK with no '!' is illegal, we get a
        -- better error message if we parse it here
;

-- A ctype is a for-all type
ctype
        : 'forall' tv_bndrs '.' ctype
        | context '=>' ctype
        | ipvar '::' type
        | type
;

----------------------
-- Notes for 'ctypedoc'
-- It would have been nice to simplify the grammar by unifying `ctype` and
-- ctypedoc` into one production, allowing comments on types everywhere (and
-- rejecting them after parsing, where necessary).  This is however not possible
-- since it leads to ambiguity. The reason is the support for comments on record
-- fields:
--         data R = R { field :: Int -- ^ comment on the field }
-- If we allow comments on types here, it's not clear if the comment applies
-- to 'field' or to 'Int'. So we must use `ctype` to describe the type.

ctypedoc
        : 'forall' tv_bndrs '.' ctypedoc
        | context '=>' ctypedoc
        | ipvar '::' type
        | typedoc
;

----------------------
-- Notes for 'context'
-- We parse a context as a btype so that we don't get reduce/reduce
-- errors in ctype.  The basic problem is that
--      (Eq a, Ord a)
-- looks so much like a tuple type.  We can't tell until we find the =>

-- We have the t1 ~ t2 form both in 'context' and in type,
-- to permit an individual equational constraint without parenthesis.
-- Thus for some reason we allow    f :: a~b => blah
-- but not                          f :: ?x::Int => blah
context
        : btype '~'      btype
        | btype
;


type
        : btype
        | btype qtyconop type
        | btype tyvarop  type
        | btype '->'     ctype            { FunctionType }
        | btype '~'      btype
                                        -- see Note [Promotion]
        | btype SIMPLEQUOTE qconop type
        | btype SIMPLEQUOTE varop  type
;

typedoc
        : btype
        | btype docprev
        | btype qtyconop type
        | btype qtyconop type docprev
        | btype tyvarop  type
        | btype tyvarop  type docprev
        | btype '->'     ctypedoc         { FunctionType }
        | btype docprev '->' ctypedoc
        | btype '~'      btype
                                        -- see Note [Promotion]
        | btype SIMPLEQUOTE qconop type
        | btype SIMPLEQUOTE varop  type
;

btype
        : btype atype                     { ApplicationType }
        | atype
;

atype
        : ntgtycon                        -- Not including unit tuples
                                          { TypeVariable }
        | tyvar                           -- (See Note [Unit tuples])
                                          { TypeVariable }
        | strict_mark atype               -- Constructor sigs only
        | '{' fielddecls '}'              -- Constructor sigs only
        | '(' ')'                         { TupleType }
        | '(' ctype ',' comma_types1 ')'  { TupleType }
        | '(#' '#)'
        | '(#' comma_types1 '#)'
        | '[' ctype ']'                   { ListType }
        | '[:' ctype ':]'
        | '(' ctype ')'                   { TupleType }
        | '(' ctype '::' kind ')'         { TupleType }
        | quasiquote
        | '$(' exp ')'
        | TH_ID_SPLICE
                                                      -- see Note [Promotion] for the followings
        | SIMPLEQUOTE qcon
        | SIMPLEQUOTE  '(' ctype ',' comma_types1 ')'
        | SIMPLEQUOTE  '[' comma_types0 ']'
        | SIMPLEQUOTE var
        | '[' ctype ',' comma_types1 ']'  { ListType }
        | INTEGER
        | STRING
;

-- An inst_type is what occurs in the head of an instance decl
--      e.g.  (Foo a, Gaz b) => Wibble a b
-- It's kept as a single type, with a MonoDictTy at the right
-- hand corner, for convenience.
inst_type
        : sigtype
;

inst_types1
        : inst_type
        | inst_type ',' inst_types1
;

comma_types0
        : comma_types1
        | {- empty -}
;

comma_types1
        : ctype
        | ctype  ',' comma_types1
;

tv_bndrs
         : tv_bndr tv_bndrs
         | {- empty -}
;

tv_bndr
        : tyvar
        | '(' tyvar '::' kind ')'
;

fds
        : {- empty -}
        | '|' fds1
;

fds1
        : fds1 ',' fd
        | fd
;

fd
        : varids0 '->' varids0
;

varids0
        : {- empty -}
        | varids0 tyvar
;


-----------------------------------------------------------------------------
-- Kinds

kind
        : bkind
        | bkind '->' kind
;

bkind
        : akind
        | bkind akind
;

akind
        : '*'
        | '(' kind ')'
        | pkind
        | tyvar
;

pkind                        -- promoted type, see Note [Promotion]
        : qtycon
        | '(' ')'
        | '(' kind ',' comma_kinds1 ')'
        | '[' kind ']'
;

comma_kinds1
        : kind
        | kind  ',' comma_kinds1
;

{- Note [Promotion]
   ~~~~~~~~~~~~~~~~

- Syntax of promoted qualified names
We write 'Nat.Zero instead of Nat.'Zero when dealing with qualified
names. Moreover ticks are only allowed in types, not in kinds, for a
few reasons:
  1. we don't need quotes since we cannot define names in kinds
  2. if one day we merge types and kinds, tick would mean look in DataName
  3. we don't have a kind namespace anyway

- Syntax of explicit kind polymorphism  (IA0_TODO: not yet implemented)
Kind abstraction is implicit. We write
> data SList (s :: k -> *) (as :: [k]) where ...
because it looks like what we do in terms
> id (x :: a) = x

- Name resolution
When the user write Zero instead of 'Zero in types, we parse it a
HsTyVar ("Zero", TcClsName) instead of HsTyVar ("Zero", DataName). We
deal with this in the renamer. If a HsTyVar ("Zero", TcClsName) is not
bounded in the type level, then we look for it in the term level (we
change its namespace to DataName, see Note [Demotion] in OccName). And
both become a HsTyVar ("Zero", DataName) after the renamer.

-}


-----------------------------------------------------------------------------
-- Datatype declarations

gadt_constrlist               -- Returned in order
        : 'where' '{'        gadt_constrs '}'
        | 'where' vocurly    gadt_constrs close
        | {- empty -}
;

gadt_constrs
        : gadt_constr ';' gadt_constrs
        | gadt_constr
        | {- empty -}
;

-- We allow the following forms:
--      C :: Eq a => a -> T a
--      C :: forall a. Eq a => !a -> T a
--      D { x,y :: a } :: T a
--      forall a. Eq a => D { x,y :: a } :: T a

gadt_constr                     -- Returns a list because of:   C,D :: ty
        : con_list '::' sigtype
                -- Deprecated syntax for GADT record declarations
        | oqtycon '{' fielddecls '}' '::' sigtype
;

constrs
        : maybe_docnext '=' constrs1
;

constrs1
        : constrs1 maybe_docnext '|' maybe_docprev constr
        | constr
;

constr
        : maybe_docnext forall context '=>' constr_stuff maybe_docprev   { ConstructorDeclaration }
        | maybe_docnext forall constr_stuff maybe_docprev                { ConstructorDeclaration }
;

forall
        : 'forall' tv_bndrs '.'
        | {- empty -}
;

constr_stuff
-- We parse the constructor declaration
--      C t1 t2
-- as a btype (treating C as a type constructor) and then convert C to be
-- a data constructor.  Reason: it might continue like this:
--      C t1 t2 %: D Int
-- in which case C really would be a type constructor.  We can't resolve this
-- ambiguity till we come across the constructor oprerator :% (or not, more usually)
        : btype
        | btype conop btype
;

fielddecls
        : {- empty -}
        | fielddecls1
;

fielddecls1
        : fielddecl maybe_docnext ',' maybe_docprev fielddecls1
                             -- This adds the doc $4 to each field separately
        | fielddecl
;

fielddecl               -- A list because of   f,g :: Int
        : maybe_docnext sig_vars '::' ctype maybe_docprev
                                { FieldDeclaration }
;

-- We allow the odd-looking 'inst_type' in a deriving clause, so that
-- we can do deriving( forall a. C [a] ) in a newtype (GHC extension).
-- The 'C [a]' part is converted to an HsPredTy by checkInstType
-- We don't allow a context, but that's sorted out by the type checker.
deriving
        : {- empty -}
        | 'deriving' qtycon
        | 'deriving' '(' ')'
        | 'deriving' '(' inst_types1 ')'
             -- Glasgow extension: allow partial
             -- applications in derivings
;

-----------------------------------------------------------------------------
-- Value definitions

{- Note [Declaration/signature overlap]
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
There's an awkward overlap with a type signature.  Consider
        f :: Int -> Int = ...rhs...
   Then we can't tell whether it's a type signature or a value
   definition with a result signature until we see the '='.
   So we have to inline enough to postpone reductions until we know.
-}

{-
  ATTENTION: Dirty Hackery Ahead! If the second alternative of vars is var
  instead of qvar, we get another shift/reduce-conflict. Consider the
  following programs:

     { (^^) :: Int->Int ; }          Type signature; only var allowed

     { (^^) :: Int->Int = ... ; }    Value defn with result signature;
                                     qvar allowed (because of instance decls)

  We can't tell whether to reduce var to qvar until after we've read the signatures.
-}

docdecl
        : docdecld
;

docdecld
        : docnext
        | docprev
        | docnamed
        | docsection
;

decl_no_th
        : sigdecl               { SignatureDeclaration }
        | '!' aexp rhs
                                -- Turn it all into an expression so that
                                -- checkPattern can check that bangs are enabled

        | infixexp opt_sig rhs  { ValueDefinition }
        | pattern_synonym_decl
        | docdecl
;

decl
        : decl_no_th

        -- Why do we only allow naked declaration splices in top-level
        -- declarations and not here? Short answer: because readFail009
        -- fails terribly with a panic in cvBindsAndSigs otherwise.
        | splice_exp
;

rhs
        : '=' exp wherebinds                 { RightHandSide }
        | gdrhs wherebinds                   { RightHandSide }
;

gdrhs
        : gdrhs gdrh
        | gdrh
;

gdrh
        : '|' guardquals '=' exp             { Guard }
;

sigdecl
        :
        -- See Note [Declaration/signature overlap] for why we need infixexp here
          infixexp '::' sigtypedoc

        | var ',' sig_vars '::' sigtypedoc
        | infix prec ops
        | '{-# INLINE' activation qvar '#-}'
        | '{-# SPECIALISE' activation qvar '::' sigtypes1 '#-}'
        | '{-# SPECIALISE_INLINE' activation qvar '::' sigtypes1 '#-}'
        | '{-# SPECIALISE' 'instance' inst_type '#-}'
        -- A minimal complete definition
        | '{-# MINIMAL' name_boolformula_opt '#-}'
;

activation
        : {- empty -}
        | explicit_activation
;

explicit_activation                    -- In brackets
        : '[' INTEGER ']'
        | '[' '~' INTEGER ']'
;

-----------------------------------------------------------------------------
-- Expressions

quasiquote
        : TH_QUASIQUOTE
        | TH_QQUASIQUOTE
;

exp
        : infixexp '::' sigtype
        | infixexp '-<' exp
        | infixexp '>-' exp
        | infixexp '-<<' exp
        | infixexp '>>-' exp
        | infixexp
;

infixexp
        : exp10
        | infixexp qop exp10                  { OperatorExpression }
;

exp10
        : '\\' apat apats opt_asig '->' exp   { LambdaExpression }
        | 'let' binds 'in' exp                { LetExpression }
        | '\\' 'lcase' altslist
        | 'if' exp optSemi 'then' exp optSemi 'else' exp
        | 'if' ifgdpats
        | 'case' exp 'of' altslist            { CaseExpression }
        | '-' fexp
        | 'do' stmtlist                       { DoExpression }
        | 'mdo' stmtlist
        | scc_annot exp
        | hpc_annot exp
        | 'proc' aexp '->' exp
                                                -- TODO: is sLL $1 $> right here?
        | '{-# CORE' STRING '#-}' exp
                                                -- hdaume: core annotation
        | fexp
;

optSemi
        : ';'
        | {- empty -}
;

scc_annot
        : '{-# SCC' STRING '#-}'
        | '{-# SCC' VARID  '#-}'
;

hpc_annot
        : '{-# GENERATED' STRING INTEGER ':' INTEGER '-' INTEGER ':' INTEGER '#-}'
;

fexp
        : fexp aexp                            { Application }
        | aexp
;

aexp
        : qvar '@' aexp
        | '~' aexp
        | aexp1
;

aexp1
        : aexp1 '{' fbinds '}'
        | aexp2
;

aexp2
        : ipvar
        | qcname                             { QNameExpression }
        | literal
-- This will enable overloaded strings permanently.  Normally the renamer turns HsString
-- into HsOverLit when -foverloaded-strings is on.
--      | STRING
        | INTEGER
        | RATIONAL
        -- N.B.: sections get parsed by these next two productions.
        -- This allows you to write, e.g., '(+ 3, 4 -)', which isn't
        -- correct Haskell (you'd have to write '((+ 3), (4 -))')
        -- but the less cluttered version fell out of having texps.
        | '(' texp ')'                       { ParenthesisExpression }
        | '(' tup_exprs ')'
        | '(#' texp '#)'
        | '(#' tup_exprs '#)'
        | '[' list ']'
        | '[:' parr ':]'
        | '_'
        -- Template Haskell Extension
        | splice_exp
        | SIMPLEQUOTE  qvar
        | SIMPLEQUOTE  qcon
        | TH_TY_QUOTE tyvar
        | TH_TY_QUOTE gtycon
        | '[|' exp '|]'
        | '[||' exp '||]'
        | '[t|' ctype '|]'
        | '[p|' infixexp '|]'
        | '[d|' cvtopbody '|]'
        | quasiquote
        -- arrow notation extension
        | '(|' aexp2 cmdargs '|)'
;

splice_exp
        : TH_ID_SPLICE
        | '$(' exp ')'
        | TH_ID_TY_SPLICE
        | '$$(' exp ')'
;

cmdargs
        : cmdargs acmd
        | {- empty -}
;

acmd
        : aexp2
;

cvtopbody
        :  '{'            cvtopdecls0 '}'
        |      vocurly    cvtopdecls0 close
;

cvtopdecls0
        : {- empty -}
        | cvtopdecls
;

-----------------------------------------------------------------------------
-- Tuple expressions

-- "texp" is short for tuple expressions:
-- things that can appear unparenthesized as long as they're
-- inside parens or delimitted by commas
texp
        : exp
        -- Note [Parsing sections]
        -- ~~~~~~~~~~~~~~~~~~~~~~~
        -- We include left and right sections here, which isn't
        -- technically right according to the Haskell standard.
        -- For example (3 +, True) isn't legal.
        -- However, we want to parse bang patterns like
        --      (!x, !y)
        -- and it's convenient to do so here as a section
        -- Then when converting expr to pattern we unravel it again
        -- Meanwhile, the renamer checks that real sections appear
        -- inside parens.
        | infixexp qop
        | qopm infixexp
       -- View patterns get parenthesized above
        | exp '->' texp
;

-- Always at least one comma
tup_exprs
           : texp commas_tup_tail
           | commas tup_tail
;

-- Always starts with commas; always follows an expr
commas_tup_tail : commas tup_tail
;

-- Always follows a comma
tup_tail
          : texp commas_tup_tail
          | texp
          | {- empty -}
;

-----------------------------------------------------------------------------
-- List expressions

-- The rules below are little bit contorted to keep lexps left-recursive while
-- avoiding another shift/reduce-conflict.

list
        : texp
        | lexps
        | texp '..'
        | texp ',' exp '..'
        | texp '..' exp
        | texp ',' exp '..' exp
        | texp '|' flattenedpquals
;

lexps
        : lexps ',' texp
        | texp ',' texp
;
-----------------------------------------------------------------------------
-- List Comprehensions

flattenedpquals
    : pquals
;

pquals
    : squals '|' pquals
    | squals
;

squals
                                        -- one can "grab" the earlier ones
    : squals ',' transformqual
    | squals ',' qual
    | transformqual
    | qual
--  | transformquals1 ',' '{|' pquals '|}'
--  | '{|' pquals '|}'
;


-- It is possible to enable bracketing (associating) qualifier lists
-- by uncommenting the lines with {| |} above. Due to a lack of
-- consensus on the syntax, this feature is not being used until we
-- get user demand.

transformqual
                        -- Function is applied to a list of stmts *in order*
    : 'then' exp
    | 'then' exp 'by' exp
    | 'then' 'group' 'using' exp
    | 'then' 'group' 'by' exp 'using' exp
;

-- Note that 'group' is a special_id, which means that you can enable
-- TransformListComp while still using Data.List.group. However, this
-- introduces a shift/reduce conflict. Happy chooses to resolve the conflict
-- in by choosing the "group by" variant, which is what we want.

-----------------------------------------------------------------------------
-- Parallel array expressions

-- The rules below are little bit contorted; see the list case for details.
-- Note that, in contrast to lists, we only have finite arithmetic sequences.
-- Moreover, we allow explicit arrays with no element (represented by the nil
-- constructor in the list case).

parr
        :
        | texp
        | lexps
        | texp '..' exp
        | texp ',' exp '..' exp
        | texp '|' flattenedpquals
;

-- We are reusing `lexps' and `flattenedpquals' from the list case.

-----------------------------------------------------------------------------
-- Guards

guardquals
    : guardquals1
;
guardquals1
    : guardquals1 ',' qual
    | qual
;

-----------------------------------------------------------------------------
-- Case alternatives

altslist
        : '{'            alts '}'
        |     vocurly    alts  close
        | '{'                 '}'
        |     vocurly          close
;

alts
        : alts1
        | ';' alts
;

alts1
        : alts1 ';' alt
        | alts1 ';'
        | alt
;

alt
        : pat opt_sig alt_rhs           { CaseAlternative }
;

alt_rhs
        : ralt wherebinds
;

ralt
        : '->' exp
        | gdpats
;

gdpats
        : gdpats gdpat
        | gdpat
;

-- optional semi-colons between the guards of a MultiWayIf, because we use
-- layout here, but we don't need (or want) the semicolon as a separator (#7783).
gdpatssemi
        : gdpatssemi gdpat optSemi
        | gdpat optSemi
;

-- layout for MultiWayIf doesn't begin with an open brace, because it's hard to
-- generate the open brace in addition to the vertical bar in the lexer, and
-- we don't need it.
ifgdpats
         : '{' gdpatssemi '}'
         |     gdpatssemi close
;

gdpat
        : '|' guardquals '->' exp
;

-- 'pat' recognises a pattern, including one with a bang at the top
--      e.g.  "!x" or "!(x,y)" or "C a b" etc
-- Bangs inside are parsed as infix operator applications, so that
-- we parse them right when bang-patterns are off
pat     :  exp
        | '!' aexp
;

bindpat :  exp
        | '!' aexp
;

apat    : aexp             { Pattern }
        | '!' aexp         { Pattern }
;

apats
        : apat apats
        | {- empty -}
;

-----------------------------------------------------------------------------
-- Statement sequences

stmtlist
        : '{'           stmts '}'
        |     vocurly   stmts close
;

--      do { ;; s ; s ; ; s ;; }
-- The last Stmt should be an expression, but that's hard to enforce
-- here, because we need too much lookahead if we see do { e ; }
-- So we use BodyStmts throughout, and switch the last one over
-- in ParseUtils.checkDo instead
stmts
        : stmt stmts_help
        | ';' stmts
        | {- empty -}
;

stmts_help                             -- might be empty
        : ';' stmts
        | {- empty -}
;

-- For typing stmts at the GHCi prompt, where
-- the input may consist of just comments.
maybe_stmt
        : stmt
        | {- nothing -}
;

stmt
        : qual
        | 'rec' stmtlist
;

qual
    : bindpat '<-' exp                 { BindStatement }
    | exp                              { ExpressionStatement }
    | 'let' binds                      { LetStatement }
;

-----------------------------------------------------------------------------
-- Record Field Update/Construction

fbinds
        : fbinds1
        | {- empty -}
;

fbinds1 : fbind ',' fbinds1
        | fbind
        | '..'
;

fbind
        : qvar '=' texp         { FieldUpdate }
                        -- RHS is a 'texp', allowing view patterns (Trac #6038)
                        -- and, incidentaly, sections.  Eg
                        -- f (R { x = show -> s }) = ...

        | qvar                  { FieldUpdate }
                        -- In the punning case, use a place-holder
                        -- The renamer fills in the final value
;

-----------------------------------------------------------------------------
-- Implicit Parameter Bindings

dbinds
        : dbinds ';' dbind
        | dbinds ';'
        | dbind
--      | {- empty -}
;

dbind   : ipvar '=' exp
;

ipvar
        : IPDUPVARID
;


-----------------------------------------------------------------------------
-- Warnings and deprecations

name_boolformula_opt
        : name_boolformula
        | {- empty -}
;

name_boolformula
        : name_boolformula_and
        | name_boolformula_and '|' name_boolformula
;

name_boolformula_and
        : name_boolformula_atom
        | name_boolformula_atom ',' name_boolformula_and
;

name_boolformula_atom
        : '(' name_boolformula ')'
        | name_var
;

namelist : name_var
         | name_var ',' namelist
;

name_var : var
         | con
;

-----------------------------------------
-- Data constructors
qcon
        : qconid               { QCon }
        | '(' qconsym ')'
        | sysdcon
-- The case of '[:' ':]' is part of the production `parr'
;

con
        : conid
        | '(' consym ')'
        | sysdcon
;

con_list : con
         | con ',' con_list
;

sysdcon                          -- Wired in data constructors
        : '(' ')'
        | '(' commas ')'
        | '(#' '#)'
        | '(#' commas '#)'
        | '[' ']'
;

conop
        : consym
        | '`' conid '`'
;

qconop
        : qconsym
        | '`' qconid '`'
;

----------------------------------------------------------------------------
-- Type constructors


-- See Note [Unit tuples] in HsTypes for the distinction
-- between gtycon and ntgtycon
gtycon   -- A "general" qualified tycon, including unit tuples
        : ntgtycon
        | '(' ')'
        | '(#' '#)'
;
ntgtycon                        -- A "general" qualified tycon, excluding unit tuples
        : oqtycon
        | '(' commas ')'
        | '(#' commas '#)'
        | '(' '->' ')'
        | '[' ']'
        | '[:' ':]'
        | '(' '~#' ')'
;
oqtycon                         -- An "ordinary" qualified tycon;
                                -- These can appear in export lists
        : qtycon
        | '(' qtyconsym ')'
        | '(' '~' ')'
;

qtyconop                        -- Qualified or unqualified
        : qtyconsym
        | '`' qtycon '`'
;

qtycon                          -- Qualified or unqualified
        : QCONID
        | PREFIXQCONSYM
        | tycon
;

tycon                           -- Unqualified
        : CONID
;

qtyconsym
        : QCONSYM
        | QVARSYM
        | tyconsym
;

-- Does not include "!", because that is used for strictness marks
--               or ".", because that separates the quantified type vars from the rest
tyconsym
        : CONSYM
        | VARSYM
        | '*'
        | '-'
;

-----------------------------------------------------------------------------
-- Operators

op                               -- used in infix decls
        : varop
        | conop
;

varop
        : varsym
        | '`' varid '`'           { VariableOperation }
;

qop                              -- used in sections
        : qvarop
        | qconop
;

qopm                             -- used in sections
        : qvaropm
        | qconop
;

qvarop
        : qvarsym
        | '`' qvarid '`'          { VariableOperation }
;

qvaropm
        : qvarsym_no_minus
        | '`' qvarid '`'          { VariableOperation }
;

-----------------------------------------------------------------------------
-- Type variables

tyvar   : tyvarid
;

tyvarop : '`' tyvarid '`'
        | '.'
;

tyvarid
        : VARID
        | special_id
        | 'unsafe'
        | 'safe'
        | 'interruptible'
;

-----------------------------------------------------------------------------
-- Variables

var
        : varid
        | '(' varsym ')'
;

qvar
        : qvarid                     { QVar }
        | '(' varsym ')'             { QVarSym }
        | '(' qvarsym1 ')'           { QVar }
;

-- We've inlined qvarsym here so that the decision about
-- whether it's a qvar or a var can be postponed until
-- *after* we see the close paren.

qvarid
        : varid
        | QVARID
        | PREFIXQVARSYM
;

-- Note that 'role' and 'family' get lexed separately regardless of
-- the use of extensions. However, because they are listed here, this
-- is OK and they can be used as normal varids.
varid
        : VARID
        | special_id
        | 'unsafe'
        | 'safe'
        | 'interruptible'
        | 'forall'
        | 'family'
        | 'role'
;

qvarsym
        : varsym
        | qvarsym1
;

qvarsym_no_minus
        : varsym_no_minus
        | qvarsym1
;


qvarsym1 : QVARSYM
;

varsym
        : varsym_no_minus
        | '-'
;

varsym_no_minus
        : VARSYM
        | special_sym
;


-- These special_ids are treated as keywords in various places,
-- but as ordinary ids elsewhere.   'special_id' collects all these
-- except 'unsafe', 'interruptible', 'forall', 'family', and 'role',
-- whose treatment differs depending on context
special_id
        : 'as'
        | 'qualified'
        | 'hiding'
        | 'export'
        | 'label'
        | 'dynamic'
        | 'stdcall'
        | 'ccall'
        | 'capi'
        | 'prim'
        | 'javascript'
        | 'group'
;

special_sym : '!'
            | '.'
            | '*'
;


-----------------------------------------------------------------------------
-- Data constructors

qconid                          -- Qualified or unqualified
        : conid
        | QCONID
        | PREFIXQCONSYM
;

conid
        : CONID
;

qconsym                         -- Qualified or unqualified
        : consym
        | QCONSYM
;

consym
        : CONSYM
        -- ':' means only list cons
        | ':'
;


-----------------------------------------------------------------------------
-- Literals

literal
        : CHAR
        | STRING                   { StringLiteral}
        | PRIMINTEGER
        | PRIMWORD
        | PRIMCHAR
        | PRIMSTRING
        | PRIMFLOAT
        | PRIMDOUBLE
;

-----------------------------------------------------------------------------
-- Layout

close
        : vccurly
     --   | error
;
-----------------------------------------------------------------------------
-- Miscellaneous (mostly renamings)

modid
        : CONID    { ModuleName }
        | QCONID   { ModuleName }
;

commas   -- One or more commas
        : commas ','
        | ','
;

-----------------------------------------------------------------------------
-- Documentation comments

docnext
  : DOCNEXT
;

docprev
  : DOCPREV
;

docnamed
  : DOCNAMED
;

docsection
  : DOCSECTION
;

moduleheader
        : DOCNEXT
;

maybe_docprev
        : docprev
        | {- empty -}
;

maybe_docnext
        : docnext
        | {- empty -}
;