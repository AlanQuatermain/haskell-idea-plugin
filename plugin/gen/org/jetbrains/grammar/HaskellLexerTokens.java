package org.jetbrains.grammar;

import org.jetbrains.haskell.parser.HaskellTokenType;


public interface HaskellLexerTokens {
  public static HaskellTokenType UNDERSCORE = new HaskellTokenType("_");
  public static HaskellTokenType AS = new HaskellTokenType("as");
  public static HaskellTokenType CASE = new HaskellTokenType("case");
  public static HaskellTokenType CLASS = new HaskellTokenType("class");
  public static HaskellTokenType DATA = new HaskellTokenType("data");
  public static HaskellTokenType DEFAULT = new HaskellTokenType("default");
  public static HaskellTokenType DERIVING = new HaskellTokenType("deriving");
  public static HaskellTokenType DO = new HaskellTokenType("do");
  public static HaskellTokenType ELSE = new HaskellTokenType("else");
  public static HaskellTokenType HIDING = new HaskellTokenType("hiding");
  public static HaskellTokenType IF = new HaskellTokenType("if");
  public static HaskellTokenType IMPORT = new HaskellTokenType("import");
  public static HaskellTokenType IN = new HaskellTokenType("in");
  public static HaskellTokenType INFIX = new HaskellTokenType("infix");
  public static HaskellTokenType INFIXL = new HaskellTokenType("infixl");
  public static HaskellTokenType INFIXR = new HaskellTokenType("infixr");
  public static HaskellTokenType INSTANCE = new HaskellTokenType("instance");
  public static HaskellTokenType LET = new HaskellTokenType("let");
  public static HaskellTokenType MODULE = new HaskellTokenType("module");
  public static HaskellTokenType NEWTYPE = new HaskellTokenType("newtype");
  public static HaskellTokenType OF = new HaskellTokenType("of");
  public static HaskellTokenType QUALIFIED = new HaskellTokenType("qualified");
  public static HaskellTokenType THEN = new HaskellTokenType("then");
  public static HaskellTokenType TYPE = new HaskellTokenType("type");
  public static HaskellTokenType WHERE = new HaskellTokenType("where");
  public static HaskellTokenType FORALL = new HaskellTokenType("forall");
  public static HaskellTokenType FOREIGN = new HaskellTokenType("foreign");
  public static HaskellTokenType EXPORT = new HaskellTokenType("export");
  public static HaskellTokenType LABEL = new HaskellTokenType("label");
  public static HaskellTokenType DYNAMIC = new HaskellTokenType("dynamic");
  public static HaskellTokenType SAFE = new HaskellTokenType("safe");
  public static HaskellTokenType INTERRUPTIBLE = new HaskellTokenType("interruptible");
  public static HaskellTokenType UNSAFE = new HaskellTokenType("unsafe");
  public static HaskellTokenType MDO = new HaskellTokenType("mdo");
  public static HaskellTokenType FAMILY = new HaskellTokenType("family");
  public static HaskellTokenType ROLE = new HaskellTokenType("role");
  public static HaskellTokenType STDCALLCONV = new HaskellTokenType("stdcall");
  public static HaskellTokenType CCALLCONV = new HaskellTokenType("ccall");
  public static HaskellTokenType CAPICONV = new HaskellTokenType("capi");
  public static HaskellTokenType PRIMCALLCONV = new HaskellTokenType("prim");
  public static HaskellTokenType JAVASCRIPTCALLCONV = new HaskellTokenType("javascript");
  public static HaskellTokenType PROC = new HaskellTokenType("proc");
  public static HaskellTokenType REC = new HaskellTokenType("rec");
  public static HaskellTokenType GROUP = new HaskellTokenType("group");
  public static HaskellTokenType BY = new HaskellTokenType("by");
  public static HaskellTokenType USING = new HaskellTokenType("using");
  public static HaskellTokenType PATTERN = new HaskellTokenType("pattern");
  public static HaskellTokenType INLINE_PRAG = new HaskellTokenType("{-# INLINE");
  public static HaskellTokenType SPEC_PRAG = new HaskellTokenType("{-# SPECIALISE");
  public static HaskellTokenType SPEC_INLINE_PRAG = new HaskellTokenType("{-# SPECIALISE_INLINE");
  public static HaskellTokenType SOURCE_PRAG = new HaskellTokenType("{-# SOURCE");
  public static HaskellTokenType RULES_PRAG = new HaskellTokenType("{-# RULES");
  public static HaskellTokenType CORE_PRAG = new HaskellTokenType("{-# CORE");
  public static HaskellTokenType SCC_PRAG = new HaskellTokenType("{-# SCC");
  public static HaskellTokenType GENERATED_PRAG = new HaskellTokenType("{-# GENERATED");
  public static HaskellTokenType DEPRECATED_PRAG = new HaskellTokenType("{-# DEPRECATED");
  public static HaskellTokenType WARNING_PRAG = new HaskellTokenType("{-# WARNING");
  public static HaskellTokenType UNPACK_PRAG = new HaskellTokenType("{-# UNPACK");
  public static HaskellTokenType NOUNPACK_PRAG = new HaskellTokenType("{-# NOUNPACK");
  public static HaskellTokenType ANN_PRAG = new HaskellTokenType("{-# ANN");
  public static HaskellTokenType VECT_PRAG = new HaskellTokenType("{-# VECTORISE");
  public static HaskellTokenType VECT_SCALAR_PRAG = new HaskellTokenType("{-# VECTORISE_SCALAR");
  public static HaskellTokenType NOVECT_PRAG = new HaskellTokenType("{-# NOVECTORISE");
  public static HaskellTokenType MINIMAL_PRAG = new HaskellTokenType("{-# MINIMAL");
  public static HaskellTokenType CTYPE = new HaskellTokenType("{-# CTYPE");
  public static HaskellTokenType OVERLAPPABLE = new HaskellTokenType("{-# OVERLAPPABLE");
  public static HaskellTokenType OVERLAPPING = new HaskellTokenType("{-# OVERLAPPING");
  public static HaskellTokenType OVERLAPS = new HaskellTokenType("{-# OVERLAPS");
  public static HaskellTokenType INCOHERENT = new HaskellTokenType("{-# INCOHERENT");
  public static HaskellTokenType CLOSE_PRAG = new HaskellTokenType("#-}");
  public static HaskellTokenType DOTDOT = new HaskellTokenType("..");
  public static HaskellTokenType COLON = new HaskellTokenType(":");
  public static HaskellTokenType DCOLON = new HaskellTokenType("::");
  public static HaskellTokenType EQUAL = new HaskellTokenType("=");
  public static HaskellTokenType LAM = new HaskellTokenType("\\");
  public static HaskellTokenType LCASE = new HaskellTokenType("lcase");
  public static HaskellTokenType VBAR = new HaskellTokenType("|");
  public static HaskellTokenType LARROW = new HaskellTokenType("<-");
  public static HaskellTokenType RARROW = new HaskellTokenType("->");
  public static HaskellTokenType AT = new HaskellTokenType("@");
  public static HaskellTokenType TILDE = new HaskellTokenType("~");
  public static HaskellTokenType TILDEHSH = new HaskellTokenType("~#");
  public static HaskellTokenType DARROW = new HaskellTokenType("=>");
  public static HaskellTokenType MINUS = new HaskellTokenType("-");
  public static HaskellTokenType BANG = new HaskellTokenType("!");
  public static HaskellTokenType STAR = new HaskellTokenType("*");
  public static HaskellTokenType LARROWTAIL = new HaskellTokenType("-<");
  public static HaskellTokenType RARROWTAIL = new HaskellTokenType(">-");
  public static HaskellTokenType LLARROWTAIL = new HaskellTokenType("-<<");
  public static HaskellTokenType RRARROWTAIL = new HaskellTokenType(">>-");
  public static HaskellTokenType DOT = new HaskellTokenType(".");
  public static HaskellTokenType OCURLY = new HaskellTokenType("{");
  public static HaskellTokenType CCURLY = new HaskellTokenType("}");
  public static HaskellTokenType VOCURLY = new HaskellTokenType("vocurly");
  public static HaskellTokenType VCCURLY = new HaskellTokenType("vccurly");
  public static HaskellTokenType OBRACK = new HaskellTokenType("[");
  public static HaskellTokenType CBRACK = new HaskellTokenType("]");
  public static HaskellTokenType OPABRACK = new HaskellTokenType("[:");
  public static HaskellTokenType CPABRACK = new HaskellTokenType(":]");
  public static HaskellTokenType OPAREN = new HaskellTokenType("(");
  public static HaskellTokenType CPAREN = new HaskellTokenType(")");
  public static HaskellTokenType OUBXPAREN = new HaskellTokenType("(#");
  public static HaskellTokenType CUBXPAREN = new HaskellTokenType("#)");
  public static HaskellTokenType OPARENBAR = new HaskellTokenType("(|");
  public static HaskellTokenType CPARENBAR = new HaskellTokenType("|)");
  public static HaskellTokenType SEMI = new HaskellTokenType(";");
  public static HaskellTokenType COMMA = new HaskellTokenType(",");
  public static HaskellTokenType BACKQUOTE = new HaskellTokenType("`");
  public static HaskellTokenType SIMPLEQUOTE = new HaskellTokenType("SIMPLEQUOTE");
  public static HaskellTokenType VARID = new HaskellTokenType("VARID");
  public static HaskellTokenType CONID = new HaskellTokenType("CONID");
  public static HaskellTokenType VARSYM = new HaskellTokenType("VARSYM");
  public static HaskellTokenType CONSYM = new HaskellTokenType("CONSYM");
  public static HaskellTokenType QVARID = new HaskellTokenType("QVARID");
  public static HaskellTokenType QCONID = new HaskellTokenType("QCONID");
  public static HaskellTokenType QVARSYM = new HaskellTokenType("QVARSYM");
  public static HaskellTokenType QCONSYM = new HaskellTokenType("QCONSYM");
  public static HaskellTokenType PREFIXQVARSYM = new HaskellTokenType("PREFIXQVARSYM");
  public static HaskellTokenType PREFIXQCONSYM = new HaskellTokenType("PREFIXQCONSYM");
  public static HaskellTokenType DUPIPVARID = new HaskellTokenType("IPDUPVARID");
  public static HaskellTokenType CHAR = new HaskellTokenType("CHAR");
  public static HaskellTokenType STRING = new HaskellTokenType("STRING");
  public static HaskellTokenType INTEGER = new HaskellTokenType("INTEGER");
  public static HaskellTokenType RATIONAL = new HaskellTokenType("RATIONAL");
  public static HaskellTokenType PRIMCHAR = new HaskellTokenType("PRIMCHAR");
  public static HaskellTokenType PRIMSTRING = new HaskellTokenType("PRIMSTRING");
  public static HaskellTokenType PRIMINT = new HaskellTokenType("PRIMINTEGER");
  public static HaskellTokenType PRIMWORD = new HaskellTokenType("PRIMWORD");
  public static HaskellTokenType PRIMFLOAT = new HaskellTokenType("PRIMFLOAT");
  public static HaskellTokenType PRIMDOUBLE = new HaskellTokenType("PRIMDOUBLE");
  public static HaskellTokenType DOCCOMMENTNEXT = new HaskellTokenType("DOCNEXT");
  public static HaskellTokenType DOCCOMMENTPREV = new HaskellTokenType("DOCPREV");
  public static HaskellTokenType DOCCOMMENTNAMED = new HaskellTokenType("DOCNAMED");
  public static HaskellTokenType DOCSECTION = new HaskellTokenType("DOCSECTION");
  public static HaskellTokenType OPENEXPQUOTE = new HaskellTokenType("[|");
  public static HaskellTokenType OPENPATQUOTE = new HaskellTokenType("[p|");
  public static HaskellTokenType OPENTYPQUOTE = new HaskellTokenType("[t|");
  public static HaskellTokenType OPENDECQUOTE = new HaskellTokenType("[d|");
  public static HaskellTokenType CLOSEQUOTE = new HaskellTokenType("|]");
  public static HaskellTokenType OPENTEXPQUOTE = new HaskellTokenType("[||");
  public static HaskellTokenType CLOSETEXPQUOTE = new HaskellTokenType("||]");
  public static HaskellTokenType IDESCAPE = new HaskellTokenType("TH_ID_SPLICE");
  public static HaskellTokenType PARENESCAPE = new HaskellTokenType("$(");
  public static HaskellTokenType IDTYESCAPE = new HaskellTokenType("TH_ID_TY_SPLICE");
  public static HaskellTokenType PARENTYESCAPE = new HaskellTokenType("$$(");
  public static HaskellTokenType TYQUOTE = new HaskellTokenType("TH_TY_QUOTE");
  public static HaskellTokenType QUASIQUOTE = new HaskellTokenType("TH_QUASIQUOTE");
  public static HaskellTokenType QQUASIQUOTE = new HaskellTokenType("TH_QQUASIQUOTE");
}
