package org.jetbrains.grammar;

import org.jetbrains.haskell.parser.HaskellToken;


public interface HaskellLexerTokens {
  public static HaskellToken UNDERSCORE = new HaskellToken("_");
  public static HaskellToken AS = new HaskellToken("as");
  public static HaskellToken CASE = new HaskellToken("case");
  public static HaskellToken CLASS = new HaskellToken("class");
  public static HaskellToken DATA = new HaskellToken("data");
  public static HaskellToken DEFAULT = new HaskellToken("default");
  public static HaskellToken DERIVING = new HaskellToken("deriving");
  public static HaskellToken DO = new HaskellToken("do");
  public static HaskellToken ELSE = new HaskellToken("else");
  public static HaskellToken HIDING = new HaskellToken("hiding");
  public static HaskellToken IF = new HaskellToken("if");
  public static HaskellToken IMPORT = new HaskellToken("import");
  public static HaskellToken IN = new HaskellToken("in");
  public static HaskellToken INFIX = new HaskellToken("infix");
  public static HaskellToken INFIXL = new HaskellToken("infixl");
  public static HaskellToken INFIXR = new HaskellToken("infixr");
  public static HaskellToken INSTANCE = new HaskellToken("instance");
  public static HaskellToken LET = new HaskellToken("let");
  public static HaskellToken MODULE = new HaskellToken("module");
  public static HaskellToken NEWTYPE = new HaskellToken("newtype");
  public static HaskellToken OF = new HaskellToken("of");
  public static HaskellToken QUALIFIED = new HaskellToken("qualified");
  public static HaskellToken THEN = new HaskellToken("then");
  public static HaskellToken TYPE = new HaskellToken("type");
  public static HaskellToken WHERE = new HaskellToken("where");
  public static HaskellToken FORALL = new HaskellToken("forall");
  public static HaskellToken FOREIGN = new HaskellToken("foreign");
  public static HaskellToken EXPORT = new HaskellToken("export");
  public static HaskellToken LABEL = new HaskellToken("label");
  public static HaskellToken DYNAMIC = new HaskellToken("dynamic");
  public static HaskellToken SAFE = new HaskellToken("safe");
  public static HaskellToken INTERRUPTIBLE = new HaskellToken("interruptible");
  public static HaskellToken UNSAFE = new HaskellToken("unsafe");
  public static HaskellToken MDO = new HaskellToken("mdo");
  public static HaskellToken FAMILY = new HaskellToken("family");
  public static HaskellToken ROLE = new HaskellToken("role");
  public static HaskellToken STDCALLCONV = new HaskellToken("stdcall");
  public static HaskellToken CCALLCONV = new HaskellToken("ccall");
  public static HaskellToken CAPICONV = new HaskellToken("capi");
  public static HaskellToken PRIMCALLCONV = new HaskellToken("prim");
  public static HaskellToken JAVASCRIPTCALLCONV = new HaskellToken("javascript");
  public static HaskellToken PROC = new HaskellToken("proc");
  public static HaskellToken REC = new HaskellToken("rec");
  public static HaskellToken GROUP = new HaskellToken("group");
  public static HaskellToken BY = new HaskellToken("by");
  public static HaskellToken USING = new HaskellToken("using");
  public static HaskellToken PATTERN = new HaskellToken("pattern");
  public static HaskellToken INLINE_PRAG = new HaskellToken("{-# INLINE");
  public static HaskellToken SPEC_PRAG = new HaskellToken("{-# SPECIALISE");
  public static HaskellToken SPEC_INLINE_PRAG = new HaskellToken("{-# SPECIALISE_INLINE");
  public static HaskellToken SOURCE_PRAG = new HaskellToken("{-# SOURCE");
  public static HaskellToken RULES_PRAG = new HaskellToken("{-# RULES");
  public static HaskellToken CORE_PRAG = new HaskellToken("{-# CORE");
  public static HaskellToken SCC_PRAG = new HaskellToken("{-# SCC");
  public static HaskellToken GENERATED_PRAG = new HaskellToken("{-# GENERATED");
  public static HaskellToken DEPRECATED_PRAG = new HaskellToken("{-# DEPRECATED");
  public static HaskellToken WARNING_PRAG = new HaskellToken("{-# WARNING");
  public static HaskellToken UNPACK_PRAG = new HaskellToken("{-# UNPACK");
  public static HaskellToken NOUNPACK_PRAG = new HaskellToken("{-# NOUNPACK");
  public static HaskellToken ANN_PRAG = new HaskellToken("{-# ANN");
  public static HaskellToken VECT_PRAG = new HaskellToken("{-# VECTORISE");
  public static HaskellToken VECT_SCALAR_PRAG = new HaskellToken("{-# VECTORISE_SCALAR");
  public static HaskellToken NOVECT_PRAG = new HaskellToken("{-# NOVECTORISE");
  public static HaskellToken MINIMAL_PRAG = new HaskellToken("{-# MINIMAL");
  public static HaskellToken CTYPE = new HaskellToken("{-# CTYPE");
  public static HaskellToken CLOSE_PRAG = new HaskellToken("#-}");
  public static HaskellToken DOTDOT = new HaskellToken("..");
  public static HaskellToken COLON = new HaskellToken(":");
  public static HaskellToken DCOLON = new HaskellToken("::");
  public static HaskellToken EQUAL = new HaskellToken("=");
  public static HaskellToken LAM = new HaskellToken("\\");
  public static HaskellToken LCASE = new HaskellToken("lcase");
  public static HaskellToken VBAR = new HaskellToken("|");
  public static HaskellToken LARROW = new HaskellToken("<-");
  public static HaskellToken RARROW = new HaskellToken("->");
  public static HaskellToken AT = new HaskellToken("@");
  public static HaskellToken TILDE = new HaskellToken("~");
  public static HaskellToken TILDEHSH = new HaskellToken("~#");
  public static HaskellToken DARROW = new HaskellToken("=>");
  public static HaskellToken MINUS = new HaskellToken("-");
  public static HaskellToken BANG = new HaskellToken("!");
  public static HaskellToken STAR = new HaskellToken("*");
  public static HaskellToken LARROWTAIL = new HaskellToken("-<");
  public static HaskellToken RARROWTAIL = new HaskellToken(">-");
  public static HaskellToken LLARROWTAIL = new HaskellToken("-<<");
  public static HaskellToken RRARROWTAIL = new HaskellToken(">>-");
  public static HaskellToken DOT = new HaskellToken(".");
  public static HaskellToken OCURLY = new HaskellToken("{");
  public static HaskellToken CCURLY = new HaskellToken("}");
  public static HaskellToken VOCURLY = new HaskellToken("vocurly");
  public static HaskellToken VCCURLY = new HaskellToken("vccurly");
  public static HaskellToken OBRACK = new HaskellToken("[");
  public static HaskellToken CBRACK = new HaskellToken("]");
  public static HaskellToken OPABRACK = new HaskellToken("[:");
  public static HaskellToken CPABRACK = new HaskellToken(":]");
  public static HaskellToken OPAREN = new HaskellToken("(");
  public static HaskellToken CPAREN = new HaskellToken(")");
  public static HaskellToken OUBXPAREN = new HaskellToken("(#");
  public static HaskellToken CUBXPAREN = new HaskellToken("#)");
  public static HaskellToken OPARENBAR = new HaskellToken("(|");
  public static HaskellToken CPARENBAR = new HaskellToken("|)");
  public static HaskellToken SEMI = new HaskellToken(";");
  public static HaskellToken COMMA = new HaskellToken(",");
  public static HaskellToken BACKQUOTE = new HaskellToken("`");
  public static HaskellToken SIMPLEQUOTE = new HaskellToken("SIMPLEQUOTE");
  public static HaskellToken VARID = new HaskellToken("VARID");
  public static HaskellToken CONID = new HaskellToken("CONID");
  public static HaskellToken VARSYM = new HaskellToken("VARSYM");
  public static HaskellToken CONSYM = new HaskellToken("CONSYM");
  public static HaskellToken QVARID = new HaskellToken("QVARID");
  public static HaskellToken QCONID = new HaskellToken("QCONID");
  public static HaskellToken QVARSYM = new HaskellToken("QVARSYM");
  public static HaskellToken QCONSYM = new HaskellToken("QCONSYM");
  public static HaskellToken PREFIXQVARSYM = new HaskellToken("PREFIXQVARSYM");
  public static HaskellToken PREFIXQCONSYM = new HaskellToken("PREFIXQCONSYM");
  public static HaskellToken DUPIPVARID = new HaskellToken("IPDUPVARID");
  public static HaskellToken CHAR = new HaskellToken("CHAR");
  public static HaskellToken STRING = new HaskellToken("STRING");
  public static HaskellToken INTEGER = new HaskellToken("INTEGER");
  public static HaskellToken RATIONAL = new HaskellToken("RATIONAL");
  public static HaskellToken PRIMCHAR = new HaskellToken("PRIMCHAR");
  public static HaskellToken PRIMSTRING = new HaskellToken("PRIMSTRING");
  public static HaskellToken PRIMINT = new HaskellToken("PRIMINTEGER");
  public static HaskellToken PRIMWORD = new HaskellToken("PRIMWORD");
  public static HaskellToken PRIMFLOAT = new HaskellToken("PRIMFLOAT");
  public static HaskellToken PRIMDOUBLE = new HaskellToken("PRIMDOUBLE");
  public static HaskellToken DOCCOMMENTNEXT = new HaskellToken("DOCNEXT");
  public static HaskellToken DOCCOMMENTPREV = new HaskellToken("DOCPREV");
  public static HaskellToken DOCCOMMENTNAMED = new HaskellToken("DOCNAMED");
  public static HaskellToken DOCSECTION = new HaskellToken("DOCSECTION");
  public static HaskellToken OPENEXPQUOTE = new HaskellToken("[|");
  public static HaskellToken OPENPATQUOTE = new HaskellToken("[p|");
  public static HaskellToken OPENTYPQUOTE = new HaskellToken("[t|");
  public static HaskellToken OPENDECQUOTE = new HaskellToken("[d|");
  public static HaskellToken CLOSEQUOTE = new HaskellToken("|]");
  public static HaskellToken OPENTEXPQUOTE = new HaskellToken("[||");
  public static HaskellToken CLOSETEXPQUOTE = new HaskellToken("||]");
  public static HaskellToken IDESCAPE = new HaskellToken("TH_ID_SPLICE");
  public static HaskellToken PARENESCAPE = new HaskellToken("$(");
  public static HaskellToken IDTYESCAPE = new HaskellToken("TH_ID_TY_SPLICE");
  public static HaskellToken PARENTYESCAPE = new HaskellToken("$$(");
  public static HaskellToken TYQUOTE = new HaskellToken("TH_TY_QUOTE");
  public static HaskellToken QUASIQUOTE = new HaskellToken("TH_QUASIQUOTE");
  public static HaskellToken QQUASIQUOTE = new HaskellToken("TH_QQUASIQUOTE");
}
