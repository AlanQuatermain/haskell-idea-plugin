/* The following code was generated by JFlex 1.5.1 */

package org.jetbrains.haskell.parser.lexer;

import java.util.*;
import com.intellij.lexer.*;
import com.intellij.psi.*;
import org.jetbrains.haskell.parser.token.*;
import com.intellij.psi.tree.IElementType;
import org.jetbrains.haskell.parser.cpp.CPPTokens;
import org.jetbrains.grammar.HaskellLexerTokens;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.1
 * from the specification file <tt>/Users/atsky/work/haskell-idea-plugin/plugin/src/org/jetbrains/haskell/parser/lexer/Haskell.flex</tt>
 */
class _HaskellLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int BLOCK_COMMENT = 2;
  public static final int TEX = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\3\0\1\5\1\0\1\1\3\0\1\1\1\3\1\12\1\11\1\11"+
    "\22\0\1\2\1\124\1\10\1\113\1\35\1\7\1\13\1\34\1\110"+
    "\1\111\1\40\1\7\1\116\1\101\1\115\1\7\1\134\1\73\1\73"+
    "\1\73\1\73\3\31\2\4\1\30\1\114\1\120\1\117\1\121\1\135"+
    "\1\43\1\63\1\66\1\64\1\33\1\61\1\67\1\76\1\56\1\72"+
    "\1\26\1\65\1\53\1\75\1\51\1\55\1\77\1\62\1\71\1\54"+
    "\1\57\1\52\1\70\1\133\1\60\1\74\1\26\1\107\1\41\1\42"+
    "\1\44\1\27\1\6\1\50\1\17\1\32\1\37\1\102\1\46\1\103"+
    "\1\127\1\36\2\24\1\21\1\16\1\104\1\20\1\130\1\132\1\47"+
    "\1\14\1\125\1\126\1\45\1\131\1\100\1\15\1\24\1\105\1\112"+
    "\1\106\1\123\6\0\1\12\33\0\11\7\1\24\2\7\1\0\4\7"+
    "\2\0\1\7\1\24\3\7\1\0\1\24\1\7\3\0\1\7\27\22"+
    "\1\7\7\22\30\24\1\7\10\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\2\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\2\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\2\22\1\24\1\22\1\24\1\22\3\24\2\22"+
    "\1\24\1\22\1\24\2\22\1\24\3\22\2\24\4\22\1\24\2\22"+
    "\1\24\3\22\3\24\2\22\1\24\2\22\1\24\1\22\1\24\1\22"+
    "\1\24\2\22\1\24\1\22\2\24\1\22\1\24\2\22\1\24\3\22"+
    "\1\24\1\22\1\24\2\22\2\24\1\0\1\22\3\24\4\0\1\22"+
    "\1\0\1\24\1\22\1\0\1\24\1\22\1\0\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\2\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\2\24\1\22\1\0\1\24\1\22\1\24\3\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\7\24\2\22\1\24\2\22"+
    "\2\24\1\22\1\24\4\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\105\24\1\0\44\24\7\0\2\24\4\7\14\0\16\7"+
    "\5\24\7\7\1\0\1\7\1\0\21\7\105\0\1\24\52\0\1\22"+
    "\1\24\1\22\1\24\1\0\1\7\1\22\1\24\2\0\4\24\1\7"+
    "\5\0\2\7\1\22\1\7\3\22\1\0\1\22\1\0\2\22\1\24"+
    "\21\22\1\0\11\22\43\24\1\22\2\24\3\22\3\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\5\24\1\22\1\24\1\7\1\22\1\24\2\22\2\24\63\22"+
    "\60\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\7\7\0\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\2\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\2\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\11\0\46\22\3\0\6\7\1\0\47\24\1\0"+
    "\2\7\4\0\1\7\56\0\1\7\1\0\1\7\2\0\1\7\2\0"+
    "\1\7\54\0\2\7\21\0\12\7\13\0\1\7\2\0\2\7\112\0"+
    "\4\7\146\0\1\7\11\0\1\7\12\0\1\7\23\0\2\7\1\0"+
    "\16\7\350\0\4\7\66\0\17\7\37\0\1\7\u0105\0\2\7\12\0"+
    "\1\7\201\0\2\7\6\0\2\7\364\0\2\7\176\0\1\7\202\0"+
    "\10\7\204\0\1\7\371\0\1\7\172\0\1\7\112\0\1\7\17\0"+
    "\1\7\12\0\2\7\245\0\27\7\2\0\6\7\24\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\107\0\1\7\70\0\10\7\1\0"+
    "\6\7\1\0\15\7\157\0\6\7\116\0\2\7\46\22\1\0\1\22"+
    "\5\0\1\22\55\0\1\7\u0264\0\11\7\47\0\12\7\146\0\1\7"+
    "\u026c\0\2\7\54\0\2\7\116\0\3\7\107\0\2\7\235\0\3\7"+
    "\1\0\4\7\44\0\13\7\u0135\0\1\7\3\0\2\7\230\0\42\7"+
    "\36\0\2\7\200\0\7\7\1\0\6\7\254\0\21\7\11\0\11\7"+
    "\177\0\4\7\73\0\5\7\76\0\2\7\100\0\10\7\13\0\1\7"+
    "\54\0\300\24\100\0\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\11\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\11\24\10\22\6\24\2\0\6\22\2\0\10\24\10\22\10\24\10\22"+
    "\6\24\2\0\6\22\2\0\10\24\1\0\1\22\1\0\1\22\1\0"+
    "\1\22\1\0\1\22\10\24\10\22\16\24\2\0\10\24\10\0\10\24"+
    "\10\0\10\24\10\0\5\24\1\0\2\24\4\22\1\0\1\7\1\24"+
    "\3\7\3\24\1\0\2\24\4\22\1\0\3\7\4\24\2\0\2\24"+
    "\4\22\1\0\3\7\10\24\5\22\3\7\2\0\3\24\1\0\2\24"+
    "\4\22\1\0\2\7\21\0\30\7\1\12\1\12\6\0\57\7\22\0"+
    "\1\24\10\0\5\7\1\24\12\0\5\7\1\0\15\24\3\0\33\7"+
    "\105\0\2\7\1\22\4\7\1\22\2\7\1\24\3\22\2\24\3\22"+
    "\1\24\1\7\1\22\3\7\5\22\6\7\1\22\1\7\1\22\1\7"+
    "\1\22\1\7\4\22\1\7\1\24\4\22\1\24\4\0\1\24\2\7"+
    "\2\24\2\22\5\7\1\22\4\24\4\7\1\24\1\7\20\0\20\22"+
    "\20\24\3\0\1\22\1\24\13\0\2\7\1\122\155\7\1\7\u01f3\7"+
    "\14\0\47\7\31\0\13\7\121\0\32\7\32\23\32\25\26\0\u0200\7"+
    "\1\0\165\7\36\0\u03b9\7\3\0\12\7\246\0\57\22\1\0\57\24"+
    "\1\0\1\22\1\24\3\22\2\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\4\22\1\24\1\22\2\24\1\22\10\24\3\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\2\24\6\7\1\22\1\24"+
    "\1\22\1\24\3\0\1\22\1\24\5\0\4\7\1\0\2\7\46\24"+
    "\1\0\1\24\5\0\1\24\102\0\1\7\217\0\57\7\1\0\14\7"+
    "\104\0\32\7\1\0\131\7\14\0\326\7\32\0\14\7\5\0\4\7"+
    "\3\0\31\7\17\0\1\7\5\0\2\7\5\0\3\7\133\0\2\7"+
    "\3\0\1\7\132\0\1\7\224\0\2\7\4\0\12\7\40\0\44\7"+
    "\34\0\37\7\13\0\36\7\10\0\1\7\17\0\40\7\12\0\47\7"+
    "\17\0\77\7\1\0\u0100\7\u19c0\0\100\7\u5690\0\67\7\67\0\2\7"+
    "\u010d\0\3\7\60\0\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\5\0"+
    "\1\7\12\0\1\7\1\0\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\132\0\6\7"+
    "\10\0\27\7\11\0\2\7\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\3\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\12\24"+
    "\1\22\1\24\1\22\1\24\2\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\0\2\7\1\22\1\24\1\22\1\24"+
    "\1\0\1\22\1\24\1\22\1\24\14\0\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\115\0\3\24\55\0"+
    "\4\7\12\0\4\7\72\0\4\7\126\0\2\7\50\0\3\7\63\0"+
    "\2\7\57\0\1\7\141\0\15\7\20\0\2\7\174\0\4\7\27\0"+
    "\3\7\144\0\2\7\20\0\2\7\371\0\1\7\u4f14\0\7\24\14\0"+
    "\5\24\21\0\1\7\210\0\20\7\u017c\0\2\7\274\0\2\7\22\0"+
    "\12\7\26\0\43\7\1\0\23\7\1\0\4\7\225\0\17\7\12\0"+
    "\7\7\32\22\6\7\32\24\13\7\172\0\7\7\1\0\7\7\15\0"+
    "\2\7\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\2\4\10\1\11\2\7\1\12\1\13\1\10\1\14"+
    "\1\7\2\10\1\15\1\16\1\17\1\20\3\10\1\21"+
    "\2\10\1\22\1\23\1\24\1\25\1\26\1\27\1\7"+
    "\1\30\1\31\1\32\1\33\1\7\1\34\1\35\1\36"+
    "\4\10\1\5\1\7\3\37\2\1\1\5\1\0\1\40"+
    "\1\0\2\10\1\41\1\10\1\11\1\0\1\7\1\42"+
    "\1\43\2\10\1\0\1\44\1\0\1\7\1\45\1\10"+
    "\1\46\1\47\1\50\2\10\1\0\3\10\1\51\1\52"+
    "\2\10\1\53\1\54\2\0\1\55\3\0\1\56\1\57"+
    "\1\60\1\7\1\0\1\7\1\0\1\61\1\62\1\63"+
    "\1\64\5\10\2\5\1\65\1\7\1\66\1\67\1\0"+
    "\1\1\1\5\17\0\1\10\1\70\1\71\1\72\2\7"+
    "\2\10\1\73\17\0\1\74\6\10\1\0\5\10\1\0"+
    "\1\75\1\76\1\77\1\100\1\0\1\101\1\102\1\103"+
    "\2\0\5\10\13\0\1\10\1\71\1\72\1\10\1\104"+
    "\15\0\3\10\1\105\2\10\1\0\2\10\1\106\1\107"+
    "\1\10\6\0\1\110\1\111\3\10\1\0\1\10\1\112"+
    "\2\10\1\113\2\10\1\0\3\10\17\0\1\114\1\0"+
    "\1\10\1\115\1\10\1\0\1\116\1\117\1\10\1\120"+
    "\1\121\2\10\1\0\1\122\1\123\1\10\20\0\1\124"+
    "\3\0\1\125\1\126\1\10\1\0\1\10\1\127\1\10"+
    "\1\0\1\130\5\0\1\131\2\0\1\132\12\0\1\10"+
    "\1\0\1\133\1\134\10\0\1\135\11\0\1\10\11\0"+
    "\1\136\1\0\1\137\6\0\1\140\1\0\1\141\3\0"+
    "\1\142\1\143\3\0\1\144\4\0\1\145\10\0\1\146"+
    "\1\0\1\147\2\0\1\150\2\0\1\151\4\0\1\152"+
    "\5\0\1\153\1\0\1\154\1\155\1\0\1\156\3\0"+
    "\1\157\1\160\2\0\1\161\2\0\1\162\10\0\1\163"+
    "\1\164";

  private static int [] zzUnpackAction() {
    int [] result = new int[451];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\136\0\274\0\u011a\0\u0178\0\u011a\0\u01d6\0\u011a"+
    "\0\u0234\0\u0292\0\u02f0\0\u034e\0\u03ac\0\u040a\0\u0468\0\u04c6"+
    "\0\u0524\0\u02f0\0\u0582\0\u05e0\0\u063e\0\u069c\0\u06fa\0\u0758"+
    "\0\u0234\0\u07b6\0\u011a\0\u0234\0\u0814\0\u0872\0\u08d0\0\u092e"+
    "\0\u098c\0\u09ea\0\u0a48\0\u011a\0\u0aa6\0\u0b04\0\u011a\0\u0b62"+
    "\0\u0bc0\0\u011a\0\u0c1e\0\u011a\0\u0c7c\0\u0cda\0\u0234\0\u0234"+
    "\0\u0234\0\u0d38\0\u0d96\0\u0df4\0\u0e52\0\u0eb0\0\u0f0e\0\u011a"+
    "\0\u0f6c\0\u0fca\0\u1028\0\u1086\0\u10e4\0\u0292\0\u011a\0\u1142"+
    "\0\u11a0\0\u11fe\0\u02f0\0\u125c\0\u12ba\0\u1318\0\u1376\0\u0234"+
    "\0\u011a\0\u13d4\0\u1432\0\u1490\0\u011a\0\u14ee\0\u154c\0\u011a"+
    "\0\u15aa\0\u02f0\0\u1608\0\u02f0\0\u1666\0\u16c4\0\u1722\0\u1780"+
    "\0\u17de\0\u183c\0\u02f0\0\u189a\0\u18f8\0\u1956\0\u19b4\0\u011a"+
    "\0\u1a12\0\u1a70\0\u1ace\0\u1b2c\0\u1b8a\0\u1be8\0\u011a\0\u011a"+
    "\0\u011a\0\u1c46\0\u1ca4\0\u1d02\0\u1d60\0\u011a\0\u0234\0\u0234"+
    "\0\u0234\0\u1dbe\0\u1e1c\0\u1e7a\0\u1ed8\0\u1f36\0\u1f94\0\u1ff2"+
    "\0\u2050\0\u20ae\0\u011a\0\u011a\0\u210c\0\u216a\0\u011a\0\u21c8"+
    "\0\u2226\0\u2284\0\u22e2\0\u2340\0\u239e\0\u23fc\0\u245a\0\u24b8"+
    "\0\u2516\0\u2574\0\u25d2\0\u2630\0\u268e\0\u26ec\0\u274a\0\u02f0"+
    "\0\u27a8\0\u2806\0\u2864\0\u28c2\0\u2920\0\u297e\0\u011a\0\u29dc"+
    "\0\u2a3a\0\u2a98\0\u2af6\0\u2b54\0\u2bb2\0\u2c10\0\u2c6e\0\u2ccc"+
    "\0\u2d2a\0\u2d88\0\u2de6\0\u2e44\0\u2ea2\0\u2f00\0\u011a\0\u2f5e"+
    "\0\u2fbc\0\u301a\0\u3078\0\u30d6\0\u3134\0\u3192\0\u31f0\0\u324e"+
    "\0\u32ac\0\u330a\0\u3368\0\u33c6\0\u011a\0\u011a\0\u011a\0\u011a"+
    "\0\u3424\0\u011a\0\u3482\0\u011a\0\u34e0\0\u353e\0\u359c\0\u35fa"+
    "\0\u3658\0\u36b6\0\u3714\0\u3772\0\u37d0\0\u382e\0\u388c\0\u38ea"+
    "\0\u3948\0\u39a6\0\u3a04\0\u3a62\0\u3ac0\0\u3b1e\0\u3b7c\0\u3bda"+
    "\0\u3c38\0\u3c96\0\u02f0\0\u3cf4\0\u3d52\0\u3db0\0\u3e0e\0\u3e6c"+
    "\0\u3eca\0\u3f28\0\u3f86\0\u3fe4\0\u4042\0\u40a0\0\u40fe\0\u415c"+
    "\0\u41ba\0\u4218\0\u4276\0\u02f0\0\u42d4\0\u4332\0\u4390\0\u43ee"+
    "\0\u444c\0\u02f0\0\u02f0\0\u44aa\0\u4508\0\u4566\0\u45c4\0\u4622"+
    "\0\u4680\0\u46de\0\u02f0\0\u02f0\0\u473c\0\u479a\0\u47f8\0\u4856"+
    "\0\u48b4\0\u02f0\0\u4912\0\u4970\0\u49ce\0\u4a2c\0\u4a8a\0\u4ae8"+
    "\0\u4b46\0\u4ba4\0\u4c02\0\u4c60\0\u4cbe\0\u4d1c\0\u4d7a\0\u4dd8"+
    "\0\u4e36\0\u4e94\0\u4ef2\0\u4f50\0\u4fae\0\u500c\0\u506a\0\u50c8"+
    "\0\u5126\0\u5184\0\u51e2\0\u5240\0\u529e\0\u02f0\0\u52fc\0\u535a"+
    "\0\u02f0\0\u02f0\0\u53b8\0\u02f0\0\u02f0\0\u5416\0\u5474\0\u54d2"+
    "\0\u02f0\0\u02f0\0\u5530\0\u558e\0\u55ec\0\u564a\0\u56a8\0\u5706"+
    "\0\u5764\0\u57c2\0\u5820\0\u587e\0\u58dc\0\u593a\0\u5998\0\u59f6"+
    "\0\u5a54\0\u5ab2\0\u5b10\0\u4508\0\u5b6e\0\u5bcc\0\u5c2a\0\u5c88"+
    "\0\u02f0\0\u5ce6\0\u5d44\0\u5da2\0\u02f0\0\u5e00\0\u5e5e\0\u02f0"+
    "\0\u5ebc\0\u5f1a\0\u5f78\0\u5fd6\0\u6034\0\u4508\0\u6092\0\u60f0"+
    "\0\u4508\0\u614e\0\u61ac\0\u620a\0\u6268\0\u62c6\0\u6324\0\u6382"+
    "\0\u63e0\0\u643e\0\u649c\0\u64fa\0\u6558\0\u02f0\0\u02f0\0\u65b6"+
    "\0\u6614\0\u6672\0\u66d0\0\u672e\0\u678c\0\u67ea\0\u6848\0\u4508"+
    "\0\u68a6\0\u6904\0\u6962\0\u69c0\0\u6a1e\0\u6a7c\0\u6ada\0\u6b38"+
    "\0\u6b96\0\u6bf4\0\u6c52\0\u6cb0\0\u6d0e\0\u6d6c\0\u6dca\0\u6e28"+
    "\0\u6e86\0\u6ee4\0\u6f42\0\u4508\0\u6fa0\0\u4508\0\u6ffe\0\u705c"+
    "\0\u70ba\0\u7118\0\u7176\0\u71d4\0\u02f0\0\u7232\0\u011a\0\u7290"+
    "\0\u72ee\0\u734c\0\u4508\0\u4508\0\u73aa\0\u7408\0\u7466\0\u4508"+
    "\0\u74c4\0\u7522\0\u7580\0\u75de\0\u5b6e\0\u763c\0\u769a\0\u76f8"+
    "\0\u7756\0\u77b4\0\u7812\0\u7870\0\u78ce\0\u4508\0\u792c\0\u4508"+
    "\0\u798a\0\u79e8\0\u4508\0\u7a46\0\u7aa4\0\u4508\0\u7b02\0\u7b60"+
    "\0\u7bbe\0\u7c1c\0\u011a\0\u7c7a\0\u7cd8\0\u7d36\0\u7d94\0\u7df2"+
    "\0\u7e50\0\u7eae\0\u4508\0\u4508\0\u7f0c\0\u7f6a\0\u7fc8\0\u8026"+
    "\0\u8084\0\u4508\0\u4508\0\u80e2\0\u8140\0\u4508\0\u819e\0\u81fc"+
    "\0\u4508\0\u825a\0\u82b8\0\u8316\0\u8374\0\u83d2\0\u8430\0\u848e"+
    "\0\u84ec\0\u4508\0\u4508";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[451];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\2\7\1\10\1\11\1\12\1\5"+
    "\1\0\1\11\2\13\1\14\1\13\1\15\1\16\1\17"+
    "\1\20\1\13\1\21\1\17\1\22\1\23\1\7\1\24"+
    "\1\17\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\11\1\13\1\35\1\36\1\37\22\17\1\7"+
    "\4\17\1\13\1\40\1\41\1\13\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\11\1\57\1\60\1\61\1\62\1\13"+
    "\1\63\1\13\1\64\1\65\1\17\1\66\1\67\12\70"+
    "\1\0\66\70\1\71\3\70\1\72\30\70\41\73\1\74"+
    "\74\73\137\0\2\5\6\0\1\5\130\0\2\7\23\0"+
    "\1\7\41\0\1\7\17\0\1\75\20\0\1\7\10\0"+
    "\1\11\3\0\1\11\7\0\1\11\1\0\1\11\2\0"+
    "\1\11\4\0\1\11\2\0\2\11\1\0\2\11\34\0"+
    "\1\11\10\0\2\11\1\0\1\11\1\0\6\11\10\0"+
    "\1\11\3\76\1\77\4\76\1\77\30\76\1\100\74\76"+
    "\4\0\2\13\6\0\14\13\1\0\4\13\1\0\2\13"+
    "\5\0\34\13\1\0\3\13\6\0\1\101\11\0\10\13"+
    "\5\0\2\13\6\0\4\13\1\102\7\13\1\0\4\13"+
    "\1\0\2\13\5\0\34\13\1\0\3\13\6\0\1\101"+
    "\11\0\10\13\5\0\2\13\6\0\14\13\1\0\4\13"+
    "\1\0\2\13\5\0\1\13\1\103\32\13\1\0\3\13"+
    "\6\0\1\101\11\0\10\13\5\0\2\13\6\0\14\13"+
    "\1\0\4\13\1\0\2\13\5\0\34\13\1\0\1\104"+
    "\2\13\6\0\1\101\11\0\10\13\5\0\2\17\6\0"+
    "\14\17\1\0\4\17\1\0\2\17\5\0\34\17\1\0"+
    "\3\17\6\0\1\105\1\0\1\106\7\0\10\17\5\0"+
    "\2\17\1\0\1\11\3\0\1\11\7\17\1\20\1\17"+
    "\1\20\2\17\1\11\4\17\1\11\2\17\2\11\1\0"+
    "\2\11\34\17\1\11\3\17\5\0\2\11\1\0\1\107"+
    "\1\0\6\11\10\17\1\11\4\0\2\13\1\0\1\11"+
    "\3\0\1\11\7\13\1\21\1\13\1\21\2\13\1\11"+
    "\4\13\1\11\2\13\2\11\1\0\2\11\34\13\1\11"+
    "\3\13\5\0\2\11\1\0\1\11\1\0\6\11\10\13"+
    "\1\11\7\0\1\11\3\0\1\11\7\0\1\11\1\0"+
    "\1\11\2\0\1\110\4\0\1\11\2\0\2\11\1\111"+
    "\2\11\34\0\1\11\10\0\2\11\1\0\1\11\1\0"+
    "\6\11\10\0\1\11\4\0\2\13\6\0\5\13\1\112"+
    "\6\13\1\0\4\13\1\0\2\13\5\0\3\13\1\113"+
    "\30\13\1\0\3\13\6\0\1\101\11\0\10\13\1\0"+
    "\3\114\1\0\30\114\1\115\4\114\1\116\74\114\7\0"+
    "\1\11\3\0\1\11\7\0\1\11\1\0\1\11\2\0"+
    "\1\11\4\0\1\117\2\0\2\11\1\0\2\11\34\0"+
    "\1\11\6\0\1\120\1\0\2\11\1\0\1\11\1\0"+
    "\6\11\10\0\1\11\4\0\2\13\6\0\2\13\1\121"+
    "\11\13\1\0\4\13\1\0\2\13\5\0\1\13\1\122"+
    "\32\13\1\0\2\13\1\123\6\0\1\101\11\0\10\13"+
    "\5\0\2\13\6\0\4\13\1\124\7\13\1\0\4\13"+
    "\1\0\2\13\5\0\3\13\1\125\30\13\1\0\1\126"+
    "\2\13\6\0\1\101\11\0\10\13\10\0\1\11\3\0"+
    "\1\11\7\0\1\11\1\0\1\11\2\0\1\11\4\0"+
    "\1\11\2\0\2\11\1\0\2\11\34\0\1\11\1\127"+
    "\7\0\2\11\1\0\1\11\1\0\6\11\10\0\1\11"+
    "\4\0\2\13\6\0\4\13\1\130\7\13\1\0\4\13"+
    "\1\0\2\13\5\0\3\13\1\131\30\13\1\0\3\13"+
    "\6\0\1\101\11\0\10\13\5\0\2\13\6\0\4\13"+
    "\1\132\7\13\1\0\4\13\1\0\2\13\5\0\34\13"+
    "\1\0\3\13\6\0\1\101\11\0\10\13\5\0\2\13"+
    "\6\0\1\133\13\13\1\0\4\13\1\0\2\13\5\0"+
    "\34\13\1\0\3\13\6\0\1\101\11\0\10\13\10\0"+
    "\1\11\3\0\1\11\7\0\1\11\1\0\1\11\2\0"+
    "\1\11\4\0\1\11\2\0\2\11\1\0\2\11\34\0"+
    "\1\134\10\0\2\11\1\0\1\11\1\0\2\11\1\57"+
    "\3\11\10\0\1\11\4\0\2\13\6\0\5\13\1\135"+
    "\6\13\1\0\4\13\1\0\2\13\5\0\34\13\1\0"+
    "\3\13\6\0\1\101\11\0\10\13\5\0\2\13\6\0"+
    "\14\13\1\0\4\13\1\0\2\13\5\0\34\13\1\0"+
    "\1\136\2\13\6\0\1\101\11\0\10\13\102\0\1\137"+
    "\64\0\1\140\6\0\1\141\42\0\1\142\7\0\1\143"+
    "\12\0\1\144\2\0\1\145\117\0\1\146\1\147\31\0"+
    "\1\11\3\0\1\11\7\0\1\11\1\0\1\11\2\0"+
    "\1\11\4\0\1\11\2\0\2\11\1\150\2\11\34\0"+
    "\1\11\7\0\1\151\1\152\1\11\1\0\1\11\1\0"+
    "\6\11\10\0\1\11\7\0\1\11\3\0\1\11\7\0"+
    "\1\11\1\0\1\11\2\0\1\11\4\0\1\11\1\153"+
    "\1\0\2\11\1\0\2\11\34\0\1\154\1\155\6\0"+
    "\1\156\2\11\1\0\1\11\1\0\6\11\10\0\1\11"+
    "\7\0\1\11\3\0\1\11\7\0\1\11\1\0\1\11"+
    "\2\0\1\11\4\0\1\11\2\0\2\11\1\0\2\11"+
    "\34\0\1\11\10\0\2\11\1\0\1\157\1\0\6\11"+
    "\10\0\1\11\7\0\1\11\3\0\1\11\7\0\1\11"+
    "\1\0\1\11\2\0\1\11\4\0\1\11\2\0\2\11"+
    "\1\0\2\11\34\0\1\11\10\0\2\11\1\0\1\11"+
    "\1\0\2\11\1\160\3\11\10\0\1\11\7\0\1\11"+
    "\3\0\1\11\7\0\1\11\1\0\1\11\2\0\1\11"+
    "\4\0\1\11\2\0\2\11\1\0\2\11\34\0\1\161"+
    "\10\0\2\11\1\0\1\11\1\0\6\11\10\0\1\11"+
    "\4\0\2\13\6\0\1\13\1\162\12\13\1\0\4\13"+
    "\1\0\2\13\5\0\34\13\1\0\3\13\6\0\1\101"+
    "\11\0\2\13\1\163\5\13\5\0\2\13\6\0\14\13"+
    "\1\0\4\13\1\0\1\164\1\13\5\0\34\13\1\0"+
    "\3\13\6\0\1\101\11\0\10\13\5\0\2\13\6\0"+
    "\14\13\1\0\4\13\1\0\2\13\5\0\34\13\1\0"+
    "\3\13\6\0\1\101\11\0\2\13\1\165\5\13\5\0"+
    "\2\13\6\0\14\13\1\0\4\13\1\0\2\13\5\0"+
    "\34\13\1\0\3\13\6\0\1\101\11\0\1\13\1\166"+
    "\6\13\5\0\2\7\12\0\1\167\10\0\1\7\23\0"+
    "\1\167\2\0\1\170\12\0\1\7\4\0\1\170\12\0"+
    "\1\75\20\0\1\7\10\0\1\11\3\0\1\11\6\171"+
    "\1\0\1\11\1\171\1\172\1\0\1\171\1\11\1\0"+
    "\1\171\2\0\1\11\2\171\2\11\1\0\2\11\4\171"+
    "\27\0\1\171\1\11\3\171\5\0\2\11\1\0\1\11"+
    "\1\0\6\11\6\171\2\0\1\11\106\0\1\173\130\0"+
    "\1\174\34\0\41\73\1\0\74\73\17\0\1\175\21\0"+
    "\1\176\207\0\1\177\23\0\3\200\1\76\3\0\1\76"+
    "\1\200\1\0\1\76\3\0\1\76\1\201\10\0\1\76"+
    "\1\0\1\202\1\76\4\0\1\76\2\0\1\203\4\76"+
    "\1\204\1\205\1\206\1\207\1\0\1\210\2\0\1\211"+
    "\1\0\1\212\1\213\1\0\1\214\1\215\1\210\1\205"+
    "\1\0\1\76\2\0\1\205\1\0\1\216\3\0\1\76"+
    "\20\0\1\76\6\0\1\76\114\0\1\101\26\0\2\13"+
    "\6\0\14\13\1\0\4\13\1\0\1\13\1\217\5\0"+
    "\34\13\1\0\3\13\6\0\1\101\11\0\10\13\5\0"+
    "\2\13\6\0\14\13\1\0\4\13\1\0\2\13\5\0"+
    "\34\13\1\0\3\13\6\0\1\101\11\0\1\220\7\13"+
    "\114\0\1\105\36\0\6\221\2\222\2\221\1\222\1\221"+
    "\2\0\1\221\1\222\2\0\2\221\5\0\4\221\22\222"+
    "\1\0\4\222\1\221\1\0\3\221\20\0\6\221\1\222"+
    "\11\0\1\11\3\0\1\11\6\221\1\222\1\223\1\221"+
    "\1\224\1\222\1\221\1\11\1\0\1\221\1\222\1\0"+
    "\1\11\2\221\2\11\1\0\2\11\4\221\22\222\1\0"+
    "\4\222\1\221\1\11\3\221\5\0\2\11\1\0\1\11"+
    "\1\0\6\11\6\221\1\222\1\0\1\11\4\0\2\13"+
    "\6\0\14\13\1\0\4\13\1\0\2\13\5\0\3\13"+
    "\1\225\30\13\1\0\3\13\6\0\1\101\11\0\10\13"+
    "\5\0\2\13\6\0\1\226\13\13\1\0\4\13\1\0"+
    "\2\13\5\0\34\13\1\0\3\13\6\0\1\101\11\0"+
    "\10\13\35\0\1\227\105\0\1\230\3\0\1\114\2\0"+
    "\1\114\3\0\1\114\1\231\10\0\1\230\1\0\1\232"+
    "\1\114\4\0\1\114\2\0\1\233\4\114\1\234\1\235"+
    "\1\236\1\237\1\0\1\240\2\0\1\241\1\0\1\242"+
    "\1\243\1\0\1\244\1\245\1\240\1\235\1\0\1\230"+
    "\2\0\1\235\1\0\1\246\3\0\1\114\20\0\1\114"+
    "\6\0\1\230\10\0\1\11\3\0\1\11\7\0\1\11"+
    "\1\0\1\11\2\0\1\11\4\0\1\11\2\0\2\11"+
    "\1\0\2\11\34\0\1\11\6\0\1\247\1\0\2\11"+
    "\1\0\1\11\1\0\6\11\10\0\1\11\4\0\2\13"+
    "\6\0\14\13\1\0\4\13\1\0\2\13\5\0\34\13"+
    "\1\0\3\13\6\0\1\101\11\0\3\13\1\250\4\13"+
    "\5\0\2\13\6\0\1\251\13\13\1\0\4\13\1\0"+
    "\2\13\5\0\1\13\1\252\32\13\1\0\3\13\6\0"+
    "\1\101\11\0\10\13\5\0\2\13\6\0\14\13\1\0"+
    "\4\13\1\0\2\13\5\0\34\13\1\0\3\13\6\0"+
    "\1\101\11\0\1\253\7\13\5\0\2\13\6\0\14\13"+
    "\1\0\4\13\1\0\2\13\5\0\1\13\1\254\1\255"+
    "\31\13\1\0\3\13\6\0\1\101\11\0\10\13\105\0"+
    "\1\256\35\0\2\13\6\0\14\13\1\0\4\13\1\0"+
    "\2\13\5\0\2\13\1\257\31\13\1\0\3\13\6\0"+
    "\1\101\11\0\10\13\5\0\2\13\6\0\2\13\1\260"+
    "\11\13\1\0\4\13\1\0\2\13\5\0\34\13\1\0"+
    "\3\13\6\0\1\101\11\0\10\13\5\0\2\13\6\0"+
    "\5\13\1\261\6\13\1\0\4\13\1\0\2\13\5\0"+
    "\34\13\1\0\3\13\6\0\1\101\11\0\10\13\1\0"+
    "\3\134\1\0\132\134\4\0\2\13\6\0\1\262\13\13"+
    "\1\0\4\13\1\0\2\13\5\0\34\13\1\0\3\13"+
    "\6\0\1\101\11\0\10\13\5\0\2\13\6\0\14\13"+
    "\1\0\4\13\1\0\2\13\5\0\34\13\1\0\3\13"+
    "\6\0\1\101\11\0\4\13\1\263\3\13\114\0\1\264"+
    "\134\0\1\265\135\0\1\143\135\0\1\266\135\0\1\267"+
    "\135\0\1\270\23\0\3\271\1\0\5\271\2\0\123\271"+
    "\7\0\1\11\3\0\1\11\7\0\1\11\1\0\1\11"+
    "\2\0\1\11\4\0\1\11\2\0\2\11\1\272\2\11"+
    "\34\0\1\11\10\0\2\11\1\0\1\11\1\0\6\11"+
    "\10\0\1\11\46\0\1\273\76\0\1\11\3\0\1\11"+
    "\7\0\1\11\1\0\1\11\2\0\1\11\4\0\1\11"+
    "\2\0\2\11\1\0\2\11\34\0\1\11\4\0\1\274"+
    "\3\0\2\11\1\0\1\11\1\0\6\11\10\0\1\11"+
    "\21\0\1\275\62\0\1\276\35\0\2\13\6\0\14\13"+
    "\1\0\4\13\1\0\2\13\5\0\34\13\1\0\3\13"+
    "\6\0\1\101\11\0\3\13\1\277\4\13\5\0\2\13"+
    "\6\0\14\13\1\0\4\13\1\0\2\13\5\0\34\13"+
    "\1\0\1\300\2\13\6\0\1\101\11\0\10\13\5\0"+
    "\2\13\6\0\14\13\1\0\4\13\1\0\1\13\1\301"+
    "\5\0\34\13\1\0\3\13\6\0\1\101\11\0\10\13"+
    "\5\0\2\13\6\0\14\13\1\0\4\13\1\0\2\13"+
    "\5\0\34\13\1\0\1\302\2\13\6\0\1\101\11\0"+
    "\10\13\5\0\2\13\6\0\14\13\1\0\4\13\1\0"+
    "\2\13\5\0\3\13\1\303\30\13\1\0\3\13\6\0"+
    "\1\101\11\0\10\13\32\0\1\167\41\0\1\167\40\0"+
    "\1\167\5\0\1\170\12\0\1\170\11\0\3\170\3\0"+
    "\1\170\6\0\1\170\1\0\1\170\10\0\1\170\1\0"+
    "\2\170\1\0\2\170\3\0\1\170\6\0\1\170\31\0"+
    "\1\170\5\0\2\171\6\0\14\171\1\0\4\171\1\0"+
    "\2\171\5\0\34\171\1\0\3\171\20\0\10\171\5\0"+
    "\2\171\1\0\1\11\3\0\1\11\7\171\1\172\1\171"+
    "\1\172\2\171\1\11\4\171\1\11\2\171\2\11\1\0"+
    "\2\11\34\171\1\11\3\171\5\0\2\11\1\0\1\11"+
    "\1\0\6\11\10\171\1\11\102\0\1\304\74\0\1\176"+
    "\75\0\3\200\5\0\1\200\27\0\1\76\125\0\1\76"+
    "\41\0\1\76\40\0\1\76\54\0\1\305\5\0\1\306"+
    "\2\0\1\307\77\0\2\76\3\0\1\76\5\0\4\76"+
    "\4\0\22\76\1\0\4\76\7\0\1\76\23\0\1\76"+
    "\54\0\1\306\10\0\1\310\126\0\1\76\150\0\1\76"+
    "\120\0\1\311\2\0\1\76\1\0\1\312\12\0\1\76"+
    "\1\0\1\313\2\0\1\76\115\0\1\76\127\0\1\314"+
    "\2\0\1\315\1\210\1\0\1\316\15\0\1\76\124\0"+
    "\1\310\134\0\1\313\5\0\1\76\120\0\1\76\4\0"+
    "\1\306\130\0\1\76\12\0\1\76\52\0\1\76\12\0"+
    "\1\76\11\0\3\76\3\0\1\76\6\0\1\76\1\0"+
    "\1\76\10\0\1\76\1\0\2\76\1\0\2\76\3\0"+
    "\1\76\6\0\1\76\31\0\1\76\5\0\2\13\6\0"+
    "\14\13\1\0\4\13\1\0\2\13\5\0\34\13\1\0"+
    "\3\13\6\0\1\101\11\0\1\13\1\317\6\13\5\0"+
    "\2\221\6\0\14\221\1\0\4\221\1\0\2\221\5\0"+
    "\34\221\1\0\3\221\6\0\1\320\11\0\10\221\5\0"+
    "\2\222\6\0\14\222\1\0\4\222\1\0\2\222\5\0"+
    "\34\222\1\0\3\222\6\0\1\321\1\0\1\106\7\0"+
    "\10\222\5\0\2\222\1\0\1\11\3\0\1\11\7\222"+
    "\1\223\1\222\1\223\2\222\1\11\4\222\1\11\2\222"+
    "\2\11\1\0\2\11\34\222\1\11\3\222\5\0\2\11"+
    "\1\0\1\107\1\0\6\11\10\222\1\11\4\0\2\221"+
    "\1\0\1\11\3\0\1\11\7\221\1\224\1\221\1\224"+
    "\2\221\1\11\4\221\1\11\2\221\2\11\1\0\2\11"+
    "\34\221\1\11\3\221\5\0\2\11\1\0\1\11\1\0"+
    "\6\11\10\221\1\11\4\0\2\13\6\0\1\322\13\13"+
    "\1\0\4\13\1\0\2\13\5\0\34\13\1\0\3\13"+
    "\6\0\1\101\11\0\10\13\5\0\2\13\6\0\14\13"+
    "\1\0\4\13\1\0\2\13\5\0\34\13\1\0\1\323"+
    "\2\13\6\0\1\101\11\0\10\13\5\0\1\230\24\0"+
    "\1\230\2\0\1\227\36\0\1\230\40\0\1\230\32\0"+
    "\1\324\41\0\1\324\40\0\1\324\54\0\1\325\5\0"+
    "\1\326\2\0\1\327\77\0\2\114\3\0\1\114\5\0"+
    "\4\114\4\0\22\114\1\0\4\114\7\0\1\114\23\0"+
    "\1\114\54\0\1\326\10\0\1\330\126\0\1\114\150\0"+
    "\1\114\120\0\1\331\2\0\1\332\1\0\1\333\12\0"+
    "\1\114\1\0\1\334\2\0\1\114\115\0\1\114\127\0"+
    "\1\335\2\0\1\336\1\240\1\0\1\337\15\0\1\114"+
    "\124\0\1\330\134\0\1\334\5\0\1\114\120\0\1\114"+
    "\4\0\1\326\130\0\1\114\12\0\1\114\52\0\1\340"+
    "\12\0\1\340\11\0\3\340\3\0\1\340\6\0\1\340"+
    "\1\0\1\340\10\0\1\340\1\0\2\340\1\0\2\340"+
    "\3\0\1\340\6\0\1\340\31\0\1\340\5\0\2\13"+
    "\6\0\4\13\1\341\7\13\1\0\4\13\1\0\2\13"+
    "\5\0\34\13\1\0\3\13\6\0\1\101\11\0\10\13"+
    "\5\0\2\13\6\0\14\13\1\0\4\13\1\0\2\13"+
    "\5\0\34\13\1\0\3\13\6\0\1\101\11\0\1\342"+
    "\7\13\5\0\2\13\6\0\14\13\1\0\4\13\1\0"+
    "\1\343\1\13\5\0\34\13\1\0\3\13\6\0\1\101"+
    "\11\0\10\13\5\0\2\13\6\0\14\13\1\0\4\13"+
    "\1\0\2\13\5\0\3\13\1\344\30\13\1\0\3\13"+
    "\6\0\1\101\11\0\10\13\5\0\2\13\6\0\14\13"+
    "\1\0\4\13\1\0\2\13\5\0\3\13\1\345\30\13"+
    "\1\0\3\13\6\0\1\101\11\0\10\13\5\0\2\13"+
    "\6\0\14\13\1\0\4\13\1\0\1\346\1\13\5\0"+
    "\34\13\1\0\3\13\6\0\1\101\11\0\10\13\40\0"+
    "\1\347\102\0\2\13\6\0\14\13\1\0\4\13\1\0"+
    "\2\13\5\0\3\13\1\350\30\13\1\0\3\13\6\0"+
    "\1\101\11\0\10\13\5\0\2\13\6\0\14\13\1\0"+
    "\4\13\1\0\1\351\1\13\5\0\34\13\1\0\3\13"+
    "\6\0\1\101\11\0\10\13\5\0\2\13\6\0\14\13"+
    "\1\0\4\13\1\0\2\13\5\0\34\13\1\0\1\352"+
    "\2\13\6\0\1\101\11\0\10\13\5\0\2\13\6\0"+
    "\14\13\1\0\4\13\1\0\2\13\5\0\34\13\1\0"+
    "\1\353\2\13\6\0\1\101\11\0\10\13\5\0\2\13"+
    "\6\0\14\13\1\0\4\13\1\0\2\13\5\0\34\13"+
    "\1\0\3\13\6\0\1\101\11\0\1\354\7\13\1\0"+
    "\2\355\1\356\1\0\5\355\2\0\100\355\1\357\22\355"+
    "\13\0\1\360\122\0\3\273\1\0\132\273\14\0\1\361"+
    "\160\0\1\362\102\0\2\13\6\0\14\13\1\0\4\13"+
    "\1\0\2\13\5\0\34\13\1\0\1\363\2\13\6\0"+
    "\1\101\11\0\10\13\5\0\2\13\6\0\14\13\1\0"+
    "\4\13\1\0\2\13\5\0\34\13\1\0\2\13\1\364"+
    "\6\0\1\101\11\0\10\13\5\0\2\13\6\0\14\13"+
    "\1\0\4\13\1\0\1\365\1\13\5\0\34\13\1\0"+
    "\3\13\6\0\1\101\11\0\10\13\5\0\2\13\6\0"+
    "\14\13\1\0\4\13\1\0\2\13\5\0\2\13\1\366"+
    "\31\13\1\0\3\13\6\0\1\101\11\0\10\13\5\0"+
    "\2\13\6\0\5\13\1\367\6\13\1\0\4\13\1\0"+
    "\2\13\5\0\34\13\1\0\3\13\6\0\1\101\11\0"+
    "\10\13\104\0\1\370\113\0\1\76\127\0\1\76\155\0"+
    "\1\76\127\0\1\76\136\0\1\76\127\0\1\76\126\0"+
    "\1\76\146\0\1\76\137\0\1\76\131\0\1\76\5\0"+
    "\1\76\53\0\2\13\6\0\5\13\1\371\6\13\1\0"+
    "\4\13\1\0\2\13\5\0\34\13\1\0\3\13\6\0"+
    "\1\101\11\0\10\13\114\0\1\320\135\0\1\321\26\0"+
    "\2\13\6\0\1\372\13\13\1\0\4\13\1\0\2\13"+
    "\5\0\34\13\1\0\3\13\6\0\1\101\11\0\10\13"+
    "\32\0\1\324\2\0\1\227\36\0\1\324\40\0\1\324"+
    "\62\0\1\114\127\0\1\114\155\0\1\114\127\0\1\114"+
    "\136\0\1\114\103\0\1\227\21\0\1\114\137\0\1\114"+
    "\126\0\1\114\146\0\1\114\137\0\1\114\131\0\1\114"+
    "\5\0\1\114\53\0\1\340\12\0\1\340\11\0\3\340"+
    "\1\227\2\0\1\340\6\0\1\340\1\0\1\340\10\0"+
    "\1\340\1\0\2\340\1\0\2\340\3\0\1\340\6\0"+
    "\1\340\31\0\1\340\5\0\2\13\6\0\14\13\1\0"+
    "\4\13\1\0\2\13\5\0\2\13\1\373\31\13\1\0"+
    "\3\13\6\0\1\101\11\0\10\13\5\0\2\13\6\0"+
    "\14\13\1\0\4\13\1\0\2\13\5\0\3\13\1\374"+
    "\30\13\1\0\3\13\6\0\1\101\11\0\10\13\5\0"+
    "\2\13\6\0\14\13\1\0\4\13\1\0\2\13\5\0"+
    "\33\13\1\375\1\0\3\13\6\0\1\101\11\0\10\13"+
    "\5\0\2\13\6\0\14\13\1\0\4\13\1\0\2\13"+
    "\5\0\34\13\1\0\3\13\6\0\1\101\11\0\1\13"+
    "\1\376\6\13\5\0\2\13\6\0\14\13\1\0\4\13"+
    "\1\0\2\13\5\0\1\377\33\13\1\0\3\13\6\0"+
    "\1\101\11\0\10\13\106\0\1\u0100\34\0\2\13\6\0"+
    "\5\13\1\u0101\6\13\1\0\4\13\1\0\2\13\5\0"+
    "\34\13\1\0\3\13\6\0\1\101\11\0\10\13\5\0"+
    "\2\13\6\0\5\13\1\u0102\6\13\1\0\4\13\1\0"+
    "\2\13\5\0\34\13\1\0\3\13\6\0\1\101\11\0"+
    "\10\13\5\0\2\13\6\0\1\13\1\u0103\12\13\1\0"+
    "\4\13\1\0\2\13\5\0\34\13\1\0\3\13\6\0"+
    "\1\101\11\0\10\13\1\0\3\355\1\0\5\355\2\0"+
    "\100\355\1\357\25\355\1\0\5\355\2\0\20\355\1\u0104"+
    "\15\355\1\u0105\1\u0106\1\355\1\u0107\1\u0108\5\355\1\u0109"+
    "\1\u010a\3\355\1\u010b\1\u010c\1\u010d\2\355\1\u010e\1\u010f"+
    "\14\355\1\357\17\355\1\u0110\5\355\1\0\5\355\2\0"+
    "\66\355\1\u0111\11\355\1\357\22\355\13\0\1\u0112\224\0"+
    "\1\u0113\71\0\1\u0114\103\0\2\13\6\0\14\13\1\0"+
    "\4\13\1\0\2\13\5\0\34\13\1\0\2\13\1\u0115"+
    "\6\0\1\101\11\0\10\13\5\0\2\13\6\0\14\13"+
    "\1\0\4\13\1\0\2\13\5\0\34\13\1\0\1\u0116"+
    "\2\13\6\0\1\101\11\0\10\13\5\0\2\13\6\0"+
    "\14\13\1\0\4\13\1\0\1\u0117\1\13\5\0\34\13"+
    "\1\0\3\13\6\0\1\101\11\0\10\13\37\0\1\u0118"+
    "\103\0\2\13\6\0\14\13\1\0\4\13\1\0\2\13"+
    "\5\0\34\13\1\0\1\u0119\2\13\6\0\1\101\11\0"+
    "\10\13\5\0\2\13\6\0\14\13\1\0\4\13\1\0"+
    "\2\13\5\0\34\13\1\0\3\13\6\0\1\101\11\0"+
    "\1\u011a\7\13\5\0\2\13\6\0\14\13\1\0\4\13"+
    "\1\0\2\13\5\0\34\13\1\0\2\13\1\u011b\6\0"+
    "\1\101\11\0\10\13\5\0\2\13\6\0\5\13\1\u011c"+
    "\6\13\1\0\4\13\1\0\2\13\5\0\2\13\1\u011d"+
    "\31\13\1\0\3\13\6\0\1\101\11\0\10\13\5\0"+
    "\2\13\6\0\5\13\1\u011e\6\13\1\0\4\13\1\0"+
    "\2\13\5\0\34\13\1\0\3\13\6\0\1\101\11\0"+
    "\10\13\5\0\2\13\6\0\14\13\1\0\4\13\1\0"+
    "\1\u011f\1\13\5\0\34\13\1\0\3\13\6\0\1\101"+
    "\11\0\10\13\33\0\1\u0120\107\0\2\13\6\0\5\13"+
    "\1\u0121\6\13\1\0\4\13\1\0\2\13\5\0\34\13"+
    "\1\0\3\13\6\0\1\101\11\0\10\13\5\0\2\13"+
    "\6\0\1\13\1\u0122\12\13\1\0\4\13\1\0\2\13"+
    "\5\0\34\13\1\0\3\13\6\0\1\101\11\0\10\13"+
    "\5\0\2\13\6\0\14\13\1\0\4\13\1\0\2\13"+
    "\5\0\34\13\1\0\3\13\6\0\1\101\11\0\3\13"+
    "\1\u0123\4\13\1\0\3\355\1\0\5\355\2\0\46\355"+
    "\1\u0124\31\355\1\357\25\355\1\0\5\355\2\0\42\355"+
    "\1\u0125\35\355\1\357\25\355\1\0\5\355\2\0\36\355"+
    "\1\u0126\41\355\1\357\25\355\1\0\5\355\2\0\42\355"+
    "\1\u0127\6\355\1\u0128\12\355\1\u0129\13\355\1\357\25\355"+
    "\1\0\5\355\2\0\55\355\1\u012a\22\355\1\357\25\355"+
    "\1\0\5\355\2\0\36\355\1\u012b\41\355\1\357\25\355"+
    "\1\0\5\355\2\0\42\355\1\u012c\1\355\1\u012d\33\355"+
    "\1\357\25\355\1\0\5\355\2\0\46\355\1\u012e\31\355"+
    "\1\357\25\355\1\0\5\355\2\0\37\355\1\u012f\40\355"+
    "\1\357\25\355\1\0\5\355\2\0\36\355\1\u0130\41\355"+
    "\1\357\25\355\1\0\5\355\2\0\57\355\1\u0131\20\355"+
    "\1\357\25\355\1\0\5\355\2\0\46\355\1\u0132\31\355"+
    "\1\357\25\355\1\0\5\355\2\0\50\355\1\u0133\27\355"+
    "\1\357\25\355\1\0\5\355\2\0\73\355\1\u0134\4\355"+
    "\1\357\22\355\14\u0135\1\u0136\1\u0137\120\u0135\3\u0113\1\0"+
    "\132\u0113\46\0\1\u0138\73\0\2\13\6\0\14\13\1\0"+
    "\4\13\1\0\2\13\5\0\34\13\1\0\1\13\1\u0139"+
    "\1\13\6\0\1\101\11\0\10\13\5\0\2\13\6\0"+
    "\14\13\1\0\4\13\1\0\2\13\5\0\1\13\1\u013a"+
    "\32\13\1\0\3\13\6\0\1\101\11\0\10\13\105\0"+
    "\1\u013b\35\0\2\13\6\0\14\13\1\0\1\13\1\u013c"+
    "\2\13\1\0\2\13\5\0\34\13\1\0\3\13\6\0"+
    "\1\101\11\0\10\13\5\0\2\13\6\0\14\13\1\0"+
    "\4\13\1\0\2\13\5\0\34\13\1\0\3\13\6\0"+
    "\1\101\11\0\1\u013d\7\13\5\0\2\13\6\0\14\13"+
    "\1\0\4\13\1\0\2\13\5\0\34\13\1\0\2\13"+
    "\1\u013e\6\0\1\101\11\0\10\13\21\0\1\u013f\121\0"+
    "\2\13\6\0\14\13\1\0\4\13\1\0\2\13\5\0"+
    "\34\13\1\0\1\u0140\2\13\6\0\1\101\11\0\10\13"+
    "\1\0\3\355\1\0\5\355\2\0\64\355\1\u0141\13\355"+
    "\1\357\25\355\1\0\5\355\2\0\37\355\1\u0142\15\355"+
    "\1\u0143\22\355\1\357\25\355\1\0\5\355\2\0\64\355"+
    "\1\u0144\13\355\1\357\25\355\1\0\5\355\2\0\37\355"+
    "\1\u0145\40\355\1\357\25\355\1\0\5\355\2\0\51\355"+
    "\1\u0146\26\355\1\357\25\355\1\0\5\355\2\0\46\355"+
    "\1\u0147\31\355\1\357\25\355\1\0\5\355\2\0\46\355"+
    "\1\u0148\31\355\1\357\25\355\1\0\5\355\2\0\36\355"+
    "\1\u0149\41\355\1\357\25\355\1\0\5\355\2\0\56\355"+
    "\1\u014a\21\355\1\357\25\355\1\0\5\355\2\0\61\355"+
    "\1\u014b\16\355\1\357\25\355\1\0\5\355\2\0\51\355"+
    "\1\u014c\26\355\1\357\25\355\1\0\5\355\2\0\40\355"+
    "\1\u014d\37\355\1\357\25\355\1\0\5\355\2\0\40\355"+
    "\1\u014e\10\355\1\u014f\26\355\1\357\25\355\1\0\5\355"+
    "\2\0\36\355\1\u0150\41\355\1\357\25\355\1\0\5\355"+
    "\2\0\36\355\1\u0151\41\355\1\357\25\355\1\0\5\355"+
    "\2\0\56\355\1\u0152\21\355\1\357\22\355\15\u0135\1\u0137"+
    "\273\u0135\1\u0137\1\u0153\117\u0135\3\u0138\1\0\132\u0138\4\0"+
    "\2\13\6\0\14\13\1\0\4\13\1\0\1\u0154\1\13"+
    "\5\0\34\13\1\0\3\13\6\0\1\101\11\0\10\13"+
    "\106\0\1\u0155\34\0\2\13\6\0\14\13\1\0\4\13"+
    "\1\0\2\13\5\0\34\13\1\0\1\u0156\2\13\6\0"+
    "\1\101\11\0\10\13\5\0\2\13\6\0\14\13\1\0"+
    "\4\13\1\0\2\13\5\0\34\13\1\0\1\13\1\u0157"+
    "\1\13\6\0\1\101\11\0\10\13\40\0\1\u0158\76\0"+
    "\3\355\1\0\5\355\2\0\56\355\1\u0159\21\355\1\357"+
    "\25\355\1\0\5\355\2\0\36\355\1\u015a\41\355\1\357"+
    "\25\355\1\0\5\355\2\0\46\355\1\u015b\31\355\1\357"+
    "\25\355\1\0\5\355\2\0\50\355\1\u015c\27\355\1\357"+
    "\25\355\1\0\5\355\2\0\56\355\1\u015d\21\355\1\357"+
    "\25\355\1\0\5\355\2\0\51\355\1\u015e\26\355\1\357"+
    "\25\355\1\0\5\355\2\0\56\355\1\u015f\21\355\1\357"+
    "\25\355\1\0\5\355\2\0\46\355\1\u0160\31\355\1\357"+
    "\25\355\1\0\5\355\2\0\64\355\1\u0161\13\355\1\357"+
    "\25\355\1\0\5\355\2\0\44\355\1\u0162\33\355\1\357"+
    "\25\355\1\0\5\355\2\0\46\355\1\u0163\31\355\1\357"+
    "\25\355\1\0\5\355\2\0\57\355\1\u0164\20\355\1\357"+
    "\25\355\1\0\5\355\2\0\42\355\1\u0165\35\355\1\357"+
    "\25\355\1\0\5\355\2\0\57\355\1\u0166\20\355\1\357"+
    "\25\355\1\0\5\355\2\0\46\355\1\u0167\31\355\1\357"+
    "\25\355\1\0\5\355\2\0\36\355\1\u0168\41\355\1\357"+
    "\22\355\15\u0135\1\u0137\1\u0135\1\u0169\116\u0135\4\0\2\13"+
    "\6\0\14\13\1\0\4\13\1\0\2\13\5\0\34\13"+
    "\1\0\1\u016a\2\13\6\0\1\101\11\0\10\13\33\0"+
    "\1\u016b\205\0\1\u016c\33\0\3\355\1\0\5\355\2\0"+
    "\46\355\1\u016d\31\355\1\357\25\355\1\0\5\355\2\0"+
    "\64\355\1\u016e\13\355\1\357\25\355\1\0\5\355\2\0"+
    "\51\355\1\u016f\26\355\1\357\25\355\1\0\5\355\2\0"+
    "\51\355\1\u0170\26\355\1\357\25\355\1\0\5\355\2\0"+
    "\51\355\1\u0171\26\355\1\357\25\355\1\0\5\355\2\0"+
    "\57\355\1\u0172\20\355\1\357\25\355\1\0\5\355\2\0"+
    "\40\355\1\u0173\37\355\1\357\25\355\1\0\5\355\2\0"+
    "\46\355\1\u0174\31\355\1\357\25\355\1\0\5\355\2\0"+
    "\42\355\1\u0175\35\355\1\357\25\355\1\0\5\355\2\0"+
    "\41\355\1\u0176\36\355\1\357\25\355\1\0\5\355\2\0"+
    "\36\355\1\u0177\41\355\1\357\25\355\1\0\5\355\2\0"+
    "\43\355\1\u0178\34\355\1\357\25\355\1\0\5\355\2\0"+
    "\62\355\1\u0179\15\355\1\357\25\355\1\0\5\355\2\0"+
    "\56\355\1\u017a\21\355\1\357\25\355\1\0\5\355\2\0"+
    "\57\355\1\u017b\20\355\1\357\22\355\15\u0135\1\u0137\2\u0135"+
    "\1\u017c\115\u0135\4\0\2\13\6\0\14\13\1\0\4\13"+
    "\1\0\1\13\1\u017d\5\0\34\13\1\0\3\13\6\0"+
    "\1\101\11\0\10\13\21\0\1\u017e\223\0\1\u017f\27\0"+
    "\3\355\1\0\5\355\2\0\51\355\1\u0180\26\355\1\357"+
    "\25\355\1\0\5\355\2\0\50\355\1\u0181\27\355\1\357"+
    "\25\355\1\0\5\355\2\0\44\355\1\u0182\33\355\1\357"+
    "\25\355\1\0\5\355\2\0\52\355\1\u0183\25\355\1\357"+
    "\25\355\1\0\5\355\2\0\46\355\1\u0184\31\355\1\357"+
    "\25\355\1\0\5\355\2\0\50\355\1\u0185\27\355\1\357"+
    "\25\355\1\0\5\355\2\0\50\355\1\u0186\27\355\1\357"+
    "\25\355\1\0\5\355\2\0\56\355\1\u0187\21\355\1\357"+
    "\25\355\1\0\5\355\2\0\46\355\1\u0188\31\355\1\357"+
    "\25\355\1\0\5\355\2\0\46\355\1\u0189\31\355\1\357"+
    "\25\355\1\0\5\355\2\0\50\355\1\u018a\27\355\1\357"+
    "\25\355\1\0\5\355\2\0\50\355\1\u018b\27\355\1\357"+
    "\25\355\1\0\5\355\2\0\36\355\1\u018c\41\355\1\357"+
    "\22\355\15\u0135\1\u0137\3\u0135\1\u018d\114\u0135\37\0\1\u018e"+
    "\76\0\3\355\1\0\5\355\2\0\50\355\1\u018f\27\355"+
    "\1\357\25\355\1\0\5\355\2\0\51\355\1\u0190\26\355"+
    "\1\357\25\355\1\0\5\355\2\0\42\355\1\u0191\35\355"+
    "\1\357\25\355\1\0\5\355\2\0\40\355\1\u0192\37\355"+
    "\1\357\25\355\1\0\5\355\2\0\64\355\1\u0193\13\355"+
    "\1\357\25\355\1\0\5\355\2\0\57\355\1\u0194\20\355"+
    "\1\357\25\355\1\0\5\355\2\0\56\355\1\u0195\21\355"+
    "\1\357\25\355\1\0\5\355\2\0\40\355\1\u0196\37\355"+
    "\1\357\25\355\1\0\5\355\2\0\44\355\1\u0197\33\355"+
    "\1\357\25\355\1\0\5\355\2\0\63\355\1\u0198\14\355"+
    "\1\357\22\355\102\0\1\u0199\33\0\3\355\1\0\5\355"+
    "\2\0\44\355\1\u019a\33\355\1\357\25\355\1\0\5\355"+
    "\2\0\52\355\1\u019b\25\355\1\357\25\355\1\0\5\355"+
    "\2\0\56\355\1\u019c\21\355\1\357\25\355\1\0\5\355"+
    "\2\0\57\355\1\u019d\20\355\1\357\25\355\1\0\5\355"+
    "\2\0\41\355\1\u019e\22\355\1\u019f\13\355\1\357\25\355"+
    "\1\0\5\355\2\0\41\355\1\u01a0\36\355\1\357\25\355"+
    "\1\0\5\355\2\0\46\355\1\u01a1\31\355\1\357\25\355"+
    "\1\0\5\355\2\0\46\355\1\u01a2\31\355\1\357\22\355"+
    "\106\0\1\u01a3\27\0\3\355\1\0\5\355\2\0\46\355"+
    "\1\u01a4\31\355\1\357\25\355\1\0\5\355\2\0\57\355"+
    "\1\u01a5\20\355\1\357\25\355\1\0\5\355\2\0\41\355"+
    "\1\u01a6\36\355\1\357\25\355\1\0\5\355\2\0\50\355"+
    "\1\u01a7\6\355\1\u01a8\20\355\1\357\25\355\1\0\5\355"+
    "\2\0\46\355\1\u01a9\31\355\1\357\25\355\1\0\5\355"+
    "\2\0\36\355\1\u01aa\41\355\1\357\25\355\1\0\5\355"+
    "\2\0\20\355\1\u01ab\57\355\1\357\25\355\1\0\5\355"+
    "\2\0\20\355\1\u01ac\57\355\1\357\25\355\1\0\5\355"+
    "\2\0\41\355\1\u01ad\36\355\1\357\25\355\1\0\5\355"+
    "\2\0\46\355\1\u01ae\31\355\1\357\25\355\1\0\5\355"+
    "\2\0\53\355\1\u01af\24\355\1\357\25\355\1\0\5\355"+
    "\2\0\36\355\1\u01b0\41\355\1\357\25\355\1\0\5\355"+
    "\2\0\14\355\1\u01b1\63\355\1\357\25\355\1\0\5\355"+
    "\2\0\44\355\1\u01b2\33\355\1\357\25\355\1\0\5\355"+
    "\2\0\46\355\1\u01b3\31\355\1\357\25\355\1\0\5\355"+
    "\2\0\14\355\1\u01b4\63\355\1\357\25\355\1\0\5\355"+
    "\2\0\40\355\1\u01b5\37\355\1\357\25\355\1\0\5\355"+
    "\2\0\63\355\1\u01b6\14\355\1\357\25\355\1\0\5\355"+
    "\2\0\41\355\1\u01b7\36\355\1\357\25\355\1\0\5\355"+
    "\2\0\57\355\1\u01b8\20\355\1\357\25\355\1\0\5\355"+
    "\2\0\46\355\1\u01b9\31\355\1\357\25\355\1\0\5\355"+
    "\2\0\51\355\1\u01ba\26\355\1\357\25\355\1\0\5\355"+
    "\2\0\36\355\1\u01bb\41\355\1\357\25\355\1\0\5\355"+
    "\2\0\50\355\1\u01bc\27\355\1\357\25\355\1\0\5\355"+
    "\2\0\40\355\1\u01bd\37\355\1\357\25\355\1\0\5\355"+
    "\2\0\40\355\1\u01be\37\355\1\357\25\355\1\0\5\355"+
    "\2\0\57\355\1\u01bf\20\355\1\357\25\355\1\0\5\355"+
    "\2\0\50\355\1\u01c0\27\355\1\357\25\355\1\0\5\355"+
    "\2\0\36\355\1\u01c1\41\355\1\357\25\355\1\0\5\355"+
    "\2\0\56\355\1\u01c2\21\355\1\357\25\355\1\0\5\355"+
    "\2\0\46\355\1\u01c3\31\355\1\357\22\355";

  private static int [] zzUnpackTrans() {
    int [] result = new int[34122];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\1\1\11\1\1\1\11\1\1\1\11\22\1"+
    "\1\11\10\1\1\11\2\1\1\11\2\1\1\11\1\1"+
    "\1\11\13\1\1\11\5\1\1\0\1\11\1\0\5\1"+
    "\1\0\2\1\1\11\2\1\1\0\1\11\1\0\1\1"+
    "\1\11\6\1\1\0\10\1\1\11\2\0\1\1\3\0"+
    "\3\11\1\1\1\0\1\1\1\0\1\11\14\1\2\11"+
    "\1\0\1\1\1\11\17\0\10\1\1\11\17\0\1\11"+
    "\6\1\1\0\5\1\1\0\4\11\1\0\1\11\1\1"+
    "\1\11\2\0\5\1\13\0\5\1\15\0\6\1\1\0"+
    "\5\1\6\0\5\1\1\0\7\1\1\0\3\1\17\0"+
    "\1\1\1\0\3\1\1\0\7\1\1\0\3\1\20\0"+
    "\1\1\3\0\3\1\1\0\3\1\1\0\1\1\5\0"+
    "\1\1\2\0\1\1\12\0\1\1\1\0\2\1\10\0"+
    "\1\1\11\0\1\1\11\0\1\1\1\0\1\1\6\0"+
    "\1\1\1\0\1\11\3\0\2\1\3\0\1\1\4\0"+
    "\1\1\10\0\1\1\1\0\1\1\2\0\1\1\2\0"+
    "\1\1\4\0\1\11\5\0\1\1\1\0\2\1\1\0"+
    "\1\1\3\0\2\1\2\0\1\1\2\0\1\1\10\0"+
    "\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[451];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char[] zzBuffer = new char[0];

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    private int commentStart;
    private int commentDepth;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _HaskellLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _HaskellLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3364) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer.toString().toCharArray();
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return TokenPackage.getBLOCK_COMMENT();
          }
        case 117: break;
        case 2: 
          { return TokenType.BAD_CHARACTER;
          }
        case 118: break;
        case 3: 
          { return TokenType.WHITE_SPACE;
          }
        case 119: break;
        case 4: 
          { return TokenPackage.getNEW_LINE();
          }
        case 120: break;
        case 5: 
          { return HaskellLexerTokens.INTEGER;
          }
        case 121: break;
        case 6: 
          { return HaskellLexerTokens.BACKQUOTE;
          }
        case 122: break;
        case 7: 
          { return HaskellLexerTokens.VARSYM;
          }
        case 123: break;
        case 8: 
          { return HaskellLexerTokens.VARID;
          }
        case 124: break;
        case 9: 
          { return HaskellLexerTokens.CONID;
          }
        case 125: break;
        case 10: 
          { return HaskellLexerTokens.UNDERSCORE;
          }
        case 126: break;
        case 11: 
          { return HaskellLexerTokens.COLON;
          }
        case 127: break;
        case 12: 
          { return HaskellLexerTokens.SIMPLEQUOTE;
          }
        case 128: break;
        case 13: 
          { return HaskellLexerTokens.STAR;
          }
        case 129: break;
        case 14: 
          { return HaskellLexerTokens.LAM;
          }
        case 130: break;
        case 15: 
          { return HaskellLexerTokens.CBRACK;
          }
        case 131: break;
        case 16: 
          { return HaskellLexerTokens.AT;
          }
        case 132: break;
        case 17: 
          { return HaskellLexerTokens.MINUS;
          }
        case 133: break;
        case 18: 
          { return HaskellLexerTokens.OCURLY;
          }
        case 134: break;
        case 19: 
          { return HaskellLexerTokens.CCURLY;
          }
        case 135: break;
        case 20: 
          { return HaskellLexerTokens.OBRACK;
          }
        case 136: break;
        case 21: 
          { return HaskellLexerTokens.OPAREN;
          }
        case 137: break;
        case 22: 
          { return HaskellLexerTokens.CPAREN;
          }
        case 138: break;
        case 23: 
          { return HaskellLexerTokens.VBAR;
          }
        case 139: break;
        case 24: 
          { return HaskellLexerTokens.SEMI;
          }
        case 140: break;
        case 25: 
          { return HaskellLexerTokens.DOT;
          }
        case 141: break;
        case 26: 
          { return HaskellLexerTokens.COMMA;
          }
        case 142: break;
        case 27: 
          { return HaskellLexerTokens.EQUAL;
          }
        case 143: break;
        case 28: 
          { return HaskellLexerTokens.RARROW;
          }
        case 144: break;
        case 29: 
          { return HaskellLexerTokens.TILDE;
          }
        case 145: break;
        case 30: 
          { return HaskellLexerTokens.BANG;
          }
        case 146: break;
        case 31: 
          { 
          }
        case 147: break;
        case 32: 
          { return HaskellLexerTokens.STRING;
          }
        case 148: break;
        case 33: 
          { return HaskellLexerTokens.OF;
          }
        case 149: break;
        case 34: 
          { return HaskellLexerTokens.DCOLON;
          }
        case 150: break;
        case 35: 
          { return HaskellLexerTokens.CPABRACK;
          }
        case 151: break;
        case 36: 
          { return HaskellLexerTokens.TYQUOTE;
          }
        case 152: break;
        case 37: 
          { return HaskellLexerTokens.PARENESCAPE;
          }
        case 153: break;
        case 38: 
          { return HaskellLexerTokens.IF;
          }
        case 154: break;
        case 39: 
          { return HaskellLexerTokens.IN;
          }
        case 155: break;
        case 40: 
          { return HaskellLexerTokens.DO;
          }
        case 156: break;
        case 41: 
          { return HaskellLexerTokens.AS;
          }
        case 157: break;
        case 42: 
          { return TokenPackage.getEND_OF_LINE_COMMENT();
          }
        case 158: break;
        case 43: 
          { yybegin(BLOCK_COMMENT);
    commentDepth = 0;
    commentStart = getTokenStart();
          }
        case 159: break;
        case 44: 
          { return HaskellLexerTokens.OPABRACK;
          }
        case 160: break;
        case 45: 
          { return HaskellLexerTokens.OPENEXPQUOTE;
          }
        case 161: break;
        case 46: 
          { return HaskellLexerTokens.OUBXPAREN;
          }
        case 162: break;
        case 47: 
          { return HaskellLexerTokens.CLOSEQUOTE;
          }
        case 163: break;
        case 48: 
          { return HaskellLexerTokens.CPARENBAR;
          }
        case 164: break;
        case 49: 
          { return HaskellLexerTokens.CUBXPAREN;
          }
        case 165: break;
        case 50: 
          { return HaskellLexerTokens.DOTDOT;
          }
        case 166: break;
        case 51: 
          { return HaskellLexerTokens.DARROW;
          }
        case 167: break;
        case 52: 
          { return HaskellLexerTokens.LARROW;
          }
        case 168: break;
        case 53: 
          { return HaskellLexerTokens.DUPIPVARID;
          }
        case 169: break;
        case 54: 
          { if (commentDepth > 0) {
            commentDepth--;
        }
        else {
             int state = yystate();
             yybegin(YYINITIAL);
             zzStartRead = commentStart;
             return TokenPackage.getBLOCK_COMMENT();
        }
          }
        case 170: break;
        case 55: 
          { commentDepth++;
          }
        case 171: break;
        case 56: 
          { return HaskellLexerTokens.LET;
          }
        case 172: break;
        case 57: 
          { return HaskellLexerTokens.QVARID;
          }
        case 173: break;
        case 58: 
          { return HaskellLexerTokens.QCONID;
          }
        case 174: break;
        case 59: 
          { return HaskellLexerTokens.CHAR;
          }
        case 175: break;
        case 60: 
          { return HaskellLexerTokens.PARENTYESCAPE;
          }
        case 176: break;
        case 61: 
          { return HaskellLexerTokens.OPENDECQUOTE;
          }
        case 177: break;
        case 62: 
          { return HaskellLexerTokens.OPENTEXPQUOTE;
          }
        case 178: break;
        case 63: 
          { return HaskellLexerTokens.OPENTYPQUOTE;
          }
        case 179: break;
        case 64: 
          { return HaskellLexerTokens.OPENPATQUOTE;
          }
        case 180: break;
        case 65: 
          { return HaskellLexerTokens.CLOSETEXPQUOTE;
          }
        case 181: break;
        case 66: 
          { return CPPTokens.IF;
          }
        case 182: break;
        case 67: 
          { return HaskellLexerTokens.CLOSE_PRAG;
          }
        case 183: break;
        case 68: 
          { return HaskellLexerTokens.CASE;
          }
        case 184: break;
        case 69: 
          { return HaskellLexerTokens.DATA;
          }
        case 185: break;
        case 70: 
          { return HaskellLexerTokens.ROLE;
          }
        case 186: break;
        case 71: 
          { return HaskellLexerTokens.ELSE;
          }
        case 187: break;
        case 72: 
          { return HaskellLexerTokens.TYPE;
          }
        case 188: break;
        case 73: 
          { return HaskellLexerTokens.THEN;
          }
        case 189: break;
        case 74: 
          { return HaskellLexerTokens.CLASS;
          }
        case 190: break;
        case 75: 
          { return HaskellLexerTokens.INFIX;
          }
        case 191: break;
        case 76: 
          { return CPPTokens.ELSE;
          }
        case 192: break;
        case 77: 
          { return HaskellLexerTokens.WHERE;
          }
        case 193: break;
        case 78: 
          { return HaskellLexerTokens.MODULE;
          }
        case 194: break;
        case 79: 
          { return HaskellLexerTokens.IMPORT;
          }
        case 195: break;
        case 80: 
          { return HaskellLexerTokens.INFIXL;
          }
        case 196: break;
        case 81: 
          { return HaskellLexerTokens.INFIXR;
          }
        case 197: break;
        case 82: 
          { return HaskellLexerTokens.FORALL;
          }
        case 198: break;
        case 83: 
          { return HaskellLexerTokens.FAMILY;
          }
        case 199: break;
        case 84: 
          { return TokenPackage.getPRAGMA();
          }
        case 200: break;
        case 85: 
          { return CPPTokens.ENDIF;
          }
        case 201: break;
        case 86: 
          { return HaskellLexerTokens.HIDING;
          }
        case 202: break;
        case 87: 
          { return HaskellLexerTokens.DEFAULT;
          }
        case 203: break;
        case 88: 
          { return HaskellLexerTokens.NEWTYPE;
          }
        case 204: break;
        case 89: 
          { return HaskellLexerTokens.SCC_PRAG;
          }
        case 205: break;
        case 90: 
          { return HaskellLexerTokens.ANN_PRAG;
          }
        case 206: break;
        case 91: 
          { return HaskellLexerTokens.INSTANCE;
          }
        case 207: break;
        case 92: 
          { return HaskellLexerTokens.DERIVING;
          }
        case 208: break;
        case 93: 
          { return HaskellLexerTokens.CORE_PRAG;
          }
        case 209: break;
        case 94: 
          { return HaskellLexerTokens.CTYPE;
          }
        case 210: break;
        case 95: 
          { return HaskellLexerTokens.RULES_PRAG;
          }
        case 211: break;
        case 96: 
          { return HaskellLexerTokens.QUALIFIED;
          }
        case 212: break;
        case 97: 
          { yybegin(TEX); return TokenPackage.getBLOCK_COMMENT();
          }
        case 213: break;
        case 98: 
          { return HaskellLexerTokens.UNPACK_PRAG;
          }
        case 214: break;
        case 99: 
          { return HaskellLexerTokens.SOURCE_PRAG;
          }
        case 215: break;
        case 100: 
          { return HaskellLexerTokens.INLINE_PRAG;
          }
        case 216: break;
        case 101: 
          { yypushback(1);
                        return HaskellLexerTokens.OPARENBAR;
          }
        case 217: break;
        case 102: 
          { return HaskellLexerTokens.MINIMAL_PRAG;
          }
        case 218: break;
        case 103: 
          { return HaskellLexerTokens.WARNING_PRAG;
          }
        case 219: break;
        case 104: 
          { return HaskellLexerTokens.NOUNPACK_PRAG;
          }
        case 220: break;
        case 105: 
          { return HaskellLexerTokens.OVERLAPS;
          }
        case 221: break;
        case 106: 
          { yybegin(YYINITIAL); return TokenPackage.getBLOCK_COMMENT();
          }
        case 222: break;
        case 107: 
          { return HaskellLexerTokens.VECT_PRAG;
          }
        case 223: break;
        case 108: 
          { return HaskellLexerTokens.GENERATED_PRAG;
          }
        case 224: break;
        case 109: 
          { return HaskellLexerTokens.DEPRECATED_PRAG;
          }
        case 225: break;
        case 110: 
          { return HaskellLexerTokens.SPEC_PRAG;
          }
        case 226: break;
        case 111: 
          { return HaskellLexerTokens.INCOHERENT;
          }
        case 227: break;
        case 112: 
          { return HaskellLexerTokens.NOVECT_PRAG;
          }
        case 228: break;
        case 113: 
          { return HaskellLexerTokens.OVERLAPPING;
          }
        case 229: break;
        case 114: 
          { return HaskellLexerTokens.OVERLAPPABLE;
          }
        case 230: break;
        case 115: 
          { return HaskellLexerTokens.VECT_SCALAR_PRAG;
          }
        case 231: break;
        case 116: 
          { return HaskellLexerTokens.SPEC_INLINE_PRAG;
          }
        case 232: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case BLOCK_COMMENT: {
              int state = yystate();
        yybegin(YYINITIAL);
        zzStartRead = commentStart;
        return TokenPackage.getBLOCK_COMMENT();
            }
            case 452: break;
            default:
            return null;
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
