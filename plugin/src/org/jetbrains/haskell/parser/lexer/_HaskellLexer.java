/* The following code was generated by JFlex 1.5.1 */

package org.jetbrains.haskell.parser.lexer;

import java.util.*;
import com.intellij.lexer.*;
import com.intellij.psi.*;
import org.jetbrains.haskell.parser.token.*;
import com.intellij.psi.tree.IElementType;
import org.jetbrains.haskell.parser.cpp.CPPTokens;
import org.jetbrains.grammar.HaskellLexerTokens;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.1
 * from the specification file <tt>/Users/atsky/work/haskell-idea-plugin/plugin/src/org/jetbrains/haskell/parser/lexer/Haskell.flex</tt>
 */
class _HaskellLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int BLOCK_COMMENT = 2;
  public static final int TEX = 4;
  public static final int LAMBDA = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\3\0\1\5\1\0\1\1\3\0\1\1\1\3\1\12\1\11\1\11"+
    "\22\0\1\2\1\124\1\10\1\113\1\35\1\7\1\13\1\34\1\110"+
    "\1\111\1\40\1\7\1\116\1\101\1\115\1\7\1\134\1\73\1\73"+
    "\1\73\1\73\3\31\2\4\1\30\1\114\1\120\1\117\1\121\1\135"+
    "\1\43\1\63\1\66\1\64\1\33\1\61\1\67\1\76\1\56\1\72"+
    "\1\26\1\65\1\53\1\75\1\51\1\55\1\77\1\62\1\71\1\54"+
    "\1\57\1\52\1\70\1\133\1\60\1\74\1\26\1\107\1\41\1\42"+
    "\1\44\1\27\1\6\1\50\1\17\1\32\1\37\1\102\1\46\1\103"+
    "\1\127\1\36\2\24\1\21\1\16\1\104\1\20\1\130\1\132\1\47"+
    "\1\14\1\125\1\126\1\45\1\131\1\100\1\15\1\24\1\105\1\112"+
    "\1\106\1\123\6\0\1\12\33\0\11\7\1\24\2\7\1\0\4\7"+
    "\2\0\1\7\1\24\3\7\1\0\1\24\1\7\3\0\1\7\27\22"+
    "\1\7\7\22\30\24\1\7\10\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\2\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\2\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\2\22\1\24\1\22\1\24\1\22\3\24\2\22"+
    "\1\24\1\22\1\24\2\22\1\24\3\22\2\24\4\22\1\24\2\22"+
    "\1\24\3\22\3\24\2\22\1\24\2\22\1\24\1\22\1\24\1\22"+
    "\1\24\2\22\1\24\1\22\2\24\1\22\1\24\2\22\1\24\3\22"+
    "\1\24\1\22\1\24\2\22\2\24\1\0\1\22\3\24\4\0\1\22"+
    "\1\0\1\24\1\22\1\0\1\24\1\22\1\0\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\2\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\2\24\1\22\1\0\1\24\1\22\1\24\3\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\7\24\2\22\1\24\2\22"+
    "\2\24\1\22\1\24\4\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\105\24\1\0\44\24\7\0\2\24\4\7\14\0\16\7"+
    "\5\24\7\7\1\0\1\7\1\0\21\7\105\0\1\24\52\0\1\22"+
    "\1\24\1\22\1\24\1\0\1\7\1\22\1\24\2\0\4\24\1\7"+
    "\5\0\2\7\1\22\1\7\3\22\1\0\1\22\1\0\2\22\1\24"+
    "\21\22\1\0\11\22\43\24\1\22\2\24\3\22\3\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\5\24\1\22\1\24\1\7\1\22\1\24\2\22\2\24\63\22"+
    "\60\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\7\7\0\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\2\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\2\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\11\0\46\22\3\0\6\7\1\0\47\24\1\0"+
    "\2\7\4\0\1\7\56\0\1\7\1\0\1\7\2\0\1\7\2\0"+
    "\1\7\54\0\2\7\21\0\12\7\13\0\1\7\2\0\2\7\112\0"+
    "\4\7\146\0\1\7\11\0\1\7\12\0\1\7\23\0\2\7\1\0"+
    "\16\7\350\0\4\7\66\0\17\7\37\0\1\7\u0105\0\2\7\12\0"+
    "\1\7\201\0\2\7\6\0\2\7\364\0\2\7\176\0\1\7\202\0"+
    "\10\7\204\0\1\7\371\0\1\7\172\0\1\7\112\0\1\7\17\0"+
    "\1\7\12\0\2\7\245\0\27\7\2\0\6\7\24\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\107\0\1\7\70\0\10\7\1\0"+
    "\6\7\1\0\15\7\157\0\6\7\116\0\2\7\46\22\1\0\1\22"+
    "\5\0\1\22\55\0\1\7\u0264\0\11\7\47\0\12\7\146\0\1\7"+
    "\u026c\0\2\7\54\0\2\7\116\0\3\7\107\0\2\7\235\0\3\7"+
    "\1\0\4\7\44\0\13\7\u0135\0\1\7\3\0\2\7\230\0\42\7"+
    "\36\0\2\7\200\0\7\7\1\0\6\7\254\0\21\7\11\0\11\7"+
    "\177\0\4\7\73\0\5\7\76\0\2\7\100\0\10\7\13\0\1\7"+
    "\54\0\300\24\100\0\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\11\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\11\24\10\22\6\24\2\0\6\22\2\0\10\24\10\22\10\24\10\22"+
    "\6\24\2\0\6\22\2\0\10\24\1\0\1\22\1\0\1\22\1\0"+
    "\1\22\1\0\1\22\10\24\10\22\16\24\2\0\10\24\10\0\10\24"+
    "\10\0\10\24\10\0\5\24\1\0\2\24\4\22\1\0\1\7\1\24"+
    "\3\7\3\24\1\0\2\24\4\22\1\0\3\7\4\24\2\0\2\24"+
    "\4\22\1\0\3\7\10\24\5\22\3\7\2\0\3\24\1\0\2\24"+
    "\4\22\1\0\2\7\21\0\30\7\1\12\1\12\6\0\57\7\22\0"+
    "\1\24\10\0\5\7\1\24\12\0\5\7\1\0\15\24\3\0\33\7"+
    "\105\0\2\7\1\22\4\7\1\22\2\7\1\24\3\22\2\24\3\22"+
    "\1\24\1\7\1\22\3\7\5\22\6\7\1\22\1\7\1\22\1\7"+
    "\1\22\1\7\4\22\1\7\1\24\4\22\1\24\4\0\1\24\2\7"+
    "\2\24\2\22\5\7\1\22\4\24\4\7\1\24\1\7\20\0\20\22"+
    "\20\24\3\0\1\22\1\24\13\0\2\7\1\122\155\7\1\7\u01f3\7"+
    "\14\0\47\7\31\0\13\7\121\0\32\7\32\23\32\25\26\0\u0200\7"+
    "\1\0\165\7\36\0\u03b9\7\3\0\12\7\246\0\57\22\1\0\57\24"+
    "\1\0\1\22\1\24\3\22\2\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\4\22\1\24\1\22\2\24\1\22\10\24\3\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\2\24\6\7\1\22\1\24"+
    "\1\22\1\24\3\0\1\22\1\24\5\0\4\7\1\0\2\7\46\24"+
    "\1\0\1\24\5\0\1\24\102\0\1\7\217\0\57\7\1\0\14\7"+
    "\104\0\32\7\1\0\131\7\14\0\326\7\32\0\14\7\5\0\4\7"+
    "\3\0\31\7\17\0\1\7\5\0\2\7\5\0\3\7\133\0\2\7"+
    "\3\0\1\7\132\0\1\7\224\0\2\7\4\0\12\7\40\0\44\7"+
    "\34\0\37\7\13\0\36\7\10\0\1\7\17\0\40\7\12\0\47\7"+
    "\17\0\77\7\1\0\u0100\7\u19c0\0\100\7\u5690\0\67\7\67\0\2\7"+
    "\u010d\0\3\7\60\0\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\5\0"+
    "\1\7\12\0\1\7\1\0\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\132\0\6\7"+
    "\10\0\27\7\11\0\2\7\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\3\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\12\24"+
    "\1\22\1\24\1\22\1\24\2\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\0\2\7\1\22\1\24\1\22\1\24"+
    "\1\0\1\22\1\24\1\22\1\24\14\0\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\115\0\3\24\55\0"+
    "\4\7\12\0\4\7\72\0\4\7\126\0\2\7\50\0\3\7\63\0"+
    "\2\7\57\0\1\7\141\0\15\7\20\0\2\7\174\0\4\7\27\0"+
    "\3\7\144\0\2\7\20\0\2\7\371\0\1\7\u4f14\0\7\24\14\0"+
    "\5\24\21\0\1\7\210\0\20\7\u017c\0\2\7\274\0\2\7\22\0"+
    "\12\7\26\0\43\7\1\0\23\7\1\0\4\7\225\0\17\7\12\0"+
    "\7\7\32\22\6\7\32\24\13\7\172\0\7\7\1\0\7\7\15\0"+
    "\2\7\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\2\4\10\1\11\2\7\1\12\1\13\1\10"+
    "\1\14\1\7\2\10\1\15\1\16\1\17\1\20\3\10"+
    "\1\21\2\10\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\7\1\30\1\31\1\32\1\33\1\7\1\34\1\35"+
    "\1\36\4\10\1\5\1\7\3\37\2\1\2\40\1\5"+
    "\1\0\1\41\1\0\2\10\1\42\1\10\1\11\1\0"+
    "\1\7\1\43\1\44\1\45\2\10\1\0\1\46\1\0"+
    "\1\7\1\47\1\10\1\50\1\51\1\52\2\10\1\0"+
    "\3\10\1\53\1\54\2\10\1\55\1\56\2\0\1\57"+
    "\3\0\1\60\1\61\1\62\1\7\1\0\1\7\1\0"+
    "\1\63\1\64\1\65\1\66\5\10\2\5\1\67\1\7"+
    "\1\70\1\71\1\0\1\1\1\0\1\5\17\0\1\10"+
    "\1\72\1\73\1\74\2\7\2\10\1\75\17\0\1\76"+
    "\6\10\1\0\5\10\1\0\1\77\1\100\1\101\1\102"+
    "\1\0\1\103\1\104\1\105\2\0\5\10\14\0\1\10"+
    "\1\73\1\74\1\10\1\106\15\0\3\10\1\107\2\10"+
    "\1\0\2\10\1\110\1\111\1\10\6\0\1\112\1\113"+
    "\3\10\1\0\1\114\1\10\1\115\2\10\1\116\2\10"+
    "\1\0\3\10\17\0\1\117\1\0\1\10\1\120\1\10"+
    "\1\0\1\121\1\122\1\10\1\123\1\124\2\10\1\0"+
    "\1\125\1\126\1\10\20\0\1\127\3\0\1\130\1\131"+
    "\1\10\1\0\1\10\1\132\1\10\1\0\1\133\5\0"+
    "\1\134\2\0\1\135\12\0\1\10\1\0\1\136\1\137"+
    "\10\0\1\140\11\0\1\10\11\0\1\141\1\0\1\142"+
    "\6\0\1\143\1\0\1\144\3\0\1\145\1\146\3\0"+
    "\1\147\4\0\1\150\10\0\1\151\1\0\1\152\2\0"+
    "\1\153\2\0\1\154\4\0\1\155\5\0\1\156\1\0"+
    "\1\157\1\160\1\0\1\161\3\0\1\162\1\163\2\0"+
    "\1\164\2\0\1\165\10\0\1\166\1\167";

  private static int [] zzUnpackAction() {
    int [] result = new int[458];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\136\0\274\0\u011a\0\u0178\0\u01d6\0\u0178\0\u0234"+
    "\0\u0178\0\u0292\0\u02f0\0\u034e\0\u03ac\0\u040a\0\u0468\0\u04c6"+
    "\0\u0524\0\u0582\0\u034e\0\u05e0\0\u063e\0\u069c\0\u06fa\0\u0758"+
    "\0\u07b6\0\u0292\0\u0814\0\u0178\0\u0292\0\u0872\0\u08d0\0\u092e"+
    "\0\u098c\0\u09ea\0\u0a48\0\u0aa6\0\u0178\0\u0b04\0\u0b62\0\u0178"+
    "\0\u0bc0\0\u0c1e\0\u0178\0\u0c7c\0\u0178\0\u0cda\0\u0d38\0\u0292"+
    "\0\u0292\0\u0292\0\u0d96\0\u0df4\0\u0e52\0\u0eb0\0\u0f0e\0\u0f6c"+
    "\0\u0178\0\u0fca\0\u1028\0\u1086\0\u10e4\0\u0178\0\u1142\0\u11a0"+
    "\0\u02f0\0\u0178\0\u11fe\0\u125c\0\u12ba\0\u034e\0\u1318\0\u1376"+
    "\0\u13d4\0\u1432\0\u1490\0\u1490\0\u0178\0\u14ee\0\u154c\0\u15aa"+
    "\0\u0178\0\u1608\0\u1666\0\u0178\0\u16c4\0\u034e\0\u1722\0\u034e"+
    "\0\u1780\0\u17de\0\u183c\0\u189a\0\u18f8\0\u1956\0\u034e\0\u19b4"+
    "\0\u1a12\0\u1a70\0\u1ace\0\u0178\0\u1b2c\0\u1b8a\0\u1be8\0\u1c46"+
    "\0\u1ca4\0\u1d02\0\u0178\0\u0178\0\u0178\0\u1d60\0\u1dbe\0\u1e1c"+
    "\0\u1e7a\0\u0178\0\u0292\0\u0292\0\u0292\0\u1ed8\0\u1f36\0\u1f94"+
    "\0\u1ff2\0\u2050\0\u20ae\0\u210c\0\u216a\0\u21c8\0\u0178\0\u0178"+
    "\0\u2226\0\u2284\0\u22e2\0\u0178\0\u2340\0\u239e\0\u23fc\0\u245a"+
    "\0\u24b8\0\u2516\0\u2574\0\u25d2\0\u2630\0\u268e\0\u26ec\0\u274a"+
    "\0\u27a8\0\u2806\0\u2864\0\u28c2\0\u034e\0\u2920\0\u297e\0\u29dc"+
    "\0\u2a3a\0\u2a98\0\u2af6\0\u0178\0\u2b54\0\u2bb2\0\u2c10\0\u2c6e"+
    "\0\u2ccc\0\u2d2a\0\u2d88\0\u2de6\0\u2e44\0\u2ea2\0\u2f00\0\u2f5e"+
    "\0\u2fbc\0\u301a\0\u3078\0\u0178\0\u30d6\0\u3134\0\u3192\0\u31f0"+
    "\0\u324e\0\u32ac\0\u330a\0\u3368\0\u33c6\0\u3424\0\u3482\0\u34e0"+
    "\0\u353e\0\u0178\0\u0178\0\u0178\0\u0178\0\u359c\0\u0178\0\u35fa"+
    "\0\u0178\0\u3658\0\u36b6\0\u3714\0\u3772\0\u37d0\0\u382e\0\u388c"+
    "\0\u38ea\0\u3948\0\u39a6\0\u3a04\0\u3a62\0\u3ac0\0\u3b1e\0\u3b7c"+
    "\0\u3bda\0\u3c38\0\u3c96\0\u3cf4\0\u3d52\0\u3db0\0\u3e0e\0\u3e6c"+
    "\0\u034e\0\u3eca\0\u3f28\0\u3f86\0\u3fe4\0\u4042\0\u40a0\0\u40fe"+
    "\0\u415c\0\u41ba\0\u4218\0\u4276\0\u42d4\0\u4332\0\u4390\0\u43ee"+
    "\0\u444c\0\u034e\0\u44aa\0\u4508\0\u4566\0\u45c4\0\u4622\0\u034e"+
    "\0\u034e\0\u4680\0\u46de\0\u473c\0\u479a\0\u47f8\0\u4856\0\u48b4"+
    "\0\u034e\0\u034e\0\u4912\0\u4970\0\u49ce\0\u4a2c\0\u0178\0\u4a8a"+
    "\0\u034e\0\u4ae8\0\u4b46\0\u4ba4\0\u4c02\0\u4c60\0\u4cbe\0\u4d1c"+
    "\0\u4d7a\0\u4dd8\0\u4e36\0\u4e94\0\u4ef2\0\u4f50\0\u4fae\0\u500c"+
    "\0\u506a\0\u50c8\0\u5126\0\u5184\0\u51e2\0\u5240\0\u529e\0\u52fc"+
    "\0\u535a\0\u53b8\0\u5416\0\u5474\0\u034e\0\u54d2\0\u5530\0\u034e"+
    "\0\u034e\0\u558e\0\u034e\0\u034e\0\u55ec\0\u564a\0\u56a8\0\u034e"+
    "\0\u034e\0\u5706\0\u5764\0\u57c2\0\u5820\0\u587e\0\u58dc\0\u593a"+
    "\0\u5998\0\u59f6\0\u5a54\0\u5ab2\0\u5b10\0\u5b6e\0\u5bcc\0\u5c2a"+
    "\0\u5c88\0\u5ce6\0\u46de\0\u5d44\0\u5da2\0\u5e00\0\u5e5e\0\u034e"+
    "\0\u5ebc\0\u5f1a\0\u5f78\0\u034e\0\u5fd6\0\u6034\0\u034e\0\u6092"+
    "\0\u60f0\0\u614e\0\u61ac\0\u620a\0\u46de\0\u6268\0\u62c6\0\u46de"+
    "\0\u6324\0\u6382\0\u63e0\0\u643e\0\u649c\0\u64fa\0\u6558\0\u65b6"+
    "\0\u6614\0\u6672\0\u66d0\0\u672e\0\u034e\0\u034e\0\u678c\0\u67ea"+
    "\0\u6848\0\u68a6\0\u6904\0\u6962\0\u69c0\0\u6a1e\0\u46de\0\u6a7c"+
    "\0\u6ada\0\u6b38\0\u6b96\0\u6bf4\0\u6c52\0\u6cb0\0\u6d0e\0\u6d6c"+
    "\0\u6dca\0\u6e28\0\u6e86\0\u6ee4\0\u6f42\0\u6fa0\0\u6ffe\0\u705c"+
    "\0\u70ba\0\u7118\0\u46de\0\u7176\0\u46de\0\u71d4\0\u7232\0\u7290"+
    "\0\u72ee\0\u734c\0\u73aa\0\u034e\0\u7408\0\u0178\0\u7466\0\u74c4"+
    "\0\u7522\0\u46de\0\u46de\0\u7580\0\u75de\0\u763c\0\u46de\0\u769a"+
    "\0\u76f8\0\u7756\0\u77b4\0\u5d44\0\u7812\0\u7870\0\u78ce\0\u792c"+
    "\0\u798a\0\u79e8\0\u7a46\0\u7aa4\0\u46de\0\u7b02\0\u46de\0\u7b60"+
    "\0\u7bbe\0\u46de\0\u7c1c\0\u7c7a\0\u46de\0\u7cd8\0\u7d36\0\u7d94"+
    "\0\u7df2\0\u0178\0\u7e50\0\u7eae\0\u7f0c\0\u7f6a\0\u7fc8\0\u8026"+
    "\0\u8084\0\u46de\0\u46de\0\u80e2\0\u8140\0\u819e\0\u81fc\0\u825a"+
    "\0\u46de\0\u46de\0\u82b8\0\u8316\0\u46de\0\u8374\0\u83d2\0\u46de"+
    "\0\u8430\0\u848e\0\u84ec\0\u854a\0\u85a8\0\u8606\0\u8664\0\u86c2"+
    "\0\u46de\0\u46de";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[458];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\1\7\2\10\1\11\1\12\1\13\1\6"+
    "\1\0\1\12\2\14\1\15\1\14\1\16\1\17\1\20"+
    "\1\21\1\14\1\22\1\20\1\23\1\24\1\10\1\25"+
    "\1\20\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\12\1\14\1\36\1\37\1\40\22\20\1\10"+
    "\4\20\1\14\1\41\1\42\1\14\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\12\1\60\1\61\1\62\1\63\1\14"+
    "\1\64\1\14\1\65\1\66\1\20\1\67\1\70\12\71"+
    "\1\0\66\71\1\72\3\71\1\73\30\71\41\74\1\75"+
    "\74\74\12\76\1\0\17\76\1\77\103\76\137\0\2\6"+
    "\6\0\1\6\130\0\2\10\23\0\1\10\41\0\1\10"+
    "\17\0\1\100\20\0\1\10\10\0\1\12\3\0\1\12"+
    "\7\0\1\12\1\0\1\12\2\0\1\12\4\0\1\12"+
    "\2\0\2\12\1\0\2\12\34\0\1\12\10\0\2\12"+
    "\1\0\1\12\1\0\6\12\10\0\1\12\3\101\1\102"+
    "\4\101\1\102\30\101\1\103\74\101\4\0\2\14\6\0"+
    "\14\14\1\0\4\14\1\0\2\14\5\0\34\14\1\0"+
    "\3\14\6\0\1\104\11\0\10\14\5\0\2\14\6\0"+
    "\4\14\1\105\7\14\1\0\4\14\1\0\2\14\5\0"+
    "\34\14\1\0\3\14\6\0\1\104\11\0\10\14\5\0"+
    "\2\14\6\0\14\14\1\0\4\14\1\0\2\14\5\0"+
    "\1\14\1\106\32\14\1\0\3\14\6\0\1\104\11\0"+
    "\10\14\5\0\2\14\6\0\14\14\1\0\4\14\1\0"+
    "\2\14\5\0\34\14\1\0\1\107\2\14\6\0\1\104"+
    "\11\0\10\14\5\0\2\20\6\0\14\20\1\0\4\20"+
    "\1\0\2\20\5\0\34\20\1\0\3\20\6\0\1\110"+
    "\1\0\1\111\7\0\10\20\5\0\2\20\1\0\1\12"+
    "\3\0\1\12\7\20\1\21\1\20\1\21\2\20\1\12"+
    "\4\20\1\12\2\20\2\12\1\0\2\12\34\20\1\12"+
    "\3\20\5\0\2\12\1\0\1\112\1\0\6\12\10\20"+
    "\1\12\4\0\2\14\1\0\1\12\3\0\1\12\7\14"+
    "\1\22\1\14\1\22\2\14\1\12\4\14\1\12\2\14"+
    "\2\12\1\0\2\12\34\14\1\12\3\14\5\0\2\12"+
    "\1\0\1\12\1\0\6\12\10\14\1\12\7\0\1\113"+
    "\3\0\1\113\7\0\1\113\1\0\1\113\2\0\1\114"+
    "\4\0\1\113\2\0\2\113\1\115\2\113\34\0\1\113"+
    "\10\0\2\113\1\0\1\113\1\0\6\113\10\0\1\113"+
    "\4\0\2\14\6\0\5\14\1\116\6\14\1\0\4\14"+
    "\1\0\2\14\5\0\3\14\1\117\30\14\1\0\3\14"+
    "\6\0\1\104\11\0\10\14\1\0\3\120\1\0\30\120"+
    "\1\121\4\120\1\122\74\120\7\0\1\12\3\0\1\12"+
    "\7\0\1\12\1\0\1\12\2\0\1\12\4\0\1\123"+
    "\2\0\2\12\1\0\2\12\34\0\1\12\6\0\1\124"+
    "\1\0\2\12\1\0\1\12\1\0\6\12\10\0\1\12"+
    "\4\0\2\14\6\0\2\14\1\125\11\14\1\0\4\14"+
    "\1\0\2\14\5\0\1\14\1\126\32\14\1\0\2\14"+
    "\1\127\6\0\1\104\11\0\10\14\5\0\2\14\6\0"+
    "\4\14\1\130\7\14\1\0\4\14\1\0\2\14\5\0"+
    "\3\14\1\131\30\14\1\0\1\132\2\14\6\0\1\104"+
    "\11\0\10\14\10\0\1\12\3\0\1\12\7\0\1\12"+
    "\1\0\1\12\2\0\1\12\4\0\1\12\2\0\2\12"+
    "\1\0\2\12\34\0\1\12\1\133\7\0\2\12\1\0"+
    "\1\12\1\0\6\12\10\0\1\12\4\0\2\14\6\0"+
    "\4\14\1\134\7\14\1\0\4\14\1\0\2\14\5\0"+
    "\3\14\1\135\30\14\1\0\3\14\6\0\1\104\11\0"+
    "\10\14\5\0\2\14\6\0\4\14\1\136\7\14\1\0"+
    "\4\14\1\0\2\14\5\0\34\14\1\0\3\14\6\0"+
    "\1\104\11\0\10\14\5\0\2\14\6\0\1\137\13\14"+
    "\1\0\4\14\1\0\2\14\5\0\34\14\1\0\3\14"+
    "\6\0\1\104\11\0\10\14\10\0\1\12\3\0\1\12"+
    "\7\0\1\12\1\0\1\12\2\0\1\12\4\0\1\12"+
    "\2\0\2\12\1\0\2\12\34\0\1\140\10\0\2\12"+
    "\1\0\1\12\1\0\2\12\1\60\3\12\10\0\1\12"+
    "\4\0\2\14\6\0\5\14\1\141\6\14\1\0\4\14"+
    "\1\0\2\14\5\0\34\14\1\0\3\14\6\0\1\104"+
    "\11\0\10\14\5\0\2\14\6\0\14\14\1\0\4\14"+
    "\1\0\2\14\5\0\34\14\1\0\1\142\2\14\6\0"+
    "\1\104\11\0\10\14\102\0\1\143\64\0\1\144\6\0"+
    "\1\145\42\0\1\146\7\0\1\147\12\0\1\150\2\0"+
    "\1\151\117\0\1\152\1\153\31\0\1\12\3\0\1\12"+
    "\7\0\1\12\1\0\1\12\2\0\1\12\4\0\1\12"+
    "\2\0\2\12\1\154\2\12\34\0\1\12\7\0\1\155"+
    "\1\156\1\12\1\0\1\12\1\0\6\12\10\0\1\12"+
    "\7\0\1\12\3\0\1\12\7\0\1\12\1\0\1\12"+
    "\2\0\1\12\4\0\1\12\1\157\1\0\2\12\1\0"+
    "\2\12\34\0\1\160\1\161\6\0\1\162\2\12\1\0"+
    "\1\12\1\0\6\12\10\0\1\12\7\0\1\12\3\0"+
    "\1\12\7\0\1\12\1\0\1\12\2\0\1\12\4\0"+
    "\1\12\2\0\2\12\1\0\2\12\34\0\1\12\10\0"+
    "\2\12\1\0\1\163\1\0\6\12\10\0\1\12\7\0"+
    "\1\12\3\0\1\12\7\0\1\12\1\0\1\12\2\0"+
    "\1\12\4\0\1\12\2\0\2\12\1\0\2\12\34\0"+
    "\1\12\10\0\2\12\1\0\1\12\1\0\2\12\1\164"+
    "\3\12\10\0\1\12\7\0\1\12\3\0\1\12\7\0"+
    "\1\12\1\0\1\12\2\0\1\12\4\0\1\12\2\0"+
    "\2\12\1\0\2\12\34\0\1\165\10\0\2\12\1\0"+
    "\1\12\1\0\6\12\10\0\1\12\4\0\2\14\6\0"+
    "\1\14\1\166\12\14\1\0\4\14\1\0\2\14\5\0"+
    "\34\14\1\0\3\14\6\0\1\104\11\0\2\14\1\167"+
    "\5\14\5\0\2\14\6\0\14\14\1\0\4\14\1\0"+
    "\1\170\1\14\5\0\34\14\1\0\3\14\6\0\1\104"+
    "\11\0\10\14\5\0\2\14\6\0\14\14\1\0\4\14"+
    "\1\0\2\14\5\0\34\14\1\0\3\14\6\0\1\104"+
    "\11\0\2\14\1\171\5\14\5\0\2\14\6\0\14\14"+
    "\1\0\4\14\1\0\2\14\5\0\34\14\1\0\3\14"+
    "\6\0\1\104\11\0\1\14\1\172\6\14\5\0\2\10"+
    "\12\0\1\173\10\0\1\10\23\0\1\173\2\0\1\174"+
    "\12\0\1\10\4\0\1\174\12\0\1\100\20\0\1\10"+
    "\10\0\1\12\3\0\1\12\6\175\1\0\1\12\1\175"+
    "\1\176\1\0\1\175\1\12\1\0\1\175\2\0\1\12"+
    "\2\175\2\12\1\0\2\12\4\175\27\0\1\175\1\12"+
    "\3\175\5\0\2\12\1\0\1\12\1\0\6\12\6\175"+
    "\2\0\1\12\106\0\1\177\130\0\1\200\34\0\41\74"+
    "\1\0\74\74\17\0\1\201\21\0\1\202\144\0\1\203"+
    "\200\0\1\204\23\0\3\205\1\101\3\0\1\101\1\205"+
    "\1\0\1\101\3\0\1\101\1\206\10\0\1\101\1\0"+
    "\1\207\1\101\4\0\1\101\2\0\1\210\4\101\1\211"+
    "\1\212\1\213\1\214\1\0\1\215\2\0\1\216\1\0"+
    "\1\217\1\220\1\0\1\221\1\222\1\215\1\212\1\0"+
    "\1\101\2\0\1\212\1\0\1\223\3\0\1\101\20\0"+
    "\1\101\6\0\1\101\114\0\1\104\26\0\2\14\6\0"+
    "\14\14\1\0\4\14\1\0\1\14\1\224\5\0\34\14"+
    "\1\0\3\14\6\0\1\104\11\0\10\14\5\0\2\14"+
    "\6\0\14\14\1\0\4\14\1\0\2\14\5\0\34\14"+
    "\1\0\3\14\6\0\1\104\11\0\1\225\7\14\114\0"+
    "\1\110\36\0\6\226\2\227\2\226\1\227\1\226\2\0"+
    "\1\226\1\227\2\0\2\226\5\0\4\226\22\227\1\0"+
    "\4\227\1\226\1\0\3\226\20\0\6\226\1\227\11\0"+
    "\1\12\3\0\1\12\6\226\1\227\1\230\1\226\1\231"+
    "\1\227\1\226\1\12\1\0\1\226\1\227\1\0\1\12"+
    "\2\226\2\12\1\0\2\12\4\226\22\227\1\0\4\227"+
    "\1\226\1\12\3\226\5\0\2\12\1\0\1\12\1\0"+
    "\6\12\6\226\1\227\1\0\1\12\7\0\1\113\3\0"+
    "\1\113\7\0\1\113\1\0\1\113\2\0\1\113\4\0"+
    "\1\113\2\0\2\113\1\0\2\113\34\0\1\113\10\0"+
    "\2\113\1\0\1\113\1\0\6\113\10\0\1\113\4\0"+
    "\2\14\6\0\14\14\1\0\4\14\1\0\2\14\5\0"+
    "\3\14\1\232\30\14\1\0\3\14\6\0\1\104\11\0"+
    "\10\14\5\0\2\14\6\0\1\233\13\14\1\0\4\14"+
    "\1\0\2\14\5\0\34\14\1\0\3\14\6\0\1\104"+
    "\11\0\10\14\35\0\1\234\105\0\1\235\3\0\1\120"+
    "\2\0\1\120\3\0\1\120\1\236\10\0\1\235\1\0"+
    "\1\237\1\120\4\0\1\120\2\0\1\240\4\120\1\241"+
    "\1\242\1\243\1\244\1\0\1\245\2\0\1\246\1\0"+
    "\1\247\1\250\1\0\1\251\1\252\1\245\1\242\1\0"+
    "\1\235\2\0\1\242\1\0\1\253\3\0\1\120\20\0"+
    "\1\120\6\0\1\235\10\0\1\12\3\0\1\12\7\0"+
    "\1\12\1\0\1\12\2\0\1\12\4\0\1\12\2\0"+
    "\2\12\1\0\2\12\34\0\1\12\6\0\1\254\1\0"+
    "\2\12\1\0\1\12\1\0\6\12\10\0\1\12\4\0"+
    "\2\14\6\0\14\14\1\0\4\14\1\0\2\14\5\0"+
    "\34\14\1\0\3\14\6\0\1\104\11\0\3\14\1\255"+
    "\4\14\5\0\2\14\6\0\1\256\13\14\1\0\4\14"+
    "\1\0\2\14\5\0\1\14\1\257\32\14\1\0\3\14"+
    "\6\0\1\104\11\0\10\14\5\0\2\14\6\0\14\14"+
    "\1\0\4\14\1\0\2\14\5\0\34\14\1\0\3\14"+
    "\6\0\1\104\11\0\1\260\7\14\5\0\2\14\6\0"+
    "\14\14\1\0\4\14\1\0\2\14\5\0\1\14\1\261"+
    "\1\262\31\14\1\0\3\14\6\0\1\104\11\0\10\14"+
    "\105\0\1\263\35\0\2\14\6\0\14\14\1\0\4\14"+
    "\1\0\2\14\5\0\2\14\1\264\31\14\1\0\3\14"+
    "\6\0\1\104\11\0\10\14\5\0\2\14\6\0\2\14"+
    "\1\265\11\14\1\0\4\14\1\0\2\14\5\0\34\14"+
    "\1\0\3\14\6\0\1\104\11\0\10\14\5\0\2\14"+
    "\6\0\5\14\1\266\6\14\1\0\4\14\1\0\2\14"+
    "\5\0\34\14\1\0\3\14\6\0\1\104\11\0\10\14"+
    "\1\0\3\140\1\0\132\140\4\0\2\14\6\0\1\267"+
    "\13\14\1\0\4\14\1\0\2\14\5\0\34\14\1\0"+
    "\3\14\6\0\1\104\11\0\10\14\5\0\2\14\6\0"+
    "\14\14\1\0\4\14\1\0\2\14\5\0\34\14\1\0"+
    "\3\14\6\0\1\104\11\0\4\14\1\270\3\14\114\0"+
    "\1\271\134\0\1\272\135\0\1\147\135\0\1\273\135\0"+
    "\1\274\135\0\1\275\23\0\3\276\1\0\5\276\2\0"+
    "\123\276\7\0\1\12\3\0\1\12\7\0\1\12\1\0"+
    "\1\12\2\0\1\12\4\0\1\12\2\0\2\12\1\277"+
    "\2\12\34\0\1\12\10\0\2\12\1\0\1\12\1\0"+
    "\6\12\10\0\1\12\46\0\1\300\76\0\1\12\3\0"+
    "\1\12\7\0\1\12\1\0\1\12\2\0\1\12\4\0"+
    "\1\12\2\0\2\12\1\0\2\12\34\0\1\12\4\0"+
    "\1\301\3\0\2\12\1\0\1\12\1\0\6\12\10\0"+
    "\1\12\21\0\1\302\62\0\1\303\35\0\2\14\6\0"+
    "\14\14\1\0\4\14\1\0\2\14\5\0\34\14\1\0"+
    "\3\14\6\0\1\104\11\0\3\14\1\304\4\14\5\0"+
    "\2\14\6\0\14\14\1\0\4\14\1\0\2\14\5\0"+
    "\34\14\1\0\1\305\2\14\6\0\1\104\11\0\10\14"+
    "\5\0\2\14\6\0\14\14\1\0\4\14\1\0\1\14"+
    "\1\306\5\0\34\14\1\0\3\14\6\0\1\104\11\0"+
    "\10\14\5\0\2\14\6\0\14\14\1\0\4\14\1\0"+
    "\2\14\5\0\34\14\1\0\1\307\2\14\6\0\1\104"+
    "\11\0\10\14\5\0\2\14\6\0\14\14\1\0\4\14"+
    "\1\0\2\14\5\0\3\14\1\310\30\14\1\0\3\14"+
    "\6\0\1\104\11\0\10\14\32\0\1\173\41\0\1\173"+
    "\40\0\1\173\5\0\1\174\12\0\1\174\11\0\3\174"+
    "\3\0\1\174\6\0\1\174\1\0\1\174\10\0\1\174"+
    "\1\0\2\174\1\0\2\174\3\0\1\174\6\0\1\174"+
    "\31\0\1\174\5\0\2\175\6\0\14\175\1\0\4\175"+
    "\1\0\2\175\5\0\34\175\1\0\3\175\20\0\10\175"+
    "\5\0\2\175\1\0\1\12\3\0\1\12\7\175\1\176"+
    "\1\175\1\176\2\175\1\12\4\175\1\12\2\175\2\12"+
    "\1\0\2\12\34\175\1\12\3\175\5\0\2\12\1\0"+
    "\1\12\1\0\6\12\10\175\1\12\102\0\1\311\74\0"+
    "\1\202\110\0\1\312\122\0\3\205\5\0\1\205\27\0"+
    "\1\101\125\0\1\101\41\0\1\101\40\0\1\101\54\0"+
    "\1\313\5\0\1\314\2\0\1\315\77\0\2\101\3\0"+
    "\1\101\5\0\4\101\4\0\22\101\1\0\4\101\7\0"+
    "\1\101\23\0\1\101\54\0\1\314\10\0\1\316\126\0"+
    "\1\101\150\0\1\101\120\0\1\317\2\0\1\101\1\0"+
    "\1\320\12\0\1\101\1\0\1\321\2\0\1\101\115\0"+
    "\1\101\127\0\1\322\2\0\1\323\1\215\1\0\1\324"+
    "\15\0\1\101\124\0\1\316\134\0\1\321\5\0\1\101"+
    "\120\0\1\101\4\0\1\314\130\0\1\101\12\0\1\101"+
    "\52\0\1\101\12\0\1\101\11\0\3\101\3\0\1\101"+
    "\6\0\1\101\1\0\1\101\10\0\1\101\1\0\2\101"+
    "\1\0\2\101\3\0\1\101\6\0\1\101\31\0\1\101"+
    "\5\0\2\14\6\0\14\14\1\0\4\14\1\0\2\14"+
    "\5\0\34\14\1\0\3\14\6\0\1\104\11\0\1\14"+
    "\1\325\6\14\5\0\2\226\6\0\14\226\1\0\4\226"+
    "\1\0\2\226\5\0\34\226\1\0\3\226\6\0\1\326"+
    "\11\0\10\226\5\0\2\227\6\0\14\227\1\0\4\227"+
    "\1\0\2\227\5\0\34\227\1\0\3\227\6\0\1\327"+
    "\1\0\1\111\7\0\10\227\5\0\2\227\1\0\1\12"+
    "\3\0\1\12\7\227\1\230\1\227\1\230\2\227\1\12"+
    "\4\227\1\12\2\227\2\12\1\0\2\12\34\227\1\12"+
    "\3\227\5\0\2\12\1\0\1\112\1\0\6\12\10\227"+
    "\1\12\4\0\2\226\1\0\1\12\3\0\1\12\7\226"+
    "\1\231\1\226\1\231\2\226\1\12\4\226\1\12\2\226"+
    "\2\12\1\0\2\12\34\226\1\12\3\226\5\0\2\12"+
    "\1\0\1\12\1\0\6\12\10\226\1\12\4\0\2\14"+
    "\6\0\1\330\13\14\1\0\4\14\1\0\2\14\5\0"+
    "\34\14\1\0\3\14\6\0\1\104\11\0\10\14\5\0"+
    "\2\14\6\0\14\14\1\0\4\14\1\0\2\14\5\0"+
    "\34\14\1\0\1\331\2\14\6\0\1\104\11\0\10\14"+
    "\5\0\1\235\24\0\1\235\2\0\1\234\36\0\1\235"+
    "\40\0\1\235\32\0\1\332\41\0\1\332\40\0\1\332"+
    "\54\0\1\333\5\0\1\334\2\0\1\335\77\0\2\120"+
    "\3\0\1\120\5\0\4\120\4\0\22\120\1\0\4\120"+
    "\7\0\1\120\23\0\1\120\54\0\1\334\10\0\1\336"+
    "\126\0\1\120\150\0\1\120\120\0\1\337\2\0\1\340"+
    "\1\0\1\341\12\0\1\120\1\0\1\342\2\0\1\120"+
    "\115\0\1\120\127\0\1\343\2\0\1\344\1\245\1\0"+
    "\1\345\15\0\1\120\124\0\1\336\134\0\1\342\5\0"+
    "\1\120\120\0\1\120\4\0\1\334\130\0\1\120\12\0"+
    "\1\120\52\0\1\346\12\0\1\346\11\0\3\346\3\0"+
    "\1\346\6\0\1\346\1\0\1\346\10\0\1\346\1\0"+
    "\2\346\1\0\2\346\3\0\1\346\6\0\1\346\31\0"+
    "\1\346\5\0\2\14\6\0\4\14\1\347\7\14\1\0"+
    "\4\14\1\0\2\14\5\0\34\14\1\0\3\14\6\0"+
    "\1\104\11\0\10\14\5\0\2\14\6\0\14\14\1\0"+
    "\4\14\1\0\2\14\5\0\34\14\1\0\3\14\6\0"+
    "\1\104\11\0\1\350\7\14\5\0\2\14\6\0\14\14"+
    "\1\0\4\14\1\0\1\351\1\14\5\0\34\14\1\0"+
    "\3\14\6\0\1\104\11\0\10\14\5\0\2\14\6\0"+
    "\14\14\1\0\4\14\1\0\2\14\5\0\3\14\1\352"+
    "\30\14\1\0\3\14\6\0\1\104\11\0\10\14\5\0"+
    "\2\14\6\0\14\14\1\0\4\14\1\0\2\14\5\0"+
    "\3\14\1\353\30\14\1\0\3\14\6\0\1\104\11\0"+
    "\10\14\5\0\2\14\6\0\14\14\1\0\4\14\1\0"+
    "\1\354\1\14\5\0\34\14\1\0\3\14\6\0\1\104"+
    "\11\0\10\14\40\0\1\355\102\0\2\14\6\0\14\14"+
    "\1\0\4\14\1\0\2\14\5\0\3\14\1\356\30\14"+
    "\1\0\3\14\6\0\1\104\11\0\10\14\5\0\2\14"+
    "\6\0\14\14\1\0\4\14\1\0\1\357\1\14\5\0"+
    "\34\14\1\0\3\14\6\0\1\104\11\0\10\14\5\0"+
    "\2\14\6\0\14\14\1\0\4\14\1\0\2\14\5\0"+
    "\34\14\1\0\1\360\2\14\6\0\1\104\11\0\10\14"+
    "\5\0\2\14\6\0\14\14\1\0\4\14\1\0\2\14"+
    "\5\0\34\14\1\0\1\361\2\14\6\0\1\104\11\0"+
    "\10\14\5\0\2\14\6\0\14\14\1\0\4\14\1\0"+
    "\2\14\5\0\34\14\1\0\3\14\6\0\1\104\11\0"+
    "\1\362\7\14\1\0\2\363\1\364\1\0\5\363\2\0"+
    "\100\363\1\365\22\363\13\0\1\366\122\0\3\300\1\0"+
    "\132\300\14\0\1\367\160\0\1\370\102\0\2\14\6\0"+
    "\14\14\1\0\4\14\1\0\2\14\5\0\34\14\1\0"+
    "\1\371\2\14\6\0\1\104\11\0\10\14\5\0\2\14"+
    "\6\0\14\14\1\0\4\14\1\0\2\14\5\0\34\14"+
    "\1\0\2\14\1\372\6\0\1\104\11\0\10\14\5\0"+
    "\2\14\6\0\14\14\1\0\4\14\1\0\1\373\1\14"+
    "\5\0\34\14\1\0\3\14\6\0\1\104\11\0\10\14"+
    "\5\0\2\14\6\0\14\14\1\0\4\14\1\0\2\14"+
    "\5\0\2\14\1\374\31\14\1\0\3\14\6\0\1\104"+
    "\11\0\10\14\5\0\2\14\6\0\5\14\1\375\6\14"+
    "\1\0\4\14\1\0\2\14\5\0\34\14\1\0\3\14"+
    "\6\0\1\104\11\0\10\14\104\0\1\376\134\0\1\377"+
    "\114\0\1\101\127\0\1\101\155\0\1\101\127\0\1\101"+
    "\136\0\1\101\127\0\1\101\126\0\1\101\146\0\1\101"+
    "\137\0\1\101\131\0\1\101\5\0\1\101\53\0\2\14"+
    "\6\0\5\14\1\u0100\6\14\1\0\4\14\1\0\2\14"+
    "\5\0\34\14\1\0\3\14\6\0\1\104\11\0\10\14"+
    "\114\0\1\326\135\0\1\327\26\0\2\14\6\0\1\u0101"+
    "\13\14\1\0\4\14\1\0\2\14\5\0\34\14\1\0"+
    "\3\14\6\0\1\104\11\0\10\14\32\0\1\332\2\0"+
    "\1\234\36\0\1\332\40\0\1\332\62\0\1\120\127\0"+
    "\1\120\155\0\1\120\127\0\1\120\136\0\1\120\103\0"+
    "\1\234\21\0\1\120\137\0\1\120\126\0\1\120\146\0"+
    "\1\120\137\0\1\120\131\0\1\120\5\0\1\120\53\0"+
    "\1\346\12\0\1\346\11\0\3\346\1\234\2\0\1\346"+
    "\6\0\1\346\1\0\1\346\10\0\1\346\1\0\2\346"+
    "\1\0\2\346\3\0\1\346\6\0\1\346\31\0\1\346"+
    "\5\0\2\14\6\0\14\14\1\0\4\14\1\0\2\14"+
    "\5\0\2\14\1\u0102\31\14\1\0\3\14\6\0\1\104"+
    "\11\0\10\14\5\0\2\14\6\0\14\14\1\0\4\14"+
    "\1\0\2\14\5\0\3\14\1\u0103\30\14\1\0\3\14"+
    "\6\0\1\104\11\0\10\14\5\0\2\14\6\0\14\14"+
    "\1\0\4\14\1\0\2\14\5\0\33\14\1\u0104\1\0"+
    "\3\14\6\0\1\104\11\0\10\14\5\0\2\14\6\0"+
    "\14\14\1\0\4\14\1\0\2\14\5\0\34\14\1\0"+
    "\3\14\6\0\1\104\11\0\1\14\1\u0105\6\14\5\0"+
    "\2\14\6\0\14\14\1\0\4\14\1\0\2\14\5\0"+
    "\1\u0106\33\14\1\0\3\14\6\0\1\104\11\0\10\14"+
    "\106\0\1\u0107\34\0\2\14\6\0\5\14\1\u0108\6\14"+
    "\1\0\4\14\1\0\2\14\5\0\34\14\1\0\3\14"+
    "\6\0\1\104\11\0\10\14\5\0\2\14\6\0\5\14"+
    "\1\u0109\6\14\1\0\4\14\1\0\2\14\5\0\34\14"+
    "\1\0\3\14\6\0\1\104\11\0\10\14\5\0\2\14"+
    "\6\0\1\14\1\u010a\12\14\1\0\4\14\1\0\2\14"+
    "\5\0\34\14\1\0\3\14\6\0\1\104\11\0\10\14"+
    "\1\0\3\363\1\0\5\363\2\0\100\363\1\365\25\363"+
    "\1\0\5\363\2\0\20\363\1\u010b\15\363\1\u010c\1\u010d"+
    "\1\363\1\u010e\1\u010f\5\363\1\u0110\1\u0111\3\363\1\u0112"+
    "\1\u0113\1\u0114\2\363\1\u0115\1\u0116\14\363\1\365\17\363"+
    "\1\u0117\5\363\1\0\5\363\2\0\66\363\1\u0118\11\363"+
    "\1\365\22\363\13\0\1\u0119\224\0\1\u011a\71\0\1\u011b"+
    "\103\0\2\14\6\0\14\14\1\0\4\14\1\0\2\14"+
    "\5\0\34\14\1\0\2\14\1\u011c\6\0\1\104\11\0"+
    "\10\14\5\0\2\14\6\0\14\14\1\0\4\14\1\0"+
    "\2\14\5\0\34\14\1\0\1\u011d\2\14\6\0\1\104"+
    "\11\0\10\14\5\0\2\14\6\0\14\14\1\0\4\14"+
    "\1\0\1\u011e\1\14\5\0\34\14\1\0\3\14\6\0"+
    "\1\104\11\0\10\14\37\0\1\u011f\103\0\2\14\6\0"+
    "\14\14\1\0\4\14\1\0\2\14\5\0\34\14\1\0"+
    "\1\u0120\2\14\6\0\1\104\11\0\10\14\5\0\2\14"+
    "\6\0\14\14\1\0\4\14\1\0\2\14\5\0\34\14"+
    "\1\0\3\14\6\0\1\104\11\0\1\u0121\7\14\5\0"+
    "\2\14\6\0\14\14\1\0\4\14\1\0\2\14\5\0"+
    "\34\14\1\0\2\14\1\u0122\6\0\1\104\11\0\10\14"+
    "\5\0\2\14\6\0\5\14\1\u0123\6\14\1\0\4\14"+
    "\1\0\2\14\5\0\2\14\1\u0124\31\14\1\0\3\14"+
    "\6\0\1\104\11\0\10\14\5\0\2\14\6\0\5\14"+
    "\1\u0125\6\14\1\0\4\14\1\0\2\14\5\0\34\14"+
    "\1\0\3\14\6\0\1\104\11\0\10\14\5\0\2\14"+
    "\6\0\14\14\1\0\4\14\1\0\1\u0126\1\14\5\0"+
    "\34\14\1\0\3\14\6\0\1\104\11\0\10\14\33\0"+
    "\1\u0127\107\0\2\14\6\0\5\14\1\u0128\6\14\1\0"+
    "\4\14\1\0\2\14\5\0\34\14\1\0\3\14\6\0"+
    "\1\104\11\0\10\14\5\0\2\14\6\0\1\14\1\u0129"+
    "\12\14\1\0\4\14\1\0\2\14\5\0\34\14\1\0"+
    "\3\14\6\0\1\104\11\0\10\14\5\0\2\14\6\0"+
    "\14\14\1\0\4\14\1\0\2\14\5\0\34\14\1\0"+
    "\3\14\6\0\1\104\11\0\3\14\1\u012a\4\14\1\0"+
    "\3\363\1\0\5\363\2\0\46\363\1\u012b\31\363\1\365"+
    "\25\363\1\0\5\363\2\0\42\363\1\u012c\35\363\1\365"+
    "\25\363\1\0\5\363\2\0\36\363\1\u012d\41\363\1\365"+
    "\25\363\1\0\5\363\2\0\42\363\1\u012e\6\363\1\u012f"+
    "\12\363\1\u0130\13\363\1\365\25\363\1\0\5\363\2\0"+
    "\55\363\1\u0131\22\363\1\365\25\363\1\0\5\363\2\0"+
    "\36\363\1\u0132\41\363\1\365\25\363\1\0\5\363\2\0"+
    "\42\363\1\u0133\1\363\1\u0134\33\363\1\365\25\363\1\0"+
    "\5\363\2\0\46\363\1\u0135\31\363\1\365\25\363\1\0"+
    "\5\363\2\0\37\363\1\u0136\40\363\1\365\25\363\1\0"+
    "\5\363\2\0\36\363\1\u0137\41\363\1\365\25\363\1\0"+
    "\5\363\2\0\57\363\1\u0138\20\363\1\365\25\363\1\0"+
    "\5\363\2\0\46\363\1\u0139\31\363\1\365\25\363\1\0"+
    "\5\363\2\0\50\363\1\u013a\27\363\1\365\25\363\1\0"+
    "\5\363\2\0\73\363\1\u013b\4\363\1\365\22\363\14\u013c"+
    "\1\u013d\1\u013e\120\u013c\3\u011a\1\0\132\u011a\46\0\1\u013f"+
    "\73\0\2\14\6\0\14\14\1\0\4\14\1\0\2\14"+
    "\5\0\34\14\1\0\1\14\1\u0140\1\14\6\0\1\104"+
    "\11\0\10\14\5\0\2\14\6\0\14\14\1\0\4\14"+
    "\1\0\2\14\5\0\1\14\1\u0141\32\14\1\0\3\14"+
    "\6\0\1\104\11\0\10\14\105\0\1\u0142\35\0\2\14"+
    "\6\0\14\14\1\0\1\14\1\u0143\2\14\1\0\2\14"+
    "\5\0\34\14\1\0\3\14\6\0\1\104\11\0\10\14"+
    "\5\0\2\14\6\0\14\14\1\0\4\14\1\0\2\14"+
    "\5\0\34\14\1\0\3\14\6\0\1\104\11\0\1\u0144"+
    "\7\14\5\0\2\14\6\0\14\14\1\0\4\14\1\0"+
    "\2\14\5\0\34\14\1\0\2\14\1\u0145\6\0\1\104"+
    "\11\0\10\14\21\0\1\u0146\121\0\2\14\6\0\14\14"+
    "\1\0\4\14\1\0\2\14\5\0\34\14\1\0\1\u0147"+
    "\2\14\6\0\1\104\11\0\10\14\1\0\3\363\1\0"+
    "\5\363\2\0\64\363\1\u0148\13\363\1\365\25\363\1\0"+
    "\5\363\2\0\37\363\1\u0149\15\363\1\u014a\22\363\1\365"+
    "\25\363\1\0\5\363\2\0\64\363\1\u014b\13\363\1\365"+
    "\25\363\1\0\5\363\2\0\37\363\1\u014c\40\363\1\365"+
    "\25\363\1\0\5\363\2\0\51\363\1\u014d\26\363\1\365"+
    "\25\363\1\0\5\363\2\0\46\363\1\u014e\31\363\1\365"+
    "\25\363\1\0\5\363\2\0\46\363\1\u014f\31\363\1\365"+
    "\25\363\1\0\5\363\2\0\36\363\1\u0150\41\363\1\365"+
    "\25\363\1\0\5\363\2\0\56\363\1\u0151\21\363\1\365"+
    "\25\363\1\0\5\363\2\0\61\363\1\u0152\16\363\1\365"+
    "\25\363\1\0\5\363\2\0\51\363\1\u0153\26\363\1\365"+
    "\25\363\1\0\5\363\2\0\40\363\1\u0154\37\363\1\365"+
    "\25\363\1\0\5\363\2\0\40\363\1\u0155\10\363\1\u0156"+
    "\26\363\1\365\25\363\1\0\5\363\2\0\36\363\1\u0157"+
    "\41\363\1\365\25\363\1\0\5\363\2\0\36\363\1\u0158"+
    "\41\363\1\365\25\363\1\0\5\363\2\0\56\363\1\u0159"+
    "\21\363\1\365\22\363\15\u013c\1\u013e\273\u013c\1\u013e\1\u015a"+
    "\117\u013c\3\u013f\1\0\132\u013f\4\0\2\14\6\0\14\14"+
    "\1\0\4\14\1\0\1\u015b\1\14\5\0\34\14\1\0"+
    "\3\14\6\0\1\104\11\0\10\14\106\0\1\u015c\34\0"+
    "\2\14\6\0\14\14\1\0\4\14\1\0\2\14\5\0"+
    "\34\14\1\0\1\u015d\2\14\6\0\1\104\11\0\10\14"+
    "\5\0\2\14\6\0\14\14\1\0\4\14\1\0\2\14"+
    "\5\0\34\14\1\0\1\14\1\u015e\1\14\6\0\1\104"+
    "\11\0\10\14\40\0\1\u015f\76\0\3\363\1\0\5\363"+
    "\2\0\56\363\1\u0160\21\363\1\365\25\363\1\0\5\363"+
    "\2\0\36\363\1\u0161\41\363\1\365\25\363\1\0\5\363"+
    "\2\0\46\363\1\u0162\31\363\1\365\25\363\1\0\5\363"+
    "\2\0\50\363\1\u0163\27\363\1\365\25\363\1\0\5\363"+
    "\2\0\56\363\1\u0164\21\363\1\365\25\363\1\0\5\363"+
    "\2\0\51\363\1\u0165\26\363\1\365\25\363\1\0\5\363"+
    "\2\0\56\363\1\u0166\21\363\1\365\25\363\1\0\5\363"+
    "\2\0\46\363\1\u0167\31\363\1\365\25\363\1\0\5\363"+
    "\2\0\64\363\1\u0168\13\363\1\365\25\363\1\0\5\363"+
    "\2\0\44\363\1\u0169\33\363\1\365\25\363\1\0\5\363"+
    "\2\0\46\363\1\u016a\31\363\1\365\25\363\1\0\5\363"+
    "\2\0\57\363\1\u016b\20\363\1\365\25\363\1\0\5\363"+
    "\2\0\42\363\1\u016c\35\363\1\365\25\363\1\0\5\363"+
    "\2\0\57\363\1\u016d\20\363\1\365\25\363\1\0\5\363"+
    "\2\0\46\363\1\u016e\31\363\1\365\25\363\1\0\5\363"+
    "\2\0\36\363\1\u016f\41\363\1\365\22\363\15\u013c\1\u013e"+
    "\1\u013c\1\u0170\116\u013c\4\0\2\14\6\0\14\14\1\0"+
    "\4\14\1\0\2\14\5\0\34\14\1\0\1\u0171\2\14"+
    "\6\0\1\104\11\0\10\14\33\0\1\u0172\205\0\1\u0173"+
    "\33\0\3\363\1\0\5\363\2\0\46\363\1\u0174\31\363"+
    "\1\365\25\363\1\0\5\363\2\0\64\363\1\u0175\13\363"+
    "\1\365\25\363\1\0\5\363\2\0\51\363\1\u0176\26\363"+
    "\1\365\25\363\1\0\5\363\2\0\51\363\1\u0177\26\363"+
    "\1\365\25\363\1\0\5\363\2\0\51\363\1\u0178\26\363"+
    "\1\365\25\363\1\0\5\363\2\0\57\363\1\u0179\20\363"+
    "\1\365\25\363\1\0\5\363\2\0\40\363\1\u017a\37\363"+
    "\1\365\25\363\1\0\5\363\2\0\46\363\1\u017b\31\363"+
    "\1\365\25\363\1\0\5\363\2\0\42\363\1\u017c\35\363"+
    "\1\365\25\363\1\0\5\363\2\0\41\363\1\u017d\36\363"+
    "\1\365\25\363\1\0\5\363\2\0\36\363\1\u017e\41\363"+
    "\1\365\25\363\1\0\5\363\2\0\43\363\1\u017f\34\363"+
    "\1\365\25\363\1\0\5\363\2\0\62\363\1\u0180\15\363"+
    "\1\365\25\363\1\0\5\363\2\0\56\363\1\u0181\21\363"+
    "\1\365\25\363\1\0\5\363\2\0\57\363\1\u0182\20\363"+
    "\1\365\22\363\15\u013c\1\u013e\2\u013c\1\u0183\115\u013c\4\0"+
    "\2\14\6\0\14\14\1\0\4\14\1\0\1\14\1\u0184"+
    "\5\0\34\14\1\0\3\14\6\0\1\104\11\0\10\14"+
    "\21\0\1\u0185\223\0\1\u0186\27\0\3\363\1\0\5\363"+
    "\2\0\51\363\1\u0187\26\363\1\365\25\363\1\0\5\363"+
    "\2\0\50\363\1\u0188\27\363\1\365\25\363\1\0\5\363"+
    "\2\0\44\363\1\u0189\33\363\1\365\25\363\1\0\5\363"+
    "\2\0\52\363\1\u018a\25\363\1\365\25\363\1\0\5\363"+
    "\2\0\46\363\1\u018b\31\363\1\365\25\363\1\0\5\363"+
    "\2\0\50\363\1\u018c\27\363\1\365\25\363\1\0\5\363"+
    "\2\0\50\363\1\u018d\27\363\1\365\25\363\1\0\5\363"+
    "\2\0\56\363\1\u018e\21\363\1\365\25\363\1\0\5\363"+
    "\2\0\46\363\1\u018f\31\363\1\365\25\363\1\0\5\363"+
    "\2\0\46\363\1\u0190\31\363\1\365\25\363\1\0\5\363"+
    "\2\0\50\363\1\u0191\27\363\1\365\25\363\1\0\5\363"+
    "\2\0\50\363\1\u0192\27\363\1\365\25\363\1\0\5\363"+
    "\2\0\36\363\1\u0193\41\363\1\365\22\363\15\u013c\1\u013e"+
    "\3\u013c\1\u0194\114\u013c\37\0\1\u0195\76\0\3\363\1\0"+
    "\5\363\2\0\50\363\1\u0196\27\363\1\365\25\363\1\0"+
    "\5\363\2\0\51\363\1\u0197\26\363\1\365\25\363\1\0"+
    "\5\363\2\0\42\363\1\u0198\35\363\1\365\25\363\1\0"+
    "\5\363\2\0\40\363\1\u0199\37\363\1\365\25\363\1\0"+
    "\5\363\2\0\64\363\1\u019a\13\363\1\365\25\363\1\0"+
    "\5\363\2\0\57\363\1\u019b\20\363\1\365\25\363\1\0"+
    "\5\363\2\0\56\363\1\u019c\21\363\1\365\25\363\1\0"+
    "\5\363\2\0\40\363\1\u019d\37\363\1\365\25\363\1\0"+
    "\5\363\2\0\44\363\1\u019e\33\363\1\365\25\363\1\0"+
    "\5\363\2\0\63\363\1\u019f\14\363\1\365\22\363\102\0"+
    "\1\u01a0\33\0\3\363\1\0\5\363\2\0\44\363\1\u01a1"+
    "\33\363\1\365\25\363\1\0\5\363\2\0\52\363\1\u01a2"+
    "\25\363\1\365\25\363\1\0\5\363\2\0\56\363\1\u01a3"+
    "\21\363\1\365\25\363\1\0\5\363\2\0\57\363\1\u01a4"+
    "\20\363\1\365\25\363\1\0\5\363\2\0\41\363\1\u01a5"+
    "\22\363\1\u01a6\13\363\1\365\25\363\1\0\5\363\2\0"+
    "\41\363\1\u01a7\36\363\1\365\25\363\1\0\5\363\2\0"+
    "\46\363\1\u01a8\31\363\1\365\25\363\1\0\5\363\2\0"+
    "\46\363\1\u01a9\31\363\1\365\22\363\106\0\1\u01aa\27\0"+
    "\3\363\1\0\5\363\2\0\46\363\1\u01ab\31\363\1\365"+
    "\25\363\1\0\5\363\2\0\57\363\1\u01ac\20\363\1\365"+
    "\25\363\1\0\5\363\2\0\41\363\1\u01ad\36\363\1\365"+
    "\25\363\1\0\5\363\2\0\50\363\1\u01ae\6\363\1\u01af"+
    "\20\363\1\365\25\363\1\0\5\363\2\0\46\363\1\u01b0"+
    "\31\363\1\365\25\363\1\0\5\363\2\0\36\363\1\u01b1"+
    "\41\363\1\365\25\363\1\0\5\363\2\0\20\363\1\u01b2"+
    "\57\363\1\365\25\363\1\0\5\363\2\0\20\363\1\u01b3"+
    "\57\363\1\365\25\363\1\0\5\363\2\0\41\363\1\u01b4"+
    "\36\363\1\365\25\363\1\0\5\363\2\0\46\363\1\u01b5"+
    "\31\363\1\365\25\363\1\0\5\363\2\0\53\363\1\u01b6"+
    "\24\363\1\365\25\363\1\0\5\363\2\0\36\363\1\u01b7"+
    "\41\363\1\365\25\363\1\0\5\363\2\0\14\363\1\u01b8"+
    "\63\363\1\365\25\363\1\0\5\363\2\0\44\363\1\u01b9"+
    "\33\363\1\365\25\363\1\0\5\363\2\0\46\363\1\u01ba"+
    "\31\363\1\365\25\363\1\0\5\363\2\0\14\363\1\u01bb"+
    "\63\363\1\365\25\363\1\0\5\363\2\0\40\363\1\u01bc"+
    "\37\363\1\365\25\363\1\0\5\363\2\0\63\363\1\u01bd"+
    "\14\363\1\365\25\363\1\0\5\363\2\0\41\363\1\u01be"+
    "\36\363\1\365\25\363\1\0\5\363\2\0\57\363\1\u01bf"+
    "\20\363\1\365\25\363\1\0\5\363\2\0\46\363\1\u01c0"+
    "\31\363\1\365\25\363\1\0\5\363\2\0\51\363\1\u01c1"+
    "\26\363\1\365\25\363\1\0\5\363\2\0\36\363\1\u01c2"+
    "\41\363\1\365\25\363\1\0\5\363\2\0\50\363\1\u01c3"+
    "\27\363\1\365\25\363\1\0\5\363\2\0\40\363\1\u01c4"+
    "\37\363\1\365\25\363\1\0\5\363\2\0\40\363\1\u01c5"+
    "\37\363\1\365\25\363\1\0\5\363\2\0\57\363\1\u01c6"+
    "\20\363\1\365\25\363\1\0\5\363\2\0\50\363\1\u01c7"+
    "\27\363\1\365\25\363\1\0\5\363\2\0\36\363\1\u01c8"+
    "\41\363\1\365\25\363\1\0\5\363\2\0\56\363\1\u01c9"+
    "\21\363\1\365\25\363\1\0\5\363\2\0\46\363\1\u01ca"+
    "\31\363\1\365\22\363";

  private static int [] zzUnpackTrans() {
    int [] result = new int[34592];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\1\1\0\1\11\1\1\1\11\1\1\1\11"+
    "\22\1\1\11\10\1\1\11\2\1\1\11\2\1\1\11"+
    "\1\1\1\11\13\1\1\11\4\1\1\11\2\1\1\0"+
    "\1\11\1\0\5\1\1\0\3\1\1\11\2\1\1\0"+
    "\1\11\1\0\1\1\1\11\6\1\1\0\10\1\1\11"+
    "\2\0\1\1\3\0\3\11\1\1\1\0\1\1\1\0"+
    "\1\11\14\1\2\11\1\0\1\1\1\0\1\11\17\0"+
    "\10\1\1\11\17\0\1\11\6\1\1\0\5\1\1\0"+
    "\4\11\1\0\1\11\1\1\1\11\2\0\5\1\14\0"+
    "\5\1\15\0\6\1\1\0\5\1\6\0\5\1\1\0"+
    "\1\11\7\1\1\0\3\1\17\0\1\1\1\0\3\1"+
    "\1\0\7\1\1\0\3\1\20\0\1\1\3\0\3\1"+
    "\1\0\3\1\1\0\1\1\5\0\1\1\2\0\1\1"+
    "\12\0\1\1\1\0\2\1\10\0\1\1\11\0\1\1"+
    "\11\0\1\1\1\0\1\1\6\0\1\1\1\0\1\11"+
    "\3\0\2\1\3\0\1\1\4\0\1\1\10\0\1\1"+
    "\1\0\1\1\2\0\1\1\2\0\1\1\4\0\1\11"+
    "\5\0\1\1\1\0\2\1\1\0\1\1\3\0\2\1"+
    "\2\0\1\1\2\0\1\1\10\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[458];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char[] zzBuffer = new char[0];

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    private int commentStart;
    private int commentDepth;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _HaskellLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _HaskellLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3364) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer.toString().toCharArray();
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return TokenPackage.getBLOCK_COMMENT();
          }
        case 120: break;
        case 2: 
          { return TokenType.BAD_CHARACTER;
          }
        case 121: break;
        case 3: 
          { return TokenType.WHITE_SPACE;
          }
        case 122: break;
        case 4: 
          { return TokenPackage.getNEW_LINE();
          }
        case 123: break;
        case 5: 
          { return HaskellLexerTokens.INTEGER;
          }
        case 124: break;
        case 6: 
          { return HaskellLexerTokens.BACKQUOTE;
          }
        case 125: break;
        case 7: 
          { return HaskellLexerTokens.VARSYM;
          }
        case 126: break;
        case 8: 
          { return HaskellLexerTokens.VARID;
          }
        case 127: break;
        case 9: 
          { return HaskellLexerTokens.CONID;
          }
        case 128: break;
        case 10: 
          { return HaskellLexerTokens.UNDERSCORE;
          }
        case 129: break;
        case 11: 
          { return HaskellLexerTokens.COLON;
          }
        case 130: break;
        case 12: 
          { return HaskellLexerTokens.SIMPLEQUOTE;
          }
        case 131: break;
        case 13: 
          { return HaskellLexerTokens.STAR;
          }
        case 132: break;
        case 14: 
          { yybegin(LAMBDA);
                        return HaskellLexerTokens.LAM;
          }
        case 133: break;
        case 15: 
          { return HaskellLexerTokens.CBRACK;
          }
        case 134: break;
        case 16: 
          { return HaskellLexerTokens.AT;
          }
        case 135: break;
        case 17: 
          { return HaskellLexerTokens.MINUS;
          }
        case 136: break;
        case 18: 
          { return HaskellLexerTokens.OCURLY;
          }
        case 137: break;
        case 19: 
          { return HaskellLexerTokens.CCURLY;
          }
        case 138: break;
        case 20: 
          { return HaskellLexerTokens.OBRACK;
          }
        case 139: break;
        case 21: 
          { return HaskellLexerTokens.OPAREN;
          }
        case 140: break;
        case 22: 
          { return HaskellLexerTokens.CPAREN;
          }
        case 141: break;
        case 23: 
          { return HaskellLexerTokens.VBAR;
          }
        case 142: break;
        case 24: 
          { return HaskellLexerTokens.SEMI;
          }
        case 143: break;
        case 25: 
          { return HaskellLexerTokens.DOT;
          }
        case 144: break;
        case 26: 
          { return HaskellLexerTokens.COMMA;
          }
        case 145: break;
        case 27: 
          { return HaskellLexerTokens.EQUAL;
          }
        case 146: break;
        case 28: 
          { return HaskellLexerTokens.RARROW;
          }
        case 147: break;
        case 29: 
          { return HaskellLexerTokens.TILDE;
          }
        case 148: break;
        case 30: 
          { return HaskellLexerTokens.BANG;
          }
        case 149: break;
        case 31: 
          { 
          }
        case 150: break;
        case 32: 
          { yypushback(1); yybegin(YYINITIAL);
          }
        case 151: break;
        case 33: 
          { return HaskellLexerTokens.STRING;
          }
        case 152: break;
        case 34: 
          { return HaskellLexerTokens.OF;
          }
        case 153: break;
        case 35: 
          { return HaskellLexerTokens.CONSYM;
          }
        case 154: break;
        case 36: 
          { return HaskellLexerTokens.DCOLON;
          }
        case 155: break;
        case 37: 
          { return HaskellLexerTokens.CPABRACK;
          }
        case 156: break;
        case 38: 
          { return HaskellLexerTokens.TYQUOTE;
          }
        case 157: break;
        case 39: 
          { return HaskellLexerTokens.PARENESCAPE;
          }
        case 158: break;
        case 40: 
          { return HaskellLexerTokens.IF;
          }
        case 159: break;
        case 41: 
          { return HaskellLexerTokens.IN;
          }
        case 160: break;
        case 42: 
          { return HaskellLexerTokens.DO;
          }
        case 161: break;
        case 43: 
          { return HaskellLexerTokens.AS;
          }
        case 162: break;
        case 44: 
          { return TokenPackage.getEND_OF_LINE_COMMENT();
          }
        case 163: break;
        case 45: 
          { yybegin(BLOCK_COMMENT);
    commentDepth = 0;
    commentStart = getTokenStart();
          }
        case 164: break;
        case 46: 
          { return HaskellLexerTokens.OPABRACK;
          }
        case 165: break;
        case 47: 
          { return HaskellLexerTokens.OPENEXPQUOTE;
          }
        case 166: break;
        case 48: 
          { return HaskellLexerTokens.OUBXPAREN;
          }
        case 167: break;
        case 49: 
          { return HaskellLexerTokens.CLOSEQUOTE;
          }
        case 168: break;
        case 50: 
          { return HaskellLexerTokens.CPARENBAR;
          }
        case 169: break;
        case 51: 
          { return HaskellLexerTokens.CUBXPAREN;
          }
        case 170: break;
        case 52: 
          { return HaskellLexerTokens.DOTDOT;
          }
        case 171: break;
        case 53: 
          { return HaskellLexerTokens.DARROW;
          }
        case 172: break;
        case 54: 
          { return HaskellLexerTokens.LARROW;
          }
        case 173: break;
        case 55: 
          { return HaskellLexerTokens.DUPIPVARID;
          }
        case 174: break;
        case 56: 
          { if (commentDepth > 0) {
            commentDepth--;
        }
        else {
             int state = yystate();
             yybegin(YYINITIAL);
             zzStartRead = commentStart;
             return TokenPackage.getBLOCK_COMMENT();
        }
          }
        case 175: break;
        case 57: 
          { commentDepth++;
          }
        case 176: break;
        case 58: 
          { return HaskellLexerTokens.LET;
          }
        case 177: break;
        case 59: 
          { return HaskellLexerTokens.QVARID;
          }
        case 178: break;
        case 60: 
          { return HaskellLexerTokens.QCONID;
          }
        case 179: break;
        case 61: 
          { return HaskellLexerTokens.CHAR;
          }
        case 180: break;
        case 62: 
          { return HaskellLexerTokens.PARENTYESCAPE;
          }
        case 181: break;
        case 63: 
          { return HaskellLexerTokens.OPENDECQUOTE;
          }
        case 182: break;
        case 64: 
          { return HaskellLexerTokens.OPENTEXPQUOTE;
          }
        case 183: break;
        case 65: 
          { return HaskellLexerTokens.OPENTYPQUOTE;
          }
        case 184: break;
        case 66: 
          { return HaskellLexerTokens.OPENPATQUOTE;
          }
        case 185: break;
        case 67: 
          { return HaskellLexerTokens.CLOSETEXPQUOTE;
          }
        case 186: break;
        case 68: 
          { return CPPTokens.IF;
          }
        case 187: break;
        case 69: 
          { return HaskellLexerTokens.CLOSE_PRAG;
          }
        case 188: break;
        case 70: 
          { return HaskellLexerTokens.CASE;
          }
        case 189: break;
        case 71: 
          { return HaskellLexerTokens.DATA;
          }
        case 190: break;
        case 72: 
          { return HaskellLexerTokens.ROLE;
          }
        case 191: break;
        case 73: 
          { return HaskellLexerTokens.ELSE;
          }
        case 192: break;
        case 74: 
          { return HaskellLexerTokens.TYPE;
          }
        case 193: break;
        case 75: 
          { return HaskellLexerTokens.THEN;
          }
        case 194: break;
        case 76: 
          { yybegin(YYINITIAL);
                   return HaskellLexerTokens.LCASE;
          }
        case 195: break;
        case 77: 
          { return HaskellLexerTokens.CLASS;
          }
        case 196: break;
        case 78: 
          { return HaskellLexerTokens.INFIX;
          }
        case 197: break;
        case 79: 
          { return CPPTokens.ELSE;
          }
        case 198: break;
        case 80: 
          { return HaskellLexerTokens.WHERE;
          }
        case 199: break;
        case 81: 
          { return HaskellLexerTokens.MODULE;
          }
        case 200: break;
        case 82: 
          { return HaskellLexerTokens.IMPORT;
          }
        case 201: break;
        case 83: 
          { return HaskellLexerTokens.INFIXL;
          }
        case 202: break;
        case 84: 
          { return HaskellLexerTokens.INFIXR;
          }
        case 203: break;
        case 85: 
          { return HaskellLexerTokens.FORALL;
          }
        case 204: break;
        case 86: 
          { return HaskellLexerTokens.FAMILY;
          }
        case 205: break;
        case 87: 
          { return TokenPackage.getPRAGMA();
          }
        case 206: break;
        case 88: 
          { return CPPTokens.ENDIF;
          }
        case 207: break;
        case 89: 
          { return HaskellLexerTokens.HIDING;
          }
        case 208: break;
        case 90: 
          { return HaskellLexerTokens.DEFAULT;
          }
        case 209: break;
        case 91: 
          { return HaskellLexerTokens.NEWTYPE;
          }
        case 210: break;
        case 92: 
          { return HaskellLexerTokens.SCC_PRAG;
          }
        case 211: break;
        case 93: 
          { return HaskellLexerTokens.ANN_PRAG;
          }
        case 212: break;
        case 94: 
          { return HaskellLexerTokens.INSTANCE;
          }
        case 213: break;
        case 95: 
          { return HaskellLexerTokens.DERIVING;
          }
        case 214: break;
        case 96: 
          { return HaskellLexerTokens.CORE_PRAG;
          }
        case 215: break;
        case 97: 
          { return HaskellLexerTokens.CTYPE;
          }
        case 216: break;
        case 98: 
          { return HaskellLexerTokens.RULES_PRAG;
          }
        case 217: break;
        case 99: 
          { return HaskellLexerTokens.QUALIFIED;
          }
        case 218: break;
        case 100: 
          { yybegin(TEX); return TokenPackage.getBLOCK_COMMENT();
          }
        case 219: break;
        case 101: 
          { return HaskellLexerTokens.UNPACK_PRAG;
          }
        case 220: break;
        case 102: 
          { return HaskellLexerTokens.SOURCE_PRAG;
          }
        case 221: break;
        case 103: 
          { return HaskellLexerTokens.INLINE_PRAG;
          }
        case 222: break;
        case 104: 
          { yypushback(1);
                        return HaskellLexerTokens.OPARENBAR;
          }
        case 223: break;
        case 105: 
          { return HaskellLexerTokens.MINIMAL_PRAG;
          }
        case 224: break;
        case 106: 
          { return HaskellLexerTokens.WARNING_PRAG;
          }
        case 225: break;
        case 107: 
          { return HaskellLexerTokens.NOUNPACK_PRAG;
          }
        case 226: break;
        case 108: 
          { return HaskellLexerTokens.OVERLAPS;
          }
        case 227: break;
        case 109: 
          { yybegin(YYINITIAL); return TokenPackage.getBLOCK_COMMENT();
          }
        case 228: break;
        case 110: 
          { return HaskellLexerTokens.VECT_PRAG;
          }
        case 229: break;
        case 111: 
          { return HaskellLexerTokens.GENERATED_PRAG;
          }
        case 230: break;
        case 112: 
          { return HaskellLexerTokens.DEPRECATED_PRAG;
          }
        case 231: break;
        case 113: 
          { return HaskellLexerTokens.SPEC_PRAG;
          }
        case 232: break;
        case 114: 
          { return HaskellLexerTokens.INCOHERENT;
          }
        case 233: break;
        case 115: 
          { return HaskellLexerTokens.NOVECT_PRAG;
          }
        case 234: break;
        case 116: 
          { return HaskellLexerTokens.OVERLAPPING;
          }
        case 235: break;
        case 117: 
          { return HaskellLexerTokens.OVERLAPPABLE;
          }
        case 236: break;
        case 118: 
          { return HaskellLexerTokens.VECT_SCALAR_PRAG;
          }
        case 237: break;
        case 119: 
          { return HaskellLexerTokens.SPEC_INLINE_PRAG;
          }
        case 238: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case BLOCK_COMMENT: {
              int state = yystate();
        yybegin(YYINITIAL);
        zzStartRead = commentStart;
        return TokenPackage.getBLOCK_COMMENT();
            }
            case 459: break;
            default:
            return null;
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
