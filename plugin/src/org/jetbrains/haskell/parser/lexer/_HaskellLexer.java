/* The following code was generated by JFlex 1.5.1 */

package org.jetbrains.haskell.parser.lexer;

import java.util.*;
import com.intellij.lexer.*;
import com.intellij.psi.*;
import org.jetbrains.haskell.parser.token.*;
import com.intellij.psi.tree.IElementType;
import org.jetbrains.grammar.HaskellLexerTokens;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.1
 * from the specification file <tt>/home/atsky/work/haskell-idea-plugin/plugin/src/org/jetbrains/haskell/parser/lexer/Haskell.flex</tt>
 */
class _HaskellLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int BLOCK_COMMENT = 2;
  public static final int TEX = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\3\0\1\5\1\0\1\1\3\0\1\1\1\3\1\77\1\2\1\2"+
    "\22\0\1\1\1\114\1\10\1\126\1\7\1\7\1\32\1\23\1\101"+
    "\1\102\1\7\1\7\1\105\1\67\1\104\1\7\1\127\1\61\1\61"+
    "\1\61\1\61\3\20\2\4\1\17\1\103\1\110\1\106\1\111\1\7"+
    "\1\30\1\51\1\54\1\52\1\22\1\47\1\55\1\64\1\44\1\60"+
    "\1\15\1\53\1\41\1\63\1\37\1\43\1\60\1\50\1\57\1\42"+
    "\1\45\1\40\1\56\1\15\1\46\1\62\1\15\1\100\1\26\1\27"+
    "\1\31\1\16\1\6\1\36\1\70\1\21\1\25\1\71\1\34\1\72"+
    "\1\122\1\73\2\13\1\116\1\24\1\74\1\65\1\121\1\125\1\35"+
    "\1\115\1\117\1\120\1\33\1\123\1\66\1\124\1\13\1\75\1\107"+
    "\1\76\1\113\6\0\1\77\33\0\11\7\1\13\2\7\1\0\4\7"+
    "\2\0\1\7\1\13\3\7\1\0\1\13\1\7\3\0\1\7\27\11"+
    "\1\7\7\11\30\13\1\7\10\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\2\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\2\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\2\11\1\13\1\11\1\13\1\11\3\13\2\11"+
    "\1\13\1\11\1\13\2\11\1\13\3\11\2\13\4\11\1\13\2\11"+
    "\1\13\3\11\3\13\2\11\1\13\2\11\1\13\1\11\1\13\1\11"+
    "\1\13\2\11\1\13\1\11\2\13\1\11\1\13\2\11\1\13\3\11"+
    "\1\13\1\11\1\13\2\11\2\13\1\0\1\11\3\13\4\0\1\11"+
    "\1\0\1\13\1\11\1\0\1\13\1\11\1\0\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\2\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\2\13\1\11\1\0\1\13\1\11\1\13\3\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\7\13\2\11\1\13\2\11"+
    "\2\13\1\11\1\13\4\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\105\13\1\0\44\13\7\0\2\13\4\7\14\0\16\7"+
    "\5\13\7\7\1\0\1\7\1\0\21\7\105\0\1\13\52\0\1\11"+
    "\1\13\1\11\1\13\1\0\1\7\1\11\1\13\2\0\4\13\1\7"+
    "\5\0\2\7\1\11\1\7\3\11\1\0\1\11\1\0\2\11\1\13"+
    "\21\11\1\0\11\11\43\13\1\11\2\13\3\11\3\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\5\13\1\11\1\13\1\7\1\11\1\13\2\11\2\13\63\11"+
    "\60\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\7\7\0\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\2\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\2\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\11\0\46\11\3\0\6\7\1\0\47\13\1\0"+
    "\2\7\4\0\1\7\56\0\1\7\1\0\1\7\2\0\1\7\2\0"+
    "\1\7\54\0\2\7\21\0\12\7\13\0\1\7\2\0\2\7\112\0"+
    "\4\7\146\0\1\7\11\0\1\7\12\0\1\7\23\0\2\7\1\0"+
    "\16\7\350\0\4\7\66\0\17\7\37\0\1\7\u0105\0\2\7\12\0"+
    "\1\7\201\0\2\7\6\0\2\7\364\0\2\7\176\0\1\7\202\0"+
    "\10\7\204\0\1\7\371\0\1\7\172\0\1\7\112\0\1\7\17\0"+
    "\1\7\12\0\2\7\245\0\27\7\2\0\6\7\24\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\107\0\1\7\70\0\10\7\1\0"+
    "\6\7\1\0\15\7\157\0\6\7\116\0\2\7\46\11\1\0\1\11"+
    "\5\0\1\11\55\0\1\7\u0264\0\11\7\47\0\12\7\146\0\1\7"+
    "\u026c\0\2\7\54\0\2\7\116\0\3\7\107\0\2\7\235\0\3\7"+
    "\1\0\4\7\44\0\13\7\u0135\0\1\7\3\0\2\7\230\0\42\7"+
    "\36\0\2\7\200\0\7\7\1\0\6\7\254\0\21\7\11\0\11\7"+
    "\177\0\4\7\73\0\5\7\76\0\2\7\100\0\10\7\13\0\1\7"+
    "\54\0\300\13\100\0\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\11\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\11\13\10\11\6\13\2\0\6\11\2\0\10\13\10\11\10\13\10\11"+
    "\6\13\2\0\6\11\2\0\10\13\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\10\13\10\11\16\13\2\0\10\13\10\0\10\13"+
    "\10\0\10\13\10\0\5\13\1\0\2\13\4\11\1\0\1\7\1\13"+
    "\3\7\3\13\1\0\2\13\4\11\1\0\3\7\4\13\2\0\2\13"+
    "\4\11\1\0\3\7\10\13\5\11\3\7\2\0\3\13\1\0\2\13"+
    "\4\11\1\0\2\7\21\0\30\7\1\77\1\77\6\0\57\7\22\0"+
    "\1\13\10\0\5\7\1\13\12\0\5\7\1\0\15\13\3\0\33\7"+
    "\105\0\2\7\1\11\4\7\1\11\2\7\1\13\3\11\2\13\3\11"+
    "\1\13\1\7\1\11\3\7\5\11\6\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\4\11\1\7\1\13\4\11\1\13\4\0\1\13\2\7"+
    "\2\13\2\11\5\7\1\11\4\13\4\7\1\13\1\7\20\0\20\11"+
    "\20\13\3\0\1\11\1\13\13\0\2\7\1\112\155\7\1\7\u01f3\7"+
    "\14\0\47\7\31\0\13\7\121\0\32\7\32\12\32\14\26\0\u0200\7"+
    "\1\0\165\7\36\0\u03b9\7\3\0\12\7\246\0\57\11\1\0\57\13"+
    "\1\0\1\11\1\13\3\11\2\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\4\11\1\13\1\11\2\13\1\11\10\13\3\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\2\13\6\7\1\11\1\13"+
    "\1\11\1\13\3\0\1\11\1\13\5\0\4\7\1\0\2\7\46\13"+
    "\1\0\1\13\5\0\1\13\102\0\1\7\217\0\57\7\1\0\14\7"+
    "\104\0\32\7\1\0\131\7\14\0\326\7\32\0\14\7\5\0\4\7"+
    "\3\0\31\7\17\0\1\7\5\0\2\7\5\0\3\7\133\0\2\7"+
    "\3\0\1\7\132\0\1\7\224\0\2\7\4\0\12\7\40\0\44\7"+
    "\34\0\37\7\13\0\36\7\10\0\1\7\17\0\40\7\12\0\47\7"+
    "\17\0\77\7\1\0\u0100\7\u19c0\0\100\7\u5690\0\67\7\67\0\2\7"+
    "\u010d\0\3\7\60\0\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\5\0"+
    "\1\7\12\0\1\7\1\0\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\132\0\6\7"+
    "\10\0\27\7\11\0\2\7\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\3\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\12\13"+
    "\1\11\1\13\1\11\1\13\2\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\0\2\7\1\11\1\13\1\11\1\13"+
    "\1\0\1\11\1\13\1\11\1\13\14\0\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\115\0\3\13\55\0"+
    "\4\7\12\0\4\7\72\0\4\7\126\0\2\7\50\0\3\7\63\0"+
    "\2\7\57\0\1\7\141\0\15\7\20\0\2\7\174\0\4\7\27\0"+
    "\3\7\144\0\2\7\20\0\2\7\371\0\1\7\u4f14\0\7\13\14\0"+
    "\5\13\21\0\1\7\210\0\20\7\u017c\0\2\7\274\0\2\7\22\0"+
    "\12\7\26\0\43\7\1\0\23\7\1\0\4\7\225\0\17\7\12\0"+
    "\7\7\32\11\6\7\32\13\13\7\172\0\7\7\1\0\7\7\15\0"+
    "\2\7\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\2\1\10\1\7\1\11\1\7\1\12\1\13\1\11"+
    "\1\14\2\11\1\15\1\16\1\17\3\11\1\7\3\11"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\7\1\32\1\33\1\34\7\11\1\5"+
    "\3\35\2\1\1\0\1\36\2\0\1\7\1\37\2\11"+
    "\1\0\1\40\1\0\2\11\1\41\1\11\1\0\1\11"+
    "\1\42\1\43\1\44\3\11\1\45\1\46\1\11\1\47"+
    "\1\50\1\51\1\52\10\11\2\5\1\53\1\54\1\1"+
    "\20\0\1\55\1\56\2\7\2\11\1\57\17\0\4\11"+
    "\1\0\7\11\1\0\1\11\1\60\6\11\13\0\1\61"+
    "\1\11\15\0\1\11\1\62\2\11\1\0\3\11\1\63"+
    "\4\11\1\0\1\64\1\65\1\66\4\11\1\0\1\67"+
    "\3\11\1\0\4\11\1\70\2\11\1\0\2\11\1\71"+
    "\1\11\1\0\1\72\2\11\1\0\1\73\1\11\1\74"+
    "\1\75\1\76\1\77\2\11\1\100\1\101\1\102\1\11"+
    "\1\0\1\103\1\11\1\0\1\104\1\11\1\105\1\11"+
    "\1\0\1\106\1\0\1\107\1\11\2\0\1\110\1\0"+
    "\1\111\2\0\1\112";

  private static int [] zzUnpackAction() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\130\0\260\0\u0108\0\u0160\0\u0108\0\u01b8\0\u0108"+
    "\0\u0210\0\u0268\0\u02c0\0\u0318\0\u0370\0\u03c8\0\u0370\0\u0420"+
    "\0\u0478\0\u04d0\0\u0528\0\u0580\0\u05d8\0\u0108\0\u0210\0\u0630"+
    "\0\u0688\0\u06e0\0\u0738\0\u0790\0\u07e8\0\u0840\0\u0898\0\u0108"+
    "\0\u0108\0\u0108\0\u0108\0\u0108\0\u08f0\0\u0108\0\u0948\0\u0210"+
    "\0\u09a0\0\u0210\0\u0210\0\u0210\0\u09f8\0\u0a50\0\u0aa8\0\u0b00"+
    "\0\u0b58\0\u0bb0\0\u0c08\0\u0c60\0\u0108\0\u0cb8\0\u0d10\0\u0d68"+
    "\0\u0dc0\0\u0268\0\u0108\0\u0e18\0\u0e70\0\u0ec8\0\u0210\0\u0f20"+
    "\0\u0f78\0\u0fd0\0\u0108\0\u1028\0\u1080\0\u10d8\0\u0370\0\u1130"+
    "\0\u1188\0\u11e0\0\u0370\0\u0370\0\u1238\0\u1290\0\u12e8\0\u1340"+
    "\0\u0370\0\u1398\0\u13f0\0\u1448\0\u0210\0\u0210\0\u0210\0\u14a0"+
    "\0\u14f8\0\u1550\0\u15a8\0\u1600\0\u1658\0\u16b0\0\u1708\0\u1760"+
    "\0\u17b8\0\u0108\0\u0108\0\u1810\0\u1868\0\u18c0\0\u1918\0\u1970"+
    "\0\u19c8\0\u1a20\0\u1a78\0\u1ad0\0\u1b28\0\u1b80\0\u1bd8\0\u1c30"+
    "\0\u1c88\0\u1ce0\0\u1d38\0\u1d90\0\u1de8\0\u1e40\0\u1e98\0\u1ef0"+
    "\0\u1f48\0\u1fa0\0\u0108\0\u1ff8\0\u2050\0\u20a8\0\u2100\0\u2158"+
    "\0\u21b0\0\u2208\0\u2260\0\u22b8\0\u2310\0\u2368\0\u23c0\0\u2418"+
    "\0\u2470\0\u24c8\0\u2520\0\u2578\0\u25d0\0\u2628\0\u2680\0\u26d8"+
    "\0\u2730\0\u2788\0\u27e0\0\u2838\0\u2890\0\u28e8\0\u2940\0\u2998"+
    "\0\u0370\0\u29f0\0\u2a48\0\u2aa0\0\u2af8\0\u2b50\0\u2ba8\0\u2c00"+
    "\0\u2c58\0\u2cb0\0\u2d08\0\u2d60\0\u2db8\0\u2e10\0\u2e68\0\u2ec0"+
    "\0\u2f18\0\u2f70\0\u0370\0\u2fc8\0\u3020\0\u3078\0\u30d0\0\u3128"+
    "\0\u3180\0\u31d8\0\u3230\0\u3288\0\u32e0\0\u3338\0\u3390\0\u33e8"+
    "\0\u3440\0\u3498\0\u0370\0\u34f0\0\u3548\0\u35a0\0\u35f8\0\u3650"+
    "\0\u36a8\0\u0370\0\u3700\0\u3758\0\u37b0\0\u3808\0\u3860\0\u0370"+
    "\0\u0370\0\u0370\0\u38b8\0\u3910\0\u3968\0\u39c0\0\u3a18\0\u0370"+
    "\0\u3a70\0\u3ac8\0\u3b20\0\u3b78\0\u3bd0\0\u3c28\0\u3c80\0\u3cd8"+
    "\0\u3d30\0\u3d88\0\u3de0\0\u3e38\0\u3e90\0\u3ee8\0\u0370\0\u3f40"+
    "\0\u3f98\0\u0370\0\u3ff0\0\u4048\0\u40a0\0\u0370\0\u40f8\0\u0370"+
    "\0\u0370\0\u0370\0\u0370\0\u4150\0\u41a8\0\u2940\0\u0370\0\u0370"+
    "\0\u4200\0\u4258\0\u0370\0\u42b0\0\u4308\0\u0370\0\u4360\0\u0370"+
    "\0\u43b8\0\u4410\0\u0370\0\u4468\0\u0370\0\u44c0\0\u4518\0\u4570"+
    "\0\u0370\0\u45c8\0\u0108\0\u4620\0\u4678\0\u0108";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\2\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\13\1\17\1\20\1\7\1\21"+
    "\1\13\1\22\1\23\1\24\1\25\1\26\1\27\2\11"+
    "\1\15\1\30\1\15\1\31\22\13\1\7\3\13\1\32"+
    "\1\15\1\33\1\15\1\34\1\15\1\35\1\36\1\37"+
    "\1\40\1\0\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\11\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\15\1\61\1\62\1\15\1\63"+
    "\1\11\1\64\67\65\1\66\5\65\1\67\1\65\1\0"+
    "\30\65\26\70\1\71\101\70\131\0\2\5\131\0\2\7"+
    "\12\0\1\7\40\0\1\7\45\0\1\7\7\0\1\11"+
    "\2\0\1\11\1\0\1\11\2\0\1\11\6\0\1\11"+
    "\1\0\3\11\34\0\1\11\14\0\1\11\1\0\7\11"+
    "\11\0\1\11\1\0\3\72\1\73\4\72\1\73\15\72"+
    "\1\74\101\72\4\0\2\13\3\0\6\13\1\0\6\13"+
    "\5\0\34\13\1\0\5\13\7\0\1\75\10\0\11\13"+
    "\1\0\1\13\4\0\2\13\1\0\1\11\1\0\1\13"+
    "\1\14\1\13\1\14\2\13\1\11\6\13\1\11\1\0"+
    "\3\11\34\13\1\11\5\13\7\0\1\76\1\0\7\11"+
    "\11\13\1\11\1\13\4\0\2\15\3\0\6\15\1\0"+
    "\6\15\5\0\34\15\1\0\5\15\20\0\11\15\1\0"+
    "\1\15\4\0\2\15\1\0\1\11\1\0\1\15\1\16"+
    "\1\15\1\16\2\15\1\11\6\15\1\11\1\0\3\11"+
    "\34\15\1\11\5\15\7\0\1\11\1\0\7\11\11\15"+
    "\1\11\1\15\7\0\1\11\2\0\1\11\1\0\1\11"+
    "\2\0\1\77\6\0\1\11\1\0\3\11\34\0\1\11"+
    "\14\0\1\11\1\0\7\11\11\0\1\11\5\0\2\15"+
    "\3\0\6\15\1\0\6\15\5\0\3\15\1\100\30\15"+
    "\1\0\5\15\20\0\1\15\1\101\7\15\1\0\1\15"+
    "\3\102\1\0\17\102\1\103\2\102\1\104\101\102\4\0"+
    "\2\15\3\0\6\15\1\0\6\15\5\0\32\15\1\105"+
    "\1\15\1\0\5\15\20\0\11\15\1\0\1\15\4\0"+
    "\2\15\3\0\6\15\1\0\6\15\5\0\3\15\1\106"+
    "\26\15\1\107\1\15\1\0\1\15\1\110\3\15\20\0"+
    "\11\15\1\0\1\15\7\0\1\11\2\0\1\11\1\0"+
    "\1\11\2\0\1\11\6\0\1\11\1\0\3\11\34\0"+
    "\1\11\1\0\1\111\12\0\1\11\1\0\7\11\11\0"+
    "\1\11\5\0\2\15\3\0\6\15\1\0\6\15\5\0"+
    "\32\15\1\112\1\15\1\0\5\15\20\0\11\15\1\0"+
    "\1\15\4\0\2\15\3\0\6\15\1\0\6\15\5\0"+
    "\34\15\1\0\5\15\20\0\1\113\10\15\1\0\1\15"+
    "\4\0\2\15\3\0\6\15\1\0\6\15\5\0\1\15"+
    "\1\114\32\15\1\0\5\15\20\0\11\15\1\0\1\15"+
    "\7\0\1\11\2\0\1\11\1\0\1\11\2\0\1\11"+
    "\6\0\1\11\1\0\3\11\34\0\1\115\14\0\1\11"+
    "\1\0\3\11\1\52\3\11\11\0\1\11\5\0\2\15"+
    "\3\0\6\15\1\0\6\15\5\0\33\15\1\116\1\0"+
    "\5\15\20\0\1\15\1\117\7\15\1\0\1\15\4\0"+
    "\2\15\3\0\6\15\1\0\4\15\1\120\1\15\5\0"+
    "\1\15\1\121\32\15\1\0\4\15\1\122\20\0\11\15"+
    "\1\0\1\15\4\0\2\15\3\0\6\15\1\0\6\15"+
    "\5\0\34\15\1\0\1\15\1\123\3\15\20\0\11\15"+
    "\1\0\1\15\67\0\1\124\47\0\1\11\2\0\1\11"+
    "\1\0\1\11\2\0\1\11\6\0\1\11\1\0\3\11"+
    "\34\0\1\11\14\0\1\125\1\0\7\11\11\0\1\11"+
    "\10\0\1\11\2\0\1\11\1\0\1\11\2\0\1\11"+
    "\6\0\1\11\1\0\3\11\34\0\1\11\14\0\1\11"+
    "\1\0\3\11\1\126\3\11\11\0\1\11\10\0\1\11"+
    "\2\0\1\11\1\0\1\11\2\0\1\11\6\0\1\11"+
    "\1\0\3\11\34\0\1\127\14\0\1\11\1\0\7\11"+
    "\11\0\1\11\5\0\2\15\3\0\6\15\1\0\6\15"+
    "\5\0\3\15\1\130\30\15\1\0\5\15\20\0\11\15"+
    "\1\0\1\15\4\0\2\15\3\0\6\15\1\0\6\15"+
    "\5\0\34\15\1\0\1\15\1\131\3\15\20\0\11\15"+
    "\1\0\1\15\4\0\2\15\3\0\6\15\1\0\6\15"+
    "\5\0\34\15\1\0\5\15\20\0\5\15\1\132\1\15"+
    "\1\133\1\15\1\0\1\15\4\0\2\15\3\0\6\15"+
    "\1\0\6\15\5\0\34\15\1\0\4\15\1\134\20\0"+
    "\11\15\1\0\1\15\4\0\2\15\3\0\6\15\1\0"+
    "\6\15\5\0\34\15\1\0\3\15\1\135\1\15\20\0"+
    "\11\15\1\0\1\15\4\0\2\15\3\0\6\15\1\0"+
    "\6\15\5\0\34\15\1\0\5\15\20\0\5\15\1\136"+
    "\3\15\1\0\1\15\4\0\2\15\3\0\6\15\1\0"+
    "\6\15\5\0\34\15\1\0\5\15\20\0\3\15\1\137"+
    "\5\15\1\0\1\15\4\0\2\7\12\0\1\7\22\0"+
    "\1\140\2\0\1\141\12\0\1\7\3\0\1\140\1\141"+
    "\40\0\1\7\76\0\1\142\120\0\1\143\40\0\26\70"+
    "\1\0\101\70\26\0\1\144\41\0\1\145\40\0\3\146"+
    "\1\72\3\0\1\72\7\0\1\72\1\0\1\147\1\72"+
    "\2\0\1\72\2\0\1\150\5\72\1\151\1\152\1\153"+
    "\1\154\1\0\1\155\2\0\1\156\1\0\1\157\1\160"+
    "\1\0\1\161\1\162\1\155\1\152\1\0\1\72\2\0"+
    "\1\152\1\163\1\164\1\0\1\72\3\0\1\72\22\0"+
    "\1\72\7\0\1\72\11\0\2\165\2\166\1\165\1\166"+
    "\2\0\1\166\1\165\1\0\2\166\5\0\4\166\22\165"+
    "\1\0\3\165\2\166\1\0\5\166\20\0\11\166\11\0"+
    "\1\11\1\0\1\165\1\167\1\166\1\170\1\165\1\166"+
    "\1\11\1\0\1\166\1\165\1\0\2\166\1\11\1\0"+
    "\3\11\4\166\22\165\1\0\3\165\2\166\1\11\5\166"+
    "\7\0\1\11\1\0\7\11\11\166\1\11\5\0\2\15"+
    "\3\0\6\15\1\0\6\15\5\0\34\15\1\0\5\15"+
    "\20\0\1\171\10\15\1\0\1\15\4\0\2\15\3\0"+
    "\6\15\1\0\6\15\5\0\3\15\1\172\30\15\1\0"+
    "\5\15\20\0\11\15\1\0\1\15\23\0\1\173\110\0"+
    "\1\174\3\0\1\102\7\0\1\174\1\0\1\175\1\102"+
    "\2\0\1\102\2\0\1\176\5\102\1\177\1\200\1\201"+
    "\1\202\1\0\1\203\2\0\1\204\1\0\1\205\1\206"+
    "\1\0\1\207\1\210\1\203\1\200\1\0\1\174\2\0"+
    "\1\200\1\211\1\212\1\0\1\102\3\0\1\102\22\0"+
    "\1\102\7\0\1\174\4\0\2\15\3\0\6\15\1\0"+
    "\5\15\1\213\5\0\34\15\1\0\5\15\20\0\11\15"+
    "\1\0\1\15\4\0\2\15\3\0\6\15\1\0\6\15"+
    "\5\0\34\15\1\0\5\15\20\0\2\15\1\214\6\15"+
    "\1\0\1\15\4\0\2\15\3\0\6\15\1\0\6\15"+
    "\5\0\1\15\1\215\1\216\31\15\1\0\5\15\20\0"+
    "\11\15\1\0\1\15\74\0\1\217\37\0\2\15\3\0"+
    "\6\15\1\0\6\15\5\0\2\15\1\220\31\15\1\0"+
    "\5\15\20\0\11\15\1\0\1\15\3\115\1\0\124\115"+
    "\4\0\2\15\3\0\6\15\1\0\6\15\5\0\34\15"+
    "\1\0\5\15\20\0\4\15\1\221\4\15\1\0\1\15"+
    "\4\0\2\15\3\0\6\15\1\0\6\15\5\0\34\15"+
    "\1\0\5\15\20\0\1\222\10\15\1\0\1\15\4\0"+
    "\2\15\3\0\6\15\1\0\6\15\5\0\34\15\1\0"+
    "\5\15\20\0\4\15\1\223\4\15\1\0\1\15\4\0"+
    "\2\15\3\0\6\15\1\0\6\15\5\0\1\15\1\224"+
    "\32\15\1\0\5\15\20\0\1\225\10\15\1\0\1\15"+
    "\4\0\2\15\3\0\6\15\1\0\6\15\5\0\34\15"+
    "\1\0\5\15\20\0\6\15\1\226\2\15\1\0\1\15"+
    "\126\0\1\227\5\0\2\15\3\0\6\15\1\0\6\15"+
    "\5\0\1\15\1\230\32\15\1\0\5\15\20\0\11\15"+
    "\1\0\1\15\4\0\2\15\3\0\6\15\1\0\6\15"+
    "\5\0\34\15\1\0\5\15\20\0\2\15\1\231\6\15"+
    "\1\0\1\15\4\0\2\15\3\0\6\15\1\0\6\15"+
    "\5\0\34\15\1\0\1\15\1\232\3\15\20\0\11\15"+
    "\1\0\1\15\4\0\2\15\3\0\6\15\1\0\6\15"+
    "\5\0\34\15\1\0\5\15\20\0\4\15\1\233\4\15"+
    "\1\0\1\15\4\0\2\15\3\0\6\15\1\0\6\15"+
    "\5\0\34\15\1\0\5\15\20\0\1\234\10\15\1\0"+
    "\1\15\4\0\2\15\3\0\6\15\1\0\5\15\1\235"+
    "\5\0\34\15\1\0\5\15\20\0\11\15\1\0\1\15"+
    "\4\0\2\15\3\0\6\15\1\0\6\15\5\0\34\15"+
    "\1\0\1\15\1\236\3\15\20\0\11\15\1\0\1\15"+
    "\4\0\2\15\3\0\6\15\1\0\6\15\5\0\3\15"+
    "\1\237\30\15\1\0\5\15\20\0\11\15\1\0\1\15"+
    "\20\0\1\140\40\0\1\140\45\0\1\140\4\0\1\141"+
    "\13\0\3\141\2\0\1\141\6\0\1\141\1\0\1\141"+
    "\10\0\1\141\1\0\2\141\1\0\2\141\3\0\1\141"+
    "\6\0\2\141\35\0\1\141\26\0\1\144\172\0\1\240"+
    "\37\0\3\146\22\0\1\72\142\0\1\241\5\0\1\242"+
    "\2\0\1\243\72\0\2\72\3\0\1\72\3\0\4\72"+
    "\5\0\22\72\1\0\3\72\13\0\1\72\67\0\1\242"+
    "\10\0\1\244\120\0\1\72\142\0\1\72\112\0\1\245"+
    "\2\0\1\72\1\0\1\246\12\0\1\72\1\0\1\247"+
    "\112\0\1\72\121\0\1\250\2\0\1\251\1\155\1\0"+
    "\1\252\15\0\1\72\116\0\1\244\126\0\1\247\5\0"+
    "\1\72\112\0\1\72\4\0\1\242\122\0\1\72\12\0"+
    "\1\72\72\0\1\72\40\0\1\72\45\0\1\72\4\0"+
    "\1\72\13\0\3\72\2\0\1\72\6\0\1\72\1\0"+
    "\1\72\10\0\1\72\1\0\2\72\1\0\2\72\3\0"+
    "\1\72\6\0\2\72\35\0\1\72\4\0\2\165\3\0"+
    "\6\165\1\0\6\165\5\0\34\165\1\0\5\165\7\0"+
    "\1\75\10\0\11\165\1\0\1\165\4\0\2\166\3\0"+
    "\6\166\1\0\6\166\5\0\34\166\1\0\5\166\20\0"+
    "\11\166\1\0\1\166\4\0\2\165\1\0\1\11\1\0"+
    "\1\165\1\167\1\165\1\167\2\165\1\11\6\165\1\11"+
    "\1\0\3\11\34\165\1\11\5\165\7\0\1\76\1\0"+
    "\7\11\11\165\1\11\1\165\4\0\2\166\1\0\1\11"+
    "\1\0\1\166\1\170\1\166\1\170\2\166\1\11\6\166"+
    "\1\11\1\0\3\11\34\166\1\11\5\166\7\0\1\11"+
    "\1\0\7\11\11\166\1\11\1\166\4\0\2\15\3\0"+
    "\6\15\1\0\6\15\5\0\34\15\1\0\1\15\1\253"+
    "\3\15\20\0\11\15\1\0\1\15\4\0\2\15\3\0"+
    "\6\15\1\0\6\15\5\0\34\15\1\0\5\15\20\0"+
    "\1\254\10\15\1\0\1\15\4\0\1\174\13\0\1\174"+
    "\2\0\1\173\35\0\1\174\45\0\1\174\41\0\1\255"+
    "\5\0\1\256\2\0\1\257\72\0\2\102\3\0\1\102"+
    "\3\0\4\102\5\0\22\102\1\0\3\102\13\0\1\102"+
    "\67\0\1\256\10\0\1\260\120\0\1\102\142\0\1\102"+
    "\112\0\1\261\2\0\1\262\1\0\1\263\12\0\1\102"+
    "\1\0\1\264\112\0\1\102\121\0\1\265\2\0\1\266"+
    "\1\203\1\0\1\267\15\0\1\102\116\0\1\260\126\0"+
    "\1\264\5\0\1\102\112\0\1\102\4\0\1\256\122\0"+
    "\1\102\12\0\1\102\72\0\1\270\40\0\1\270\45\0"+
    "\1\270\4\0\1\271\13\0\3\271\2\0\1\271\6\0"+
    "\1\271\1\0\1\271\10\0\1\271\1\0\2\271\1\0"+
    "\2\271\3\0\1\271\6\0\2\271\35\0\1\271\4\0"+
    "\2\15\3\0\6\15\1\0\6\15\5\0\34\15\1\0"+
    "\5\15\20\0\3\15\1\272\5\15\1\0\1\15\4\0"+
    "\2\15\3\0\6\15\1\0\6\15\5\0\3\15\1\273"+
    "\30\15\1\0\5\15\20\0\11\15\1\0\1\15\4\0"+
    "\2\15\3\0\6\15\1\0\6\15\5\0\3\15\1\274"+
    "\30\15\1\0\5\15\20\0\11\15\1\0\1\15\4\0"+
    "\2\15\3\0\6\15\1\0\6\15\5\0\34\15\1\0"+
    "\3\15\1\275\1\15\20\0\11\15\1\0\1\15\25\0"+
    "\1\276\106\0\2\15\3\0\6\15\1\0\6\15\5\0"+
    "\3\15\1\277\30\15\1\0\1\15\1\300\3\15\20\0"+
    "\11\15\1\0\1\15\4\0\2\15\3\0\6\15\1\0"+
    "\6\15\5\0\32\15\1\301\1\15\1\0\5\15\20\0"+
    "\11\15\1\0\1\15\4\0\2\15\3\0\6\15\1\0"+
    "\6\15\5\0\34\15\1\0\1\15\1\302\3\15\20\0"+
    "\11\15\1\0\1\15\4\0\2\15\3\0\6\15\1\0"+
    "\6\15\5\0\32\15\1\303\1\15\1\0\5\15\20\0"+
    "\11\15\1\0\1\15\4\0\2\15\3\0\6\15\1\0"+
    "\6\15\5\0\34\15\1\0\3\15\1\304\1\15\20\0"+
    "\11\15\1\0\1\15\4\0\2\15\3\0\6\15\1\0"+
    "\6\15\5\0\34\15\1\0\5\15\20\0\2\15\1\305"+
    "\6\15\1\0\1\15\4\0\2\15\3\0\6\15\1\0"+
    "\6\15\5\0\34\15\1\0\5\15\20\0\2\15\1\306"+
    "\6\15\1\0\1\15\2\227\2\0\73\227\1\0\26\227"+
    "\1\307\1\227\4\0\2\15\3\0\6\15\1\0\6\15"+
    "\5\0\34\15\1\0\1\15\1\310\3\15\20\0\11\15"+
    "\1\0\1\15\4\0\2\15\3\0\6\15\1\0\6\15"+
    "\5\0\34\15\1\0\4\15\1\311\20\0\11\15\1\0"+
    "\1\15\4\0\2\15\3\0\6\15\1\0\6\15\5\0"+
    "\34\15\1\0\1\15\1\312\3\15\20\0\11\15\1\0"+
    "\1\15\4\0\2\15\3\0\6\15\1\0\6\15\5\0"+
    "\3\15\1\313\30\15\1\0\5\15\20\0\11\15\1\0"+
    "\1\15\4\0\2\15\3\0\6\15\1\0\6\15\5\0"+
    "\34\15\1\0\3\15\1\314\1\15\20\0\11\15\1\0"+
    "\1\15\4\0\2\15\3\0\6\15\1\0\6\15\5\0"+
    "\2\15\1\315\31\15\1\0\5\15\20\0\11\15\1\0"+
    "\1\15\4\0\2\15\3\0\6\15\1\0\6\15\5\0"+
    "\34\15\1\0\5\15\20\0\1\15\1\316\7\15\1\0"+
    "\1\15\72\0\1\317\104\0\1\72\121\0\1\72\147\0"+
    "\1\72\121\0\1\72\130\0\1\72\121\0\1\72\120\0"+
    "\1\72\140\0\1\72\131\0\1\72\123\0\1\72\5\0"+
    "\1\72\57\0\2\15\3\0\6\15\1\0\6\15\5\0"+
    "\34\15\1\0\5\15\20\0\1\320\10\15\1\0\1\15"+
    "\47\0\1\102\121\0\1\102\147\0\1\102\121\0\1\102"+
    "\130\0\1\102\76\0\1\173\20\0\1\102\131\0\1\102"+
    "\120\0\1\102\140\0\1\102\131\0\1\102\123\0\1\102"+
    "\5\0\1\102\73\0\1\270\2\0\1\173\35\0\1\270"+
    "\45\0\1\270\4\0\1\271\13\0\3\271\1\173\1\0"+
    "\1\271\6\0\1\271\1\0\1\271\10\0\1\271\1\0"+
    "\2\271\1\0\2\271\3\0\1\271\6\0\2\271\35\0"+
    "\1\271\4\0\2\15\3\0\6\15\1\0\6\15\5\0"+
    "\34\15\1\0\5\15\20\0\1\15\1\321\7\15\1\0"+
    "\1\15\4\0\2\15\3\0\6\15\1\0\6\15\5\0"+
    "\34\15\1\0\5\15\20\0\3\15\1\322\5\15\1\0"+
    "\1\15\4\0\2\15\3\0\6\15\1\0\6\15\5\0"+
    "\1\323\33\15\1\0\5\15\20\0\11\15\1\0\1\15"+
    "\75\0\1\324\36\0\2\15\3\0\6\15\1\0\6\15"+
    "\5\0\34\15\1\0\5\15\20\0\1\15\1\325\7\15"+
    "\1\0\1\15\4\0\2\15\3\0\6\15\1\0\6\15"+
    "\5\0\34\15\1\0\3\15\1\326\1\15\20\0\11\15"+
    "\1\0\1\15\4\0\2\15\3\0\6\15\1\0\6\15"+
    "\5\0\2\15\1\327\31\15\1\0\5\15\20\0\11\15"+
    "\1\0\1\15\4\0\2\15\3\0\6\15\1\0\6\15"+
    "\5\0\2\15\1\330\31\15\1\0\5\15\20\0\11\15"+
    "\1\0\1\15\4\0\2\15\3\0\6\15\1\0\6\15"+
    "\5\0\33\15\1\331\1\0\5\15\20\0\11\15\1\0"+
    "\1\15\4\0\2\15\3\0\6\15\1\0\6\15\5\0"+
    "\3\15\1\332\30\15\1\0\5\15\20\0\11\15\1\0"+
    "\1\15\4\0\2\15\3\0\6\15\1\0\6\15\5\0"+
    "\34\15\1\0\5\15\20\0\7\15\1\333\1\15\1\0"+
    "\1\15\2\227\2\0\63\227\1\334\7\227\1\0\26\227"+
    "\1\307\1\227\4\0\2\15\3\0\6\15\1\0\6\15"+
    "\5\0\1\15\1\335\32\15\1\0\5\15\20\0\11\15"+
    "\1\0\1\15\4\0\2\15\3\0\6\15\1\0\6\15"+
    "\5\0\34\15\1\0\4\15\1\336\20\0\11\15\1\0"+
    "\1\15\4\0\2\15\3\0\6\15\1\0\6\15\5\0"+
    "\34\15\1\0\1\15\1\337\3\15\20\0\11\15\1\0"+
    "\1\15\4\0\2\15\3\0\6\15\1\0\6\15\5\0"+
    "\34\15\1\0\3\15\1\340\1\15\20\0\11\15\1\0"+
    "\1\15\73\0\1\341\40\0\2\15\3\0\6\15\1\0"+
    "\6\15\5\0\34\15\1\0\1\15\1\342\3\15\20\0"+
    "\11\15\1\0\1\15\4\0\2\15\3\0\6\15\1\0"+
    "\6\15\5\0\34\15\1\0\5\15\20\0\1\15\1\343"+
    "\7\15\1\0\1\15\4\0\2\15\3\0\6\15\1\0"+
    "\6\15\5\0\34\15\1\0\3\15\1\344\1\15\20\0"+
    "\11\15\1\0\1\15\21\0\1\345\112\0\2\15\3\0"+
    "\6\15\1\0\6\15\5\0\34\15\1\0\5\15\20\0"+
    "\1\15\1\346\7\15\1\0\1\15\4\0\2\15\3\0"+
    "\6\15\1\0\6\15\5\0\34\15\1\0\2\15\1\347"+
    "\2\15\20\0\11\15\1\0\1\15\4\0\2\15\3\0"+
    "\6\15\1\0\6\15\5\0\34\15\1\0\5\15\20\0"+
    "\2\15\1\350\6\15\1\0\1\15\4\0\2\15\3\0"+
    "\6\15\1\0\6\15\5\0\34\15\1\0\5\15\20\0"+
    "\2\15\1\351\6\15\1\0\1\15\4\0\2\15\3\0"+
    "\6\15\1\0\6\15\5\0\2\15\1\352\31\15\1\0"+
    "\5\15\20\0\1\15\1\353\7\15\1\0\1\15\4\0"+
    "\2\15\3\0\6\15\1\0\6\15\5\0\34\15\1\0"+
    "\4\15\1\354\20\0\11\15\1\0\1\15\4\0\2\15"+
    "\3\0\6\15\1\0\6\15\5\0\34\15\1\0\5\15"+
    "\20\0\4\15\1\355\4\15\1\0\1\15\2\227\2\0"+
    "\72\227\1\356\1\0\26\227\1\307\1\227\4\0\2\15"+
    "\3\0\6\15\1\0\6\15\5\0\34\15\1\0\1\15"+
    "\1\357\3\15\20\0\11\15\1\0\1\15\4\0\2\15"+
    "\3\0\6\15\1\0\6\15\5\0\34\15\1\0\2\15"+
    "\1\360\2\15\20\0\11\15\1\0\1\15\4\0\2\15"+
    "\3\0\6\15\1\0\6\15\5\0\1\15\1\361\32\15"+
    "\1\0\5\15\20\0\11\15\1\0\1\15\74\0\1\362"+
    "\37\0\2\15\3\0\6\15\1\0\6\15\5\0\34\15"+
    "\1\0\5\15\20\0\2\15\1\363\6\15\1\0\1\15"+
    "\4\0\2\15\3\0\6\15\1\0\6\15\5\0\34\15"+
    "\1\0\4\15\1\364\20\0\11\15\1\0\1\15\65\0"+
    "\1\365\46\0\2\15\3\0\6\15\1\0\6\15\5\0"+
    "\34\15\1\0\4\15\1\366\20\0\11\15\1\0\1\15"+
    "\4\0\2\15\3\0\6\15\1\0\1\15\1\367\4\15"+
    "\5\0\34\15\1\0\5\15\20\0\11\15\1\0\1\15"+
    "\4\0\2\15\3\0\6\15\1\0\6\15\5\0\34\15"+
    "\1\0\1\15\1\370\3\15\20\0\11\15\1\0\1\15"+
    "\4\0\2\15\3\0\6\15\1\0\6\15\5\0\34\15"+
    "\1\0\3\15\1\371\1\15\20\0\11\15\1\0\1\15"+
    "\75\0\1\372\36\0\2\15\3\0\6\15\1\0\6\15"+
    "\5\0\34\15\1\0\2\15\1\373\2\15\20\0\11\15"+
    "\1\0\1\15\25\0\1\374\106\0\2\15\3\0\6\15"+
    "\1\0\6\15\5\0\34\15\1\0\1\15\1\375\3\15"+
    "\20\0\11\15\1\0\1\15\4\0\2\15\3\0\6\15"+
    "\1\0\6\15\5\0\34\15\1\0\1\15\1\376\3\15"+
    "\20\0\11\15\1\0\1\15\21\0\1\377\177\0\1\u0100"+
    "\42\0\2\15\3\0\6\15\1\0\5\15\1\u0101\5\0"+
    "\34\15\1\0\5\15\20\0\11\15\1\0\1\15\65\0"+
    "\1\u0102\140\0\1\u0103\56\0\1\u0104\173\0\1\u0105\134\0"+
    "\1\u0106\31\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18128];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\1\1\11\1\1\1\11\1\1\1\11\15\1"+
    "\1\11\11\1\5\11\1\1\1\11\16\1\1\11\4\1"+
    "\1\0\1\11\2\0\4\1\1\0\1\11\1\0\4\1"+
    "\1\0\30\1\2\11\1\1\20\0\6\1\1\11\17\0"+
    "\4\1\1\0\7\1\1\0\10\1\13\0\2\1\15\0"+
    "\4\1\1\0\10\1\1\0\7\1\1\0\4\1\1\0"+
    "\7\1\1\0\4\1\1\0\3\1\1\0\14\1\1\0"+
    "\2\1\1\0\4\1\1\0\1\1\1\0\2\1\2\0"+
    "\1\1\1\0\1\11\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char[] zzBuffer = new char[0];

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    private int commentStart;
    private int commentDepth;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _HaskellLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _HaskellLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3364) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer.toString().toCharArray();
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return TokenPackage.getBLOCK_COMMENT();
          }
        case 75: break;
        case 2: 
          { return TokenType.BAD_CHARACTER;
          }
        case 76: break;
        case 3: 
          { return TokenType.WHITE_SPACE;
          }
        case 77: break;
        case 4: 
          { return TokenPackage.getNEW_LINE();
          }
        case 78: break;
        case 5: 
          { return HaskellLexerTokens.INTEGER;
          }
        case 79: break;
        case 6: 
          { return HaskellLexerTokens.BACKQUOTE;
          }
        case 80: break;
        case 7: 
          { return HaskellLexerTokens.VARSYM;
          }
        case 81: break;
        case 8: 
          { return HaskellLexerTokens.CONID;
          }
        case 82: break;
        case 9: 
          { return HaskellLexerTokens.VARID;
          }
        case 83: break;
        case 10: 
          { return HaskellLexerTokens.UNDERSCORE;
          }
        case 84: break;
        case 11: 
          { return HaskellLexerTokens.COLON;
          }
        case 85: break;
        case 12: 
          { return TokenPackage.getTH_VAR_QUOTE();
          }
        case 86: break;
        case 13: 
          { return HaskellLexerTokens.LAM;
          }
        case 87: break;
        case 14: 
          { return HaskellLexerTokens.CBRACK;
          }
        case 88: break;
        case 15: 
          { return HaskellLexerTokens.AT;
          }
        case 89: break;
        case 16: 
          { return HaskellLexerTokens.OCURLY;
          }
        case 90: break;
        case 17: 
          { return HaskellLexerTokens.CCURLY;
          }
        case 91: break;
        case 18: 
          { return HaskellLexerTokens.OBRACK;
          }
        case 92: break;
        case 19: 
          { return HaskellLexerTokens.OPAREN;
          }
        case 93: break;
        case 20: 
          { return HaskellLexerTokens.CPAREN;
          }
        case 94: break;
        case 21: 
          { return HaskellLexerTokens.SEMI;
          }
        case 95: break;
        case 22: 
          { return HaskellLexerTokens.DOT;
          }
        case 96: break;
        case 23: 
          { return HaskellLexerTokens.COMMA;
          }
        case 97: break;
        case 24: 
          { return HaskellLexerTokens.EQUAL;
          }
        case 98: break;
        case 25: 
          { return HaskellLexerTokens.VBAR;
          }
        case 99: break;
        case 26: 
          { return HaskellLexerTokens.RARROW;
          }
        case 100: break;
        case 27: 
          { return HaskellLexerTokens.TILDE;
          }
        case 101: break;
        case 28: 
          { return HaskellLexerTokens.BANG;
          }
        case 102: break;
        case 29: 
          { 
          }
        case 103: break;
        case 30: 
          { return HaskellLexerTokens.STRING;
          }
        case 104: break;
        case 31: 
          { return HaskellLexerTokens.DCOLON;
          }
        case 105: break;
        case 32: 
          { return TokenPackage.getTH_TY_QUOTE();
          }
        case 106: break;
        case 33: 
          { return HaskellLexerTokens.DO;
          }
        case 107: break;
        case 34: 
          { return HaskellLexerTokens.AS;
          }
        case 108: break;
        case 35: 
          { return HaskellLexerTokens.OF;
          }
        case 109: break;
        case 36: 
          { return TokenPackage.getEND_OF_LINE_COMMENT();
          }
        case 110: break;
        case 37: 
          { return HaskellLexerTokens.IF;
          }
        case 111: break;
        case 38: 
          { return HaskellLexerTokens.IN;
          }
        case 112: break;
        case 39: 
          { yybegin(BLOCK_COMMENT);
    commentDepth = 0;
    commentStart = getTokenStart();
          }
        case 113: break;
        case 40: 
          { return HaskellLexerTokens.DOTDOT;
          }
        case 114: break;
        case 41: 
          { return HaskellLexerTokens.DARROW;
          }
        case 115: break;
        case 42: 
          { return HaskellLexerTokens.LARROW;
          }
        case 116: break;
        case 43: 
          { if (commentDepth > 0) {
            commentDepth--;
        }
        else {
             int state = yystate();
             yybegin(YYINITIAL);
             zzStartRead = commentStart;
             return TokenPackage.getBLOCK_COMMENT();
        }
          }
        case 117: break;
        case 44: 
          { commentDepth++;
          }
        case 118: break;
        case 45: 
          { return HaskellLexerTokens.QCONID;
          }
        case 119: break;
        case 46: 
          { return HaskellLexerTokens.QVARID;
          }
        case 120: break;
        case 47: 
          { return HaskellLexerTokens.CHAR;
          }
        case 121: break;
        case 48: 
          { return HaskellLexerTokens.LET;
          }
        case 122: break;
        case 49: 
          { return HaskellLexerTokens.CASE;
          }
        case 123: break;
        case 50: 
          { return HaskellLexerTokens.DATA;
          }
        case 124: break;
        case 51: 
          { return HaskellLexerTokens.ELSE;
          }
        case 125: break;
        case 52: 
          { return HaskellLexerTokens.SAFE;
          }
        case 126: break;
        case 53: 
          { return HaskellLexerTokens.THEN;
          }
        case 127: break;
        case 54: 
          { return HaskellLexerTokens.TYPE;
          }
        case 128: break;
        case 55: 
          { return HaskellLexerTokens.CLASS;
          }
        case 129: break;
        case 56: 
          { return HaskellLexerTokens.INFIX;
          }
        case 130: break;
        case 57: 
          { return HaskellLexerTokens.WHERE;
          }
        case 131: break;
        case 58: 
          { return HaskellLexerTokens.MODULE;
          }
        case 132: break;
        case 59: 
          { return HaskellLexerTokens.FORALL;
          }
        case 133: break;
        case 60: 
          { return HaskellLexerTokens.EXPORT;
          }
        case 134: break;
        case 61: 
          { return HaskellLexerTokens.IMPORT;
          }
        case 135: break;
        case 62: 
          { return HaskellLexerTokens.INFIXR;
          }
        case 136: break;
        case 63: 
          { return HaskellLexerTokens.INFIXL;
          }
        case 137: break;
        case 64: 
          { return TokenPackage.getPRAGMA();
          }
        case 138: break;
        case 65: 
          { return HaskellLexerTokens.UNSAFE;
          }
        case 139: break;
        case 66: 
          { return HaskellLexerTokens.HIDING;
          }
        case 140: break;
        case 67: 
          { return HaskellLexerTokens.DEFAULT;
          }
        case 141: break;
        case 68: 
          { return HaskellLexerTokens.FOREIGN;
          }
        case 142: break;
        case 69: 
          { return HaskellLexerTokens.NEWTYPE;
          }
        case 143: break;
        case 70: 
          { return HaskellLexerTokens.DERIVING;
          }
        case 144: break;
        case 71: 
          { return HaskellLexerTokens.INSTANCE;
          }
        case 145: break;
        case 72: 
          { return HaskellLexerTokens.QUALIFIED;
          }
        case 146: break;
        case 73: 
          { yybegin(TEX); return TokenPackage.getBLOCK_COMMENT();
          }
        case 147: break;
        case 74: 
          { yybegin(YYINITIAL); return TokenPackage.getBLOCK_COMMENT();
          }
        case 148: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case BLOCK_COMMENT: {
              int state = yystate();
        yybegin(YYINITIAL);
        zzStartRead = commentStart;
        return TokenPackage.getBLOCK_COMMENT();
            }
            case 263: break;
            default:
            return null;
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
