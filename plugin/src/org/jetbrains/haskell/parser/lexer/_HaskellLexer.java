/* The following code was generated by JFlex 1.5.1 */

package org.jetbrains.haskell.parser.lexer;

import java.util.*;
import com.intellij.lexer.*;
import com.intellij.psi.*;
import org.jetbrains.haskell.parser.token.*;
import com.intellij.psi.tree.IElementType;
import org.jetbrains.haskell.parser.cpp.CPPTokens;
import org.jetbrains.grammar.HaskellLexerTokens;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.1
 * from the specification file <tt>/Users/atsky/work/haskell-idea-plugin/plugin/src/org/jetbrains/haskell/parser/lexer/Haskell.flex</tt>
 */
class _HaskellLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int BLOCK_COMMENT = 2;
  public static final int TEX = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\3\0\1\5\1\0\1\1\3\0\1\1\1\3\1\12\1\11\1\11"+
    "\22\0\1\2\1\123\1\10\1\112\1\7\1\7\1\13\1\34\1\107"+
    "\1\110\1\37\1\7\1\115\1\100\1\114\1\7\1\133\1\72\1\72"+
    "\1\72\1\72\3\31\2\4\1\30\1\113\1\117\1\116\1\120\1\7"+
    "\1\42\1\62\1\65\1\63\1\33\1\60\1\66\1\75\1\55\1\71"+
    "\1\26\1\64\1\52\1\74\1\50\1\54\1\76\1\61\1\70\1\53"+
    "\1\56\1\51\1\67\1\132\1\57\1\73\1\26\1\106\1\40\1\41"+
    "\1\43\1\27\1\6\1\47\1\17\1\32\1\36\1\101\1\45\1\102"+
    "\1\126\1\35\2\24\1\21\1\16\1\103\1\20\1\127\1\131\1\46"+
    "\1\14\1\124\1\125\1\44\1\130\1\77\1\15\1\24\1\104\1\111"+
    "\1\105\1\122\6\0\1\12\33\0\11\7\1\24\2\7\1\0\4\7"+
    "\2\0\1\7\1\24\3\7\1\0\1\24\1\7\3\0\1\7\27\22"+
    "\1\7\7\22\30\24\1\7\10\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\2\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\2\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\2\22\1\24\1\22\1\24\1\22\3\24\2\22"+
    "\1\24\1\22\1\24\2\22\1\24\3\22\2\24\4\22\1\24\2\22"+
    "\1\24\3\22\3\24\2\22\1\24\2\22\1\24\1\22\1\24\1\22"+
    "\1\24\2\22\1\24\1\22\2\24\1\22\1\24\2\22\1\24\3\22"+
    "\1\24\1\22\1\24\2\22\2\24\1\0\1\22\3\24\4\0\1\22"+
    "\1\0\1\24\1\22\1\0\1\24\1\22\1\0\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\2\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\2\24\1\22\1\0\1\24\1\22\1\24\3\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\7\24\2\22\1\24\2\22"+
    "\2\24\1\22\1\24\4\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\105\24\1\0\44\24\7\0\2\24\4\7\14\0\16\7"+
    "\5\24\7\7\1\0\1\7\1\0\21\7\105\0\1\24\52\0\1\22"+
    "\1\24\1\22\1\24\1\0\1\7\1\22\1\24\2\0\4\24\1\7"+
    "\5\0\2\7\1\22\1\7\3\22\1\0\1\22\1\0\2\22\1\24"+
    "\21\22\1\0\11\22\43\24\1\22\2\24\3\22\3\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\5\24\1\22\1\24\1\7\1\22\1\24\2\22\2\24\63\22"+
    "\60\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\7\7\0\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\2\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\2\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\11\0\46\22\3\0\6\7\1\0\47\24\1\0"+
    "\2\7\4\0\1\7\56\0\1\7\1\0\1\7\2\0\1\7\2\0"+
    "\1\7\54\0\2\7\21\0\12\7\13\0\1\7\2\0\2\7\112\0"+
    "\4\7\146\0\1\7\11\0\1\7\12\0\1\7\23\0\2\7\1\0"+
    "\16\7\350\0\4\7\66\0\17\7\37\0\1\7\u0105\0\2\7\12\0"+
    "\1\7\201\0\2\7\6\0\2\7\364\0\2\7\176\0\1\7\202\0"+
    "\10\7\204\0\1\7\371\0\1\7\172\0\1\7\112\0\1\7\17\0"+
    "\1\7\12\0\2\7\245\0\27\7\2\0\6\7\24\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\107\0\1\7\70\0\10\7\1\0"+
    "\6\7\1\0\15\7\157\0\6\7\116\0\2\7\46\22\1\0\1\22"+
    "\5\0\1\22\55\0\1\7\u0264\0\11\7\47\0\12\7\146\0\1\7"+
    "\u026c\0\2\7\54\0\2\7\116\0\3\7\107\0\2\7\235\0\3\7"+
    "\1\0\4\7\44\0\13\7\u0135\0\1\7\3\0\2\7\230\0\42\7"+
    "\36\0\2\7\200\0\7\7\1\0\6\7\254\0\21\7\11\0\11\7"+
    "\177\0\4\7\73\0\5\7\76\0\2\7\100\0\10\7\13\0\1\7"+
    "\54\0\300\24\100\0\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\11\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\11\24\10\22\6\24\2\0\6\22\2\0\10\24\10\22\10\24\10\22"+
    "\6\24\2\0\6\22\2\0\10\24\1\0\1\22\1\0\1\22\1\0"+
    "\1\22\1\0\1\22\10\24\10\22\16\24\2\0\10\24\10\0\10\24"+
    "\10\0\10\24\10\0\5\24\1\0\2\24\4\22\1\0\1\7\1\24"+
    "\3\7\3\24\1\0\2\24\4\22\1\0\3\7\4\24\2\0\2\24"+
    "\4\22\1\0\3\7\10\24\5\22\3\7\2\0\3\24\1\0\2\24"+
    "\4\22\1\0\2\7\21\0\30\7\1\12\1\12\6\0\57\7\22\0"+
    "\1\24\10\0\5\7\1\24\12\0\5\7\1\0\15\24\3\0\33\7"+
    "\105\0\2\7\1\22\4\7\1\22\2\7\1\24\3\22\2\24\3\22"+
    "\1\24\1\7\1\22\3\7\5\22\6\7\1\22\1\7\1\22\1\7"+
    "\1\22\1\7\4\22\1\7\1\24\4\22\1\24\4\0\1\24\2\7"+
    "\2\24\2\22\5\7\1\22\4\24\4\7\1\24\1\7\20\0\20\22"+
    "\20\24\3\0\1\22\1\24\13\0\2\7\1\121\155\7\1\7\u01f3\7"+
    "\14\0\47\7\31\0\13\7\121\0\32\7\32\23\32\25\26\0\u0200\7"+
    "\1\0\165\7\36\0\u03b9\7\3\0\12\7\246\0\57\22\1\0\57\24"+
    "\1\0\1\22\1\24\3\22\2\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\4\22\1\24\1\22\2\24\1\22\10\24\3\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\2\24\6\7\1\22\1\24"+
    "\1\22\1\24\3\0\1\22\1\24\5\0\4\7\1\0\2\7\46\24"+
    "\1\0\1\24\5\0\1\24\102\0\1\7\217\0\57\7\1\0\14\7"+
    "\104\0\32\7\1\0\131\7\14\0\326\7\32\0\14\7\5\0\4\7"+
    "\3\0\31\7\17\0\1\7\5\0\2\7\5\0\3\7\133\0\2\7"+
    "\3\0\1\7\132\0\1\7\224\0\2\7\4\0\12\7\40\0\44\7"+
    "\34\0\37\7\13\0\36\7\10\0\1\7\17\0\40\7\12\0\47\7"+
    "\17\0\77\7\1\0\u0100\7\u19c0\0\100\7\u5690\0\67\7\67\0\2\7"+
    "\u010d\0\3\7\60\0\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\5\0"+
    "\1\7\12\0\1\7\1\0\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\132\0\6\7"+
    "\10\0\27\7\11\0\2\7\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\3\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\12\24"+
    "\1\22\1\24\1\22\1\24\2\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\0\2\7\1\22\1\24\1\22\1\24"+
    "\1\0\1\22\1\24\1\22\1\24\14\0\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\115\0\3\24\55\0"+
    "\4\7\12\0\4\7\72\0\4\7\126\0\2\7\50\0\3\7\63\0"+
    "\2\7\57\0\1\7\141\0\15\7\20\0\2\7\174\0\4\7\27\0"+
    "\3\7\144\0\2\7\20\0\2\7\371\0\1\7\u4f14\0\7\24\14\0"+
    "\5\24\21\0\1\7\210\0\20\7\u017c\0\2\7\274\0\2\7\22\0"+
    "\12\7\26\0\43\7\1\0\23\7\1\0\4\7\225\0\17\7\12\0"+
    "\7\7\32\22\6\7\32\24\13\7\172\0\7\7\1\0\7\7\15\0"+
    "\2\7\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\2\4\10\1\11\2\7\1\12\1\13\1\10\1\14"+
    "\2\10\1\15\1\16\1\17\1\20\3\10\1\21\2\10"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\7\1\30"+
    "\1\31\1\32\1\33\1\7\1\34\1\35\1\36\4\10"+
    "\1\5\3\37\2\1\1\0\1\40\1\0\2\10\1\41"+
    "\1\10\1\11\1\0\1\7\1\42\1\43\2\10\1\0"+
    "\1\44\1\0\1\10\1\45\1\46\1\47\2\10\1\0"+
    "\3\10\1\50\1\51\2\10\1\52\1\53\1\0\1\54"+
    "\1\55\1\0\1\7\1\0\1\56\1\57\1\60\1\61"+
    "\5\10\2\5\1\62\1\63\1\0\1\1\17\0\1\10"+
    "\1\64\1\65\1\66\2\7\2\10\1\67\17\0\6\10"+
    "\1\0\5\10\2\0\1\70\1\71\2\0\5\10\13\0"+
    "\1\10\1\65\1\66\1\10\1\72\15\0\3\10\1\73"+
    "\2\10\1\0\2\10\1\74\1\75\1\10\6\0\1\76"+
    "\1\77\3\10\1\0\1\10\1\100\2\10\1\101\2\10"+
    "\1\0\3\10\17\0\1\102\1\0\1\10\1\103\1\10"+
    "\1\0\1\104\1\105\1\10\1\106\1\107\2\10\1\0"+
    "\1\110\1\111\1\10\20\0\1\112\3\0\1\113\1\114"+
    "\1\10\1\0\1\10\1\115\1\10\1\0\1\116\5\0"+
    "\1\117\2\0\1\120\12\0\1\10\1\0\1\121\1\122"+
    "\10\0\1\123\11\0\1\10\11\0\1\124\1\0\1\125"+
    "\6\0\1\126\1\0\1\127\3\0\1\130\1\131\3\0"+
    "\1\132\4\0\1\133\10\0\1\134\1\0\1\135\2\0"+
    "\1\136\2\0\1\137\4\0\1\140\5\0\1\141\1\0"+
    "\1\142\1\143\1\0\1\144\3\0\1\145\1\146\2\0"+
    "\1\147\2\0\1\150\10\0\1\151\1\152";

  private static int [] zzUnpackAction() {
    int [] result = new int[430];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\134\0\270\0\u0114\0\u0170\0\u0114\0\u01cc\0\u0114"+
    "\0\u0228\0\u0284\0\u02e0\0\u033c\0\u0398\0\u03f4\0\u0450\0\u04ac"+
    "\0\u0508\0\u02e0\0\u0564\0\u05c0\0\u061c\0\u0678\0\u06d4\0\u0228"+
    "\0\u0730\0\u0114\0\u0228\0\u078c\0\u07e8\0\u0844\0\u08a0\0\u08fc"+
    "\0\u0958\0\u09b4\0\u0114\0\u0a10\0\u0a6c\0\u0114\0\u0ac8\0\u0b24"+
    "\0\u0114\0\u0b80\0\u0114\0\u0bdc\0\u0c38\0\u0228\0\u0228\0\u0228"+
    "\0\u0c94\0\u0cf0\0\u0d4c\0\u0da8\0\u0e04\0\u0114\0\u0e60\0\u0ebc"+
    "\0\u0f18\0\u0f74\0\u0284\0\u0114\0\u0fd0\0\u102c\0\u1088\0\u02e0"+
    "\0\u10e4\0\u1140\0\u119c\0\u11f8\0\u0228\0\u0114\0\u1254\0\u12b0"+
    "\0\u130c\0\u0114\0\u1368\0\u13c4\0\u02e0\0\u1420\0\u02e0\0\u147c"+
    "\0\u14d8\0\u1534\0\u1590\0\u15ec\0\u1648\0\u02e0\0\u16a4\0\u1700"+
    "\0\u175c\0\u17b8\0\u0114\0\u1814\0\u0114\0\u0114\0\u1870\0\u18cc"+
    "\0\u1928\0\u0114\0\u0228\0\u0228\0\u0228\0\u1984\0\u19e0\0\u1a3c"+
    "\0\u1a98\0\u1af4\0\u1b50\0\u1bac\0\u0114\0\u0114\0\u1c08\0\u1c64"+
    "\0\u1cc0\0\u1d1c\0\u1d78\0\u1dd4\0\u1e30\0\u1e8c\0\u1ee8\0\u1f44"+
    "\0\u1fa0\0\u1ffc\0\u2058\0\u20b4\0\u2110\0\u216c\0\u21c8\0\u2224"+
    "\0\u02e0\0\u2280\0\u22dc\0\u2338\0\u2394\0\u23f0\0\u244c\0\u0114"+
    "\0\u24a8\0\u2504\0\u2560\0\u25bc\0\u2618\0\u2674\0\u26d0\0\u272c"+
    "\0\u2788\0\u27e4\0\u2840\0\u289c\0\u28f8\0\u2954\0\u29b0\0\u2a0c"+
    "\0\u2a68\0\u2ac4\0\u2b20\0\u2b7c\0\u2bd8\0\u2c34\0\u2c90\0\u2cec"+
    "\0\u2d48\0\u2da4\0\u2e00\0\u2e5c\0\u2eb8\0\u2f14\0\u0114\0\u2f70"+
    "\0\u2fcc\0\u3028\0\u3084\0\u30e0\0\u313c\0\u3198\0\u31f4\0\u3250"+
    "\0\u32ac\0\u3308\0\u3364\0\u33c0\0\u341c\0\u3478\0\u34d4\0\u3530"+
    "\0\u358c\0\u35e8\0\u3644\0\u36a0\0\u36fc\0\u02e0\0\u3758\0\u37b4"+
    "\0\u3810\0\u386c\0\u38c8\0\u3924\0\u3980\0\u39dc\0\u3a38\0\u3a94"+
    "\0\u3af0\0\u3b4c\0\u3ba8\0\u3c04\0\u3c60\0\u3cbc\0\u02e0\0\u3d18"+
    "\0\u3d74\0\u3dd0\0\u3e2c\0\u3e88\0\u02e0\0\u02e0\0\u3ee4\0\u3f40"+
    "\0\u3f9c\0\u3ff8\0\u4054\0\u40b0\0\u410c\0\u02e0\0\u02e0\0\u4168"+
    "\0\u41c4\0\u4220\0\u427c\0\u42d8\0\u02e0\0\u4334\0\u4390\0\u43ec"+
    "\0\u4448\0\u44a4\0\u4500\0\u455c\0\u45b8\0\u4614\0\u4670\0\u46cc"+
    "\0\u4728\0\u4784\0\u47e0\0\u483c\0\u4898\0\u48f4\0\u4950\0\u49ac"+
    "\0\u4a08\0\u4a64\0\u4ac0\0\u4b1c\0\u4b78\0\u4bd4\0\u4c30\0\u4c8c"+
    "\0\u02e0\0\u4ce8\0\u4d44\0\u02e0\0\u02e0\0\u4da0\0\u02e0\0\u02e0"+
    "\0\u4dfc\0\u4e58\0\u4eb4\0\u02e0\0\u02e0\0\u4f10\0\u4f6c\0\u4fc8"+
    "\0\u5024\0\u5080\0\u50dc\0\u5138\0\u5194\0\u51f0\0\u524c\0\u52a8"+
    "\0\u5304\0\u5360\0\u53bc\0\u5418\0\u5474\0\u54d0\0\u3f40\0\u552c"+
    "\0\u5588\0\u55e4\0\u5640\0\u02e0\0\u569c\0\u56f8\0\u5754\0\u02e0"+
    "\0\u57b0\0\u580c\0\u02e0\0\u5868\0\u58c4\0\u5920\0\u597c\0\u59d8"+
    "\0\u3f40\0\u5a34\0\u5a90\0\u3f40\0\u5aec\0\u5b48\0\u5ba4\0\u5c00"+
    "\0\u5c5c\0\u5cb8\0\u5d14\0\u5d70\0\u5dcc\0\u5e28\0\u5e84\0\u5ee0"+
    "\0\u02e0\0\u02e0\0\u5f3c\0\u5f98\0\u5ff4\0\u6050\0\u60ac\0\u6108"+
    "\0\u6164\0\u61c0\0\u3f40\0\u621c\0\u6278\0\u62d4\0\u6330\0\u638c"+
    "\0\u63e8\0\u6444\0\u64a0\0\u64fc\0\u6558\0\u65b4\0\u6610\0\u666c"+
    "\0\u66c8\0\u6724\0\u6780\0\u67dc\0\u6838\0\u6894\0\u3f40\0\u68f0"+
    "\0\u3f40\0\u694c\0\u69a8\0\u6a04\0\u6a60\0\u6abc\0\u6b18\0\u02e0"+
    "\0\u6b74\0\u0114\0\u6bd0\0\u6c2c\0\u6c88\0\u3f40\0\u3f40\0\u6ce4"+
    "\0\u6d40\0\u6d9c\0\u3f40\0\u6df8\0\u6e54\0\u6eb0\0\u6f0c\0\u552c"+
    "\0\u6f68\0\u6fc4\0\u7020\0\u707c\0\u70d8\0\u7134\0\u7190\0\u71ec"+
    "\0\u3f40\0\u7248\0\u3f40\0\u72a4\0\u7300\0\u3f40\0\u735c\0\u73b8"+
    "\0\u3f40\0\u7414\0\u7470\0\u74cc\0\u7528\0\u0114\0\u7584\0\u75e0"+
    "\0\u763c\0\u7698\0\u76f4\0\u7750\0\u77ac\0\u3f40\0\u3f40\0\u7808"+
    "\0\u7864\0\u78c0\0\u791c\0\u7978\0\u3f40\0\u3f40\0\u79d4\0\u7a30"+
    "\0\u3f40\0\u7a8c\0\u7ae8\0\u3f40\0\u7b44\0\u7ba0\0\u7bfc\0\u7c58"+
    "\0\u7cb4\0\u7d10\0\u7d6c\0\u7dc8\0\u3f40\0\u3f40";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[430];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\2\7\1\10\1\11\1\12\1\5"+
    "\1\0\1\11\2\13\1\14\1\13\1\15\1\16\1\17"+
    "\1\20\1\13\1\21\1\17\1\22\1\23\1\7\1\24"+
    "\1\17\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\11\1\13\1\34\1\35\1\36\22\17\1\7\4\17"+
    "\1\13\1\37\1\40\1\13\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\11\1\56\1\57\1\60\1\61\1\13\1\62"+
    "\1\13\1\63\1\64\1\17\1\65\12\66\1\0\65\66"+
    "\1\67\3\66\1\70\27\66\40\71\1\72\73\71\135\0"+
    "\2\5\6\0\1\5\126\0\2\7\23\0\1\7\40\0"+
    "\1\7\40\0\1\7\7\0\1\11\3\0\1\11\7\0"+
    "\1\11\1\0\1\11\2\0\1\11\6\0\2\11\1\0"+
    "\2\11\34\0\1\11\10\0\2\11\1\0\1\11\1\0"+
    "\6\11\10\0\3\73\1\74\4\73\1\74\27\73\1\75"+
    "\73\73\4\0\2\13\6\0\14\13\1\0\6\13\5\0"+
    "\34\13\1\0\3\13\6\0\1\76\11\0\10\13\4\0"+
    "\2\13\6\0\4\13\1\77\7\13\1\0\6\13\5\0"+
    "\34\13\1\0\3\13\6\0\1\76\11\0\10\13\4\0"+
    "\2\13\6\0\14\13\1\0\6\13\5\0\1\13\1\100"+
    "\32\13\1\0\3\13\6\0\1\76\11\0\10\13\4\0"+
    "\2\13\6\0\14\13\1\0\6\13\5\0\34\13\1\0"+
    "\1\101\2\13\6\0\1\76\11\0\10\13\4\0\2\17"+
    "\6\0\14\17\1\0\6\17\5\0\34\17\1\0\3\17"+
    "\6\0\1\102\1\0\1\103\7\0\10\17\4\0\2\17"+
    "\1\0\1\11\3\0\1\11\7\17\1\20\1\17\1\20"+
    "\2\17\1\11\6\17\2\11\1\0\2\11\34\17\1\11"+
    "\3\17\5\0\2\11\1\0\1\104\1\0\6\11\10\17"+
    "\4\0\2\13\1\0\1\11\3\0\1\11\7\13\1\21"+
    "\1\13\1\21\2\13\1\11\6\13\2\11\1\0\2\11"+
    "\34\13\1\11\3\13\5\0\2\11\1\0\1\11\1\0"+
    "\6\11\10\13\7\0\1\11\3\0\1\11\7\0\1\11"+
    "\1\0\1\11\2\0\1\105\6\0\2\11\1\106\2\11"+
    "\34\0\1\11\10\0\2\11\1\0\1\11\1\0\6\11"+
    "\14\0\2\13\6\0\5\13\1\107\6\13\1\0\6\13"+
    "\5\0\3\13\1\110\30\13\1\0\3\13\6\0\1\76"+
    "\11\0\10\13\3\111\1\0\30\111\1\112\3\111\1\113"+
    "\73\111\4\0\2\13\6\0\2\13\1\114\11\13\1\0"+
    "\6\13\5\0\1\13\1\115\32\13\1\0\2\13\1\116"+
    "\6\0\1\76\11\0\10\13\4\0\2\13\6\0\4\13"+
    "\1\117\7\13\1\0\6\13\5\0\3\13\1\120\30\13"+
    "\1\0\1\121\2\13\6\0\1\76\11\0\10\13\7\0"+
    "\1\11\3\0\1\11\7\0\1\11\1\0\1\11\2\0"+
    "\1\11\6\0\2\11\1\0\2\11\34\0\1\11\1\122"+
    "\7\0\2\11\1\0\1\11\1\0\6\11\14\0\2\13"+
    "\6\0\4\13\1\123\7\13\1\0\6\13\5\0\3\13"+
    "\1\124\30\13\1\0\3\13\6\0\1\76\11\0\10\13"+
    "\4\0\2\13\6\0\4\13\1\125\7\13\1\0\6\13"+
    "\5\0\34\13\1\0\3\13\6\0\1\76\11\0\10\13"+
    "\4\0\2\13\6\0\1\126\13\13\1\0\6\13\5\0"+
    "\34\13\1\0\3\13\6\0\1\76\11\0\10\13\7\0"+
    "\1\11\3\0\1\11\7\0\1\11\1\0\1\11\2\0"+
    "\1\11\6\0\2\11\1\0\2\11\34\0\1\127\10\0"+
    "\2\11\1\0\1\11\1\0\2\11\1\56\3\11\14\0"+
    "\2\13\6\0\5\13\1\130\6\13\1\0\6\13\5\0"+
    "\34\13\1\0\3\13\6\0\1\76\11\0\10\13\4\0"+
    "\2\13\6\0\14\13\1\0\6\13\5\0\34\13\1\0"+
    "\1\131\2\13\6\0\1\76\11\0\10\13\100\0\1\132"+
    "\63\0\1\133\214\0\1\134\1\135\30\0\1\11\3\0"+
    "\1\11\7\0\1\11\1\0\1\11\2\0\1\11\6\0"+
    "\2\11\1\0\2\11\34\0\1\11\7\0\1\136\2\11"+
    "\1\0\1\11\1\0\6\11\17\0\1\11\3\0\1\11"+
    "\7\0\1\11\1\0\1\11\2\0\1\11\4\0\1\137"+
    "\1\0\2\11\1\0\2\11\34\0\1\140\1\141\6\0"+
    "\1\142\2\11\1\0\1\11\1\0\6\11\17\0\1\11"+
    "\3\0\1\11\7\0\1\11\1\0\1\11\2\0\1\11"+
    "\6\0\2\11\1\0\2\11\34\0\1\11\10\0\2\11"+
    "\1\0\1\143\1\0\6\11\17\0\1\11\3\0\1\11"+
    "\7\0\1\11\1\0\1\11\2\0\1\11\6\0\2\11"+
    "\1\0\2\11\34\0\1\11\10\0\2\11\1\0\1\11"+
    "\1\0\2\11\1\144\3\11\17\0\1\11\3\0\1\11"+
    "\7\0\1\11\1\0\1\11\2\0\1\11\6\0\2\11"+
    "\1\0\2\11\34\0\1\145\10\0\2\11\1\0\1\11"+
    "\1\0\6\11\14\0\2\13\6\0\1\13\1\146\12\13"+
    "\1\0\6\13\5\0\34\13\1\0\3\13\6\0\1\76"+
    "\11\0\2\13\1\147\5\13\4\0\2\13\6\0\14\13"+
    "\1\0\4\13\1\150\1\13\5\0\34\13\1\0\3\13"+
    "\6\0\1\76\11\0\10\13\4\0\2\13\6\0\14\13"+
    "\1\0\6\13\5\0\34\13\1\0\3\13\6\0\1\76"+
    "\11\0\2\13\1\151\5\13\4\0\2\13\6\0\14\13"+
    "\1\0\6\13\5\0\34\13\1\0\3\13\6\0\1\76"+
    "\11\0\1\13\1\152\6\13\4\0\2\7\12\0\1\153"+
    "\10\0\1\7\22\0\1\153\2\0\1\154\12\0\1\7"+
    "\4\0\1\154\33\0\1\7\105\0\1\155\126\0\1\156"+
    "\33\0\40\71\1\0\73\71\17\0\1\157\20\0\1\160"+
    "\74\0\3\161\1\73\3\0\1\73\1\161\1\0\1\73"+
    "\3\0\1\73\1\162\10\0\1\73\1\0\1\163\1\73"+
    "\3\0\1\73\2\0\1\164\4\73\1\165\1\166\1\167"+
    "\1\170\1\0\1\171\2\0\1\172\1\0\1\173\1\174"+
    "\1\0\1\175\1\176\1\171\1\166\1\0\1\73\2\0"+
    "\1\166\1\0\1\177\3\0\1\73\20\0\1\73\6\0"+
    "\1\73\112\0\1\76\25\0\2\13\6\0\14\13\1\0"+
    "\5\13\1\200\5\0\34\13\1\0\3\13\6\0\1\76"+
    "\11\0\10\13\4\0\2\13\6\0\14\13\1\0\6\13"+
    "\5\0\34\13\1\0\3\13\6\0\1\76\11\0\1\201"+
    "\7\13\112\0\1\102\35\0\6\202\2\203\2\202\1\203"+
    "\1\202\2\0\1\202\1\203\1\0\2\202\5\0\4\202"+
    "\22\203\1\0\4\203\1\202\1\0\3\202\20\0\6\202"+
    "\1\203\10\0\1\11\3\0\1\11\6\202\1\203\1\204"+
    "\1\202\1\205\1\203\1\202\1\11\1\0\1\202\1\203"+
    "\1\0\2\202\2\11\1\0\2\11\4\202\22\203\1\0"+
    "\4\203\1\202\1\11\3\202\5\0\2\11\1\0\1\11"+
    "\1\0\6\11\6\202\1\203\5\0\2\13\6\0\14\13"+
    "\1\0\6\13\5\0\3\13\1\206\30\13\1\0\3\13"+
    "\6\0\1\76\11\0\10\13\4\0\2\13\6\0\1\207"+
    "\13\13\1\0\6\13\5\0\34\13\1\0\3\13\6\0"+
    "\1\76\11\0\10\13\34\0\1\210\103\0\1\211\3\0"+
    "\1\111\2\0\1\111\3\0\1\111\1\212\10\0\1\211"+
    "\1\0\1\213\1\111\3\0\1\111\2\0\1\214\4\111"+
    "\1\215\1\216\1\217\1\220\1\0\1\221\2\0\1\222"+
    "\1\0\1\223\1\224\1\0\1\225\1\226\1\221\1\216"+
    "\1\0\1\211\2\0\1\216\1\0\1\227\3\0\1\111"+
    "\20\0\1\111\6\0\1\211\4\0\2\13\6\0\14\13"+
    "\1\0\6\13\5\0\34\13\1\0\3\13\6\0\1\76"+
    "\11\0\3\13\1\230\4\13\4\0\2\13\6\0\1\231"+
    "\13\13\1\0\6\13\5\0\1\13\1\232\32\13\1\0"+
    "\3\13\6\0\1\76\11\0\10\13\4\0\2\13\6\0"+
    "\14\13\1\0\6\13\5\0\34\13\1\0\3\13\6\0"+
    "\1\76\11\0\1\233\7\13\4\0\2\13\6\0\14\13"+
    "\1\0\6\13\5\0\1\13\1\234\1\235\31\13\1\0"+
    "\3\13\6\0\1\76\11\0\10\13\103\0\1\236\34\0"+
    "\2\13\6\0\14\13\1\0\6\13\5\0\2\13\1\237"+
    "\31\13\1\0\3\13\6\0\1\76\11\0\10\13\4\0"+
    "\2\13\6\0\2\13\1\240\11\13\1\0\6\13\5\0"+
    "\34\13\1\0\3\13\6\0\1\76\11\0\10\13\4\0"+
    "\2\13\6\0\5\13\1\241\6\13\1\0\6\13\5\0"+
    "\34\13\1\0\3\13\6\0\1\76\11\0\10\13\3\127"+
    "\1\0\130\127\4\0\2\13\6\0\1\242\13\13\1\0"+
    "\6\13\5\0\34\13\1\0\3\13\6\0\1\76\11\0"+
    "\10\13\4\0\2\13\6\0\14\13\1\0\6\13\5\0"+
    "\34\13\1\0\3\13\6\0\1\76\11\0\4\13\1\243"+
    "\3\13\112\0\1\244\21\0\3\245\1\0\5\245\2\0"+
    "\121\245\45\0\1\246\75\0\1\11\3\0\1\11\7\0"+
    "\1\11\1\0\1\11\2\0\1\11\6\0\2\11\1\0"+
    "\2\11\34\0\1\11\4\0\1\247\3\0\2\11\1\0"+
    "\1\11\1\0\6\11\31\0\1\250\61\0\1\251\34\0"+
    "\2\13\6\0\14\13\1\0\6\13\5\0\34\13\1\0"+
    "\3\13\6\0\1\76\11\0\3\13\1\252\4\13\4\0"+
    "\2\13\6\0\14\13\1\0\6\13\5\0\34\13\1\0"+
    "\1\253\2\13\6\0\1\76\11\0\10\13\4\0\2\13"+
    "\6\0\14\13\1\0\5\13\1\254\5\0\34\13\1\0"+
    "\3\13\6\0\1\76\11\0\10\13\4\0\2\13\6\0"+
    "\14\13\1\0\6\13\5\0\34\13\1\0\1\255\2\13"+
    "\6\0\1\76\11\0\10\13\4\0\2\13\6\0\14\13"+
    "\1\0\6\13\5\0\3\13\1\256\30\13\1\0\3\13"+
    "\6\0\1\76\11\0\10\13\31\0\1\153\40\0\1\153"+
    "\40\0\1\153\4\0\1\154\12\0\1\154\11\0\3\154"+
    "\2\0\1\154\6\0\1\154\1\0\1\154\10\0\1\154"+
    "\1\0\2\154\1\0\2\154\3\0\1\154\6\0\1\154"+
    "\31\0\1\154\101\0\1\257\72\0\1\160\74\0\3\161"+
    "\5\0\1\161\26\0\1\73\124\0\1\73\40\0\1\73"+
    "\40\0\1\73\52\0\1\260\5\0\1\261\2\0\1\262"+
    "\76\0\2\73\3\0\1\73\4\0\4\73\4\0\22\73"+
    "\1\0\4\73\7\0\1\73\23\0\1\73\52\0\1\261"+
    "\10\0\1\263\124\0\1\73\146\0\1\73\116\0\1\264"+
    "\2\0\1\73\1\0\1\265\12\0\1\73\1\0\1\266"+
    "\2\0\1\73\113\0\1\73\125\0\1\267\2\0\1\270"+
    "\1\171\1\0\1\271\15\0\1\73\122\0\1\263\132\0"+
    "\1\266\5\0\1\73\116\0\1\73\4\0\1\261\126\0"+
    "\1\73\12\0\1\73\51\0\1\73\12\0\1\73\11\0"+
    "\3\73\2\0\1\73\6\0\1\73\1\0\1\73\10\0"+
    "\1\73\1\0\2\73\1\0\2\73\3\0\1\73\6\0"+
    "\1\73\31\0\1\73\4\0\2\13\6\0\14\13\1\0"+
    "\6\13\5\0\34\13\1\0\3\13\6\0\1\76\11\0"+
    "\1\13\1\272\6\13\4\0\2\202\6\0\14\202\1\0"+
    "\6\202\5\0\34\202\1\0\3\202\6\0\1\273\11\0"+
    "\10\202\4\0\2\203\6\0\14\203\1\0\6\203\5\0"+
    "\34\203\1\0\3\203\6\0\1\274\1\0\1\103\7\0"+
    "\10\203\4\0\2\203\1\0\1\11\3\0\1\11\7\203"+
    "\1\204\1\203\1\204\2\203\1\11\6\203\2\11\1\0"+
    "\2\11\34\203\1\11\3\203\5\0\2\11\1\0\1\104"+
    "\1\0\6\11\10\203\4\0\2\202\1\0\1\11\3\0"+
    "\1\11\7\202\1\205\1\202\1\205\2\202\1\11\6\202"+
    "\2\11\1\0\2\11\34\202\1\11\3\202\5\0\2\11"+
    "\1\0\1\11\1\0\6\11\10\202\4\0\2\13\6\0"+
    "\1\275\13\13\1\0\6\13\5\0\34\13\1\0\3\13"+
    "\6\0\1\76\11\0\10\13\4\0\2\13\6\0\14\13"+
    "\1\0\6\13\5\0\34\13\1\0\1\276\2\13\6\0"+
    "\1\76\11\0\10\13\4\0\1\211\24\0\1\211\2\0"+
    "\1\210\35\0\1\211\40\0\1\211\31\0\1\277\40\0"+
    "\1\277\40\0\1\277\52\0\1\300\5\0\1\301\2\0"+
    "\1\302\76\0\2\111\3\0\1\111\4\0\4\111\4\0"+
    "\22\111\1\0\4\111\7\0\1\111\23\0\1\111\52\0"+
    "\1\301\10\0\1\303\124\0\1\111\146\0\1\111\116\0"+
    "\1\304\2\0\1\305\1\0\1\306\12\0\1\111\1\0"+
    "\1\307\2\0\1\111\113\0\1\111\125\0\1\310\2\0"+
    "\1\311\1\221\1\0\1\312\15\0\1\111\122\0\1\303"+
    "\132\0\1\307\5\0\1\111\116\0\1\111\4\0\1\301"+
    "\126\0\1\111\12\0\1\111\51\0\1\313\12\0\1\313"+
    "\11\0\3\313\2\0\1\313\6\0\1\313\1\0\1\313"+
    "\10\0\1\313\1\0\2\313\1\0\2\313\3\0\1\313"+
    "\6\0\1\313\31\0\1\313\4\0\2\13\6\0\4\13"+
    "\1\314\7\13\1\0\6\13\5\0\34\13\1\0\3\13"+
    "\6\0\1\76\11\0\10\13\4\0\2\13\6\0\14\13"+
    "\1\0\6\13\5\0\34\13\1\0\3\13\6\0\1\76"+
    "\11\0\1\315\7\13\4\0\2\13\6\0\14\13\1\0"+
    "\4\13\1\316\1\13\5\0\34\13\1\0\3\13\6\0"+
    "\1\76\11\0\10\13\4\0\2\13\6\0\14\13\1\0"+
    "\6\13\5\0\3\13\1\317\30\13\1\0\3\13\6\0"+
    "\1\76\11\0\10\13\4\0\2\13\6\0\14\13\1\0"+
    "\6\13\5\0\3\13\1\320\30\13\1\0\3\13\6\0"+
    "\1\76\11\0\10\13\4\0\2\13\6\0\14\13\1\0"+
    "\4\13\1\321\1\13\5\0\34\13\1\0\3\13\6\0"+
    "\1\76\11\0\10\13\36\0\1\322\101\0\2\13\6\0"+
    "\14\13\1\0\6\13\5\0\3\13\1\323\30\13\1\0"+
    "\3\13\6\0\1\76\11\0\10\13\4\0\2\13\6\0"+
    "\14\13\1\0\4\13\1\324\1\13\5\0\34\13\1\0"+
    "\3\13\6\0\1\76\11\0\10\13\4\0\2\13\6\0"+
    "\14\13\1\0\6\13\5\0\34\13\1\0\1\325\2\13"+
    "\6\0\1\76\11\0\10\13\4\0\2\13\6\0\14\13"+
    "\1\0\6\13\5\0\34\13\1\0\1\326\2\13\6\0"+
    "\1\76\11\0\10\13\4\0\2\13\6\0\14\13\1\0"+
    "\6\13\5\0\34\13\1\0\3\13\6\0\1\76\11\0"+
    "\1\327\7\13\2\330\1\331\1\0\5\330\2\0\77\330"+
    "\1\332\21\330\13\0\1\333\120\0\3\246\1\0\130\246"+
    "\14\0\1\334\155\0\1\335\101\0\2\13\6\0\14\13"+
    "\1\0\6\13\5\0\34\13\1\0\1\336\2\13\6\0"+
    "\1\76\11\0\10\13\4\0\2\13\6\0\14\13\1\0"+
    "\6\13\5\0\34\13\1\0\2\13\1\337\6\0\1\76"+
    "\11\0\10\13\4\0\2\13\6\0\14\13\1\0\4\13"+
    "\1\340\1\13\5\0\34\13\1\0\3\13\6\0\1\76"+
    "\11\0\10\13\4\0\2\13\6\0\14\13\1\0\6\13"+
    "\5\0\2\13\1\341\31\13\1\0\3\13\6\0\1\76"+
    "\11\0\10\13\4\0\2\13\6\0\5\13\1\342\6\13"+
    "\1\0\6\13\5\0\34\13\1\0\3\13\6\0\1\76"+
    "\11\0\10\13\102\0\1\343\111\0\1\73\125\0\1\73"+
    "\153\0\1\73\125\0\1\73\134\0\1\73\125\0\1\73"+
    "\124\0\1\73\144\0\1\73\135\0\1\73\127\0\1\73"+
    "\5\0\1\73\52\0\2\13\6\0\5\13\1\344\6\13"+
    "\1\0\6\13\5\0\34\13\1\0\3\13\6\0\1\76"+
    "\11\0\10\13\112\0\1\273\133\0\1\274\25\0\2\13"+
    "\6\0\1\345\13\13\1\0\6\13\5\0\34\13\1\0"+
    "\3\13\6\0\1\76\11\0\10\13\31\0\1\277\2\0"+
    "\1\210\35\0\1\277\40\0\1\277\60\0\1\111\125\0"+
    "\1\111\153\0\1\111\125\0\1\111\134\0\1\111\102\0"+
    "\1\210\20\0\1\111\135\0\1\111\124\0\1\111\144\0"+
    "\1\111\135\0\1\111\127\0\1\111\5\0\1\111\52\0"+
    "\1\313\12\0\1\313\11\0\3\313\1\210\1\0\1\313"+
    "\6\0\1\313\1\0\1\313\10\0\1\313\1\0\2\313"+
    "\1\0\2\313\3\0\1\313\6\0\1\313\31\0\1\313"+
    "\4\0\2\13\6\0\14\13\1\0\6\13\5\0\2\13"+
    "\1\346\31\13\1\0\3\13\6\0\1\76\11\0\10\13"+
    "\4\0\2\13\6\0\14\13\1\0\6\13\5\0\3\13"+
    "\1\347\30\13\1\0\3\13\6\0\1\76\11\0\10\13"+
    "\4\0\2\13\6\0\14\13\1\0\6\13\5\0\33\13"+
    "\1\350\1\0\3\13\6\0\1\76\11\0\10\13\4\0"+
    "\2\13\6\0\14\13\1\0\6\13\5\0\34\13\1\0"+
    "\3\13\6\0\1\76\11\0\1\13\1\351\6\13\4\0"+
    "\2\13\6\0\14\13\1\0\6\13\5\0\1\352\33\13"+
    "\1\0\3\13\6\0\1\76\11\0\10\13\104\0\1\353"+
    "\33\0\2\13\6\0\5\13\1\354\6\13\1\0\6\13"+
    "\5\0\34\13\1\0\3\13\6\0\1\76\11\0\10\13"+
    "\4\0\2\13\6\0\5\13\1\355\6\13\1\0\6\13"+
    "\5\0\34\13\1\0\3\13\6\0\1\76\11\0\10\13"+
    "\4\0\2\13\6\0\1\13\1\356\12\13\1\0\6\13"+
    "\5\0\34\13\1\0\3\13\6\0\1\76\11\0\10\13"+
    "\3\330\1\0\5\330\2\0\77\330\1\332\24\330\1\0"+
    "\5\330\2\0\20\330\1\357\14\330\1\360\1\361\1\330"+
    "\1\362\1\363\5\330\1\364\1\365\3\330\1\366\1\367"+
    "\1\370\2\330\1\371\1\372\14\330\1\332\17\330\1\373"+
    "\4\330\1\0\5\330\2\0\65\330\1\374\11\330\1\332"+
    "\21\330\13\0\1\375\221\0\1\376\67\0\1\377\102\0"+
    "\2\13\6\0\14\13\1\0\6\13\5\0\34\13\1\0"+
    "\2\13\1\u0100\6\0\1\76\11\0\10\13\4\0\2\13"+
    "\6\0\14\13\1\0\6\13\5\0\34\13\1\0\1\u0101"+
    "\2\13\6\0\1\76\11\0\10\13\4\0\2\13\6\0"+
    "\14\13\1\0\4\13\1\u0102\1\13\5\0\34\13\1\0"+
    "\3\13\6\0\1\76\11\0\10\13\35\0\1\u0103\102\0"+
    "\2\13\6\0\14\13\1\0\6\13\5\0\34\13\1\0"+
    "\1\u0104\2\13\6\0\1\76\11\0\10\13\4\0\2\13"+
    "\6\0\14\13\1\0\6\13\5\0\34\13\1\0\3\13"+
    "\6\0\1\76\11\0\1\u0105\7\13\4\0\2\13\6\0"+
    "\14\13\1\0\6\13\5\0\34\13\1\0\2\13\1\u0106"+
    "\6\0\1\76\11\0\10\13\4\0\2\13\6\0\5\13"+
    "\1\u0107\6\13\1\0\6\13\5\0\2\13\1\u0108\31\13"+
    "\1\0\3\13\6\0\1\76\11\0\10\13\4\0\2\13"+
    "\6\0\5\13\1\u0109\6\13\1\0\6\13\5\0\34\13"+
    "\1\0\3\13\6\0\1\76\11\0\10\13\4\0\2\13"+
    "\6\0\14\13\1\0\4\13\1\u010a\1\13\5\0\34\13"+
    "\1\0\3\13\6\0\1\76\11\0\10\13\32\0\1\u010b"+
    "\105\0\2\13\6\0\5\13\1\u010c\6\13\1\0\6\13"+
    "\5\0\34\13\1\0\3\13\6\0\1\76\11\0\10\13"+
    "\4\0\2\13\6\0\1\13\1\u010d\12\13\1\0\6\13"+
    "\5\0\34\13\1\0\3\13\6\0\1\76\11\0\10\13"+
    "\4\0\2\13\6\0\14\13\1\0\6\13\5\0\34\13"+
    "\1\0\3\13\6\0\1\76\11\0\3\13\1\u010e\4\13"+
    "\3\330\1\0\5\330\2\0\45\330\1\u010f\31\330\1\332"+
    "\24\330\1\0\5\330\2\0\41\330\1\u0110\35\330\1\332"+
    "\24\330\1\0\5\330\2\0\35\330\1\u0111\41\330\1\332"+
    "\24\330\1\0\5\330\2\0\41\330\1\u0112\6\330\1\u0113"+
    "\12\330\1\u0114\13\330\1\332\24\330\1\0\5\330\2\0"+
    "\54\330\1\u0115\22\330\1\332\24\330\1\0\5\330\2\0"+
    "\35\330\1\u0116\41\330\1\332\24\330\1\0\5\330\2\0"+
    "\41\330\1\u0117\1\330\1\u0118\33\330\1\332\24\330\1\0"+
    "\5\330\2\0\45\330\1\u0119\31\330\1\332\24\330\1\0"+
    "\5\330\2\0\36\330\1\u011a\40\330\1\332\24\330\1\0"+
    "\5\330\2\0\35\330\1\u011b\41\330\1\332\24\330\1\0"+
    "\5\330\2\0\56\330\1\u011c\20\330\1\332\24\330\1\0"+
    "\5\330\2\0\45\330\1\u011d\31\330\1\332\24\330\1\0"+
    "\5\330\2\0\47\330\1\u011e\27\330\1\332\24\330\1\0"+
    "\5\330\2\0\72\330\1\u011f\4\330\1\332\21\330\14\u0120"+
    "\1\u0121\1\u0122\116\u0120\3\376\1\0\130\376\45\0\1\u0123"+
    "\72\0\2\13\6\0\14\13\1\0\6\13\5\0\34\13"+
    "\1\0\1\13\1\u0124\1\13\6\0\1\76\11\0\10\13"+
    "\4\0\2\13\6\0\14\13\1\0\6\13\5\0\1\13"+
    "\1\u0125\32\13\1\0\3\13\6\0\1\76\11\0\10\13"+
    "\103\0\1\u0126\34\0\2\13\6\0\14\13\1\0\1\13"+
    "\1\u0127\4\13\5\0\34\13\1\0\3\13\6\0\1\76"+
    "\11\0\10\13\4\0\2\13\6\0\14\13\1\0\6\13"+
    "\5\0\34\13\1\0\3\13\6\0\1\76\11\0\1\u0128"+
    "\7\13\4\0\2\13\6\0\14\13\1\0\6\13\5\0"+
    "\34\13\1\0\2\13\1\u0129\6\0\1\76\11\0\10\13"+
    "\20\0\1\u012a\117\0\2\13\6\0\14\13\1\0\6\13"+
    "\5\0\34\13\1\0\1\u012b\2\13\6\0\1\76\11\0"+
    "\10\13\3\330\1\0\5\330\2\0\63\330\1\u012c\13\330"+
    "\1\332\24\330\1\0\5\330\2\0\36\330\1\u012d\15\330"+
    "\1\u012e\22\330\1\332\24\330\1\0\5\330\2\0\63\330"+
    "\1\u012f\13\330\1\332\24\330\1\0\5\330\2\0\36\330"+
    "\1\u0130\40\330\1\332\24\330\1\0\5\330\2\0\50\330"+
    "\1\u0131\26\330\1\332\24\330\1\0\5\330\2\0\45\330"+
    "\1\u0132\31\330\1\332\24\330\1\0\5\330\2\0\45\330"+
    "\1\u0133\31\330\1\332\24\330\1\0\5\330\2\0\35\330"+
    "\1\u0134\41\330\1\332\24\330\1\0\5\330\2\0\55\330"+
    "\1\u0135\21\330\1\332\24\330\1\0\5\330\2\0\60\330"+
    "\1\u0136\16\330\1\332\24\330\1\0\5\330\2\0\50\330"+
    "\1\u0137\26\330\1\332\24\330\1\0\5\330\2\0\37\330"+
    "\1\u0138\37\330\1\332\24\330\1\0\5\330\2\0\37\330"+
    "\1\u0139\10\330\1\u013a\26\330\1\332\24\330\1\0\5\330"+
    "\2\0\35\330\1\u013b\41\330\1\332\24\330\1\0\5\330"+
    "\2\0\35\330\1\u013c\41\330\1\332\24\330\1\0\5\330"+
    "\2\0\55\330\1\u013d\21\330\1\332\21\330\15\u0120\1\u0122"+
    "\267\u0120\1\u0122\1\u013e\115\u0120\3\u0123\1\0\130\u0123\4\0"+
    "\2\13\6\0\14\13\1\0\4\13\1\u013f\1\13\5\0"+
    "\34\13\1\0\3\13\6\0\1\76\11\0\10\13\104\0"+
    "\1\u0140\33\0\2\13\6\0\14\13\1\0\6\13\5\0"+
    "\34\13\1\0\1\u0141\2\13\6\0\1\76\11\0\10\13"+
    "\4\0\2\13\6\0\14\13\1\0\6\13\5\0\34\13"+
    "\1\0\1\13\1\u0142\1\13\6\0\1\76\11\0\10\13"+
    "\36\0\1\u0143\75\0\3\330\1\0\5\330\2\0\55\330"+
    "\1\u0144\21\330\1\332\24\330\1\0\5\330\2\0\35\330"+
    "\1\u0145\41\330\1\332\24\330\1\0\5\330\2\0\45\330"+
    "\1\u0146\31\330\1\332\24\330\1\0\5\330\2\0\47\330"+
    "\1\u0147\27\330\1\332\24\330\1\0\5\330\2\0\55\330"+
    "\1\u0148\21\330\1\332\24\330\1\0\5\330\2\0\50\330"+
    "\1\u0149\26\330\1\332\24\330\1\0\5\330\2\0\55\330"+
    "\1\u014a\21\330\1\332\24\330\1\0\5\330\2\0\45\330"+
    "\1\u014b\31\330\1\332\24\330\1\0\5\330\2\0\63\330"+
    "\1\u014c\13\330\1\332\24\330\1\0\5\330\2\0\43\330"+
    "\1\u014d\33\330\1\332\24\330\1\0\5\330\2\0\45\330"+
    "\1\u014e\31\330\1\332\24\330\1\0\5\330\2\0\56\330"+
    "\1\u014f\20\330\1\332\24\330\1\0\5\330\2\0\41\330"+
    "\1\u0150\35\330\1\332\24\330\1\0\5\330\2\0\56\330"+
    "\1\u0151\20\330\1\332\24\330\1\0\5\330\2\0\45\330"+
    "\1\u0152\31\330\1\332\24\330\1\0\5\330\2\0\35\330"+
    "\1\u0153\41\330\1\332\21\330\15\u0120\1\u0122\1\u0120\1\u0154"+
    "\114\u0120\4\0\2\13\6\0\14\13\1\0\6\13\5\0"+
    "\34\13\1\0\1\u0155\2\13\6\0\1\76\11\0\10\13"+
    "\32\0\1\u0156\202\0\1\u0157\32\0\3\330\1\0\5\330"+
    "\2\0\45\330\1\u0158\31\330\1\332\24\330\1\0\5\330"+
    "\2\0\63\330\1\u0159\13\330\1\332\24\330\1\0\5\330"+
    "\2\0\50\330\1\u015a\26\330\1\332\24\330\1\0\5\330"+
    "\2\0\50\330\1\u015b\26\330\1\332\24\330\1\0\5\330"+
    "\2\0\50\330\1\u015c\26\330\1\332\24\330\1\0\5\330"+
    "\2\0\56\330\1\u015d\20\330\1\332\24\330\1\0\5\330"+
    "\2\0\37\330\1\u015e\37\330\1\332\24\330\1\0\5\330"+
    "\2\0\45\330\1\u015f\31\330\1\332\24\330\1\0\5\330"+
    "\2\0\41\330\1\u0160\35\330\1\332\24\330\1\0\5\330"+
    "\2\0\40\330\1\u0161\36\330\1\332\24\330\1\0\5\330"+
    "\2\0\35\330\1\u0162\41\330\1\332\24\330\1\0\5\330"+
    "\2\0\42\330\1\u0163\34\330\1\332\24\330\1\0\5\330"+
    "\2\0\61\330\1\u0164\15\330\1\332\24\330\1\0\5\330"+
    "\2\0\55\330\1\u0165\21\330\1\332\24\330\1\0\5\330"+
    "\2\0\56\330\1\u0166\20\330\1\332\21\330\15\u0120\1\u0122"+
    "\2\u0120\1\u0167\113\u0120\4\0\2\13\6\0\14\13\1\0"+
    "\5\13\1\u0168\5\0\34\13\1\0\3\13\6\0\1\76"+
    "\11\0\10\13\20\0\1\u0169\220\0\1\u016a\26\0\3\330"+
    "\1\0\5\330\2\0\50\330\1\u016b\26\330\1\332\24\330"+
    "\1\0\5\330\2\0\47\330\1\u016c\27\330\1\332\24\330"+
    "\1\0\5\330\2\0\43\330\1\u016d\33\330\1\332\24\330"+
    "\1\0\5\330\2\0\51\330\1\u016e\25\330\1\332\24\330"+
    "\1\0\5\330\2\0\45\330\1\u016f\31\330\1\332\24\330"+
    "\1\0\5\330\2\0\47\330\1\u0170\27\330\1\332\24\330"+
    "\1\0\5\330\2\0\47\330\1\u0171\27\330\1\332\24\330"+
    "\1\0\5\330\2\0\55\330\1\u0172\21\330\1\332\24\330"+
    "\1\0\5\330\2\0\45\330\1\u0173\31\330\1\332\24\330"+
    "\1\0\5\330\2\0\45\330\1\u0174\31\330\1\332\24\330"+
    "\1\0\5\330\2\0\47\330\1\u0175\27\330\1\332\24\330"+
    "\1\0\5\330\2\0\47\330\1\u0176\27\330\1\332\24\330"+
    "\1\0\5\330\2\0\35\330\1\u0177\41\330\1\332\21\330"+
    "\15\u0120\1\u0122\3\u0120\1\u0178\112\u0120\36\0\1\u0179\75\0"+
    "\3\330\1\0\5\330\2\0\47\330\1\u017a\27\330\1\332"+
    "\24\330\1\0\5\330\2\0\50\330\1\u017b\26\330\1\332"+
    "\24\330\1\0\5\330\2\0\41\330\1\u017c\35\330\1\332"+
    "\24\330\1\0\5\330\2\0\37\330\1\u017d\37\330\1\332"+
    "\24\330\1\0\5\330\2\0\63\330\1\u017e\13\330\1\332"+
    "\24\330\1\0\5\330\2\0\56\330\1\u017f\20\330\1\332"+
    "\24\330\1\0\5\330\2\0\55\330\1\u0180\21\330\1\332"+
    "\24\330\1\0\5\330\2\0\37\330\1\u0181\37\330\1\332"+
    "\24\330\1\0\5\330\2\0\43\330\1\u0182\33\330\1\332"+
    "\24\330\1\0\5\330\2\0\62\330\1\u0183\14\330\1\332"+
    "\21\330\101\0\1\u0184\32\0\3\330\1\0\5\330\2\0"+
    "\43\330\1\u0185\33\330\1\332\24\330\1\0\5\330\2\0"+
    "\51\330\1\u0186\25\330\1\332\24\330\1\0\5\330\2\0"+
    "\55\330\1\u0187\21\330\1\332\24\330\1\0\5\330\2\0"+
    "\56\330\1\u0188\20\330\1\332\24\330\1\0\5\330\2\0"+
    "\40\330\1\u0189\22\330\1\u018a\13\330\1\332\24\330\1\0"+
    "\5\330\2\0\40\330\1\u018b\36\330\1\332\24\330\1\0"+
    "\5\330\2\0\45\330\1\u018c\31\330\1\332\24\330\1\0"+
    "\5\330\2\0\45\330\1\u018d\31\330\1\332\21\330\105\0"+
    "\1\u018e\26\0\3\330\1\0\5\330\2\0\45\330\1\u018f"+
    "\31\330\1\332\24\330\1\0\5\330\2\0\56\330\1\u0190"+
    "\20\330\1\332\24\330\1\0\5\330\2\0\40\330\1\u0191"+
    "\36\330\1\332\24\330\1\0\5\330\2\0\47\330\1\u0192"+
    "\6\330\1\u0193\20\330\1\332\24\330\1\0\5\330\2\0"+
    "\45\330\1\u0194\31\330\1\332\24\330\1\0\5\330\2\0"+
    "\35\330\1\u0195\41\330\1\332\24\330\1\0\5\330\2\0"+
    "\20\330\1\u0196\56\330\1\332\24\330\1\0\5\330\2\0"+
    "\20\330\1\u0197\56\330\1\332\24\330\1\0\5\330\2\0"+
    "\40\330\1\u0198\36\330\1\332\24\330\1\0\5\330\2\0"+
    "\45\330\1\u0199\31\330\1\332\24\330\1\0\5\330\2\0"+
    "\52\330\1\u019a\24\330\1\332\24\330\1\0\5\330\2\0"+
    "\35\330\1\u019b\41\330\1\332\24\330\1\0\5\330\2\0"+
    "\14\330\1\u019c\62\330\1\332\24\330\1\0\5\330\2\0"+
    "\43\330\1\u019d\33\330\1\332\24\330\1\0\5\330\2\0"+
    "\45\330\1\u019e\31\330\1\332\24\330\1\0\5\330\2\0"+
    "\14\330\1\u019f\62\330\1\332\24\330\1\0\5\330\2\0"+
    "\37\330\1\u01a0\37\330\1\332\24\330\1\0\5\330\2\0"+
    "\62\330\1\u01a1\14\330\1\332\24\330\1\0\5\330\2\0"+
    "\40\330\1\u01a2\36\330\1\332\24\330\1\0\5\330\2\0"+
    "\56\330\1\u01a3\20\330\1\332\24\330\1\0\5\330\2\0"+
    "\45\330\1\u01a4\31\330\1\332\24\330\1\0\5\330\2\0"+
    "\50\330\1\u01a5\26\330\1\332\24\330\1\0\5\330\2\0"+
    "\35\330\1\u01a6\41\330\1\332\24\330\1\0\5\330\2\0"+
    "\47\330\1\u01a7\27\330\1\332\24\330\1\0\5\330\2\0"+
    "\37\330\1\u01a8\37\330\1\332\24\330\1\0\5\330\2\0"+
    "\37\330\1\u01a9\37\330\1\332\24\330\1\0\5\330\2\0"+
    "\56\330\1\u01aa\20\330\1\332\24\330\1\0\5\330\2\0"+
    "\47\330\1\u01ab\27\330\1\332\24\330\1\0\5\330\2\0"+
    "\35\330\1\u01ac\41\330\1\332\24\330\1\0\5\330\2\0"+
    "\55\330\1\u01ad\21\330\1\332\24\330\1\0\5\330\2\0"+
    "\45\330\1\u01ae\31\330\1\332\21\330";

  private static int [] zzUnpackTrans() {
    int [] result = new int[32292];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\1\1\11\1\1\1\11\1\1\1\11\21\1"+
    "\1\11\10\1\1\11\2\1\1\11\2\1\1\11\1\1"+
    "\1\11\12\1\1\11\4\1\1\0\1\11\1\0\5\1"+
    "\1\0\2\1\1\11\2\1\1\0\1\11\1\0\6\1"+
    "\1\0\10\1\1\11\1\0\2\11\1\0\1\1\1\0"+
    "\1\11\12\1\2\11\1\0\1\1\17\0\10\1\1\11"+
    "\17\0\6\1\1\0\5\1\2\0\1\1\1\11\2\0"+
    "\5\1\13\0\5\1\15\0\6\1\1\0\5\1\6\0"+
    "\5\1\1\0\7\1\1\0\3\1\17\0\1\1\1\0"+
    "\3\1\1\0\7\1\1\0\3\1\20\0\1\1\3\0"+
    "\3\1\1\0\3\1\1\0\1\1\5\0\1\1\2\0"+
    "\1\1\12\0\1\1\1\0\2\1\10\0\1\1\11\0"+
    "\1\1\11\0\1\1\1\0\1\1\6\0\1\1\1\0"+
    "\1\11\3\0\2\1\3\0\1\1\4\0\1\1\10\0"+
    "\1\1\1\0\1\1\2\0\1\1\2\0\1\1\4\0"+
    "\1\11\5\0\1\1\1\0\2\1\1\0\1\1\3\0"+
    "\2\1\2\0\1\1\2\0\1\1\10\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[430];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char[] zzBuffer = new char[0];

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    private int commentStart;
    private int commentDepth;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _HaskellLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _HaskellLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3364) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer.toString().toCharArray();
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return TokenPackage.getBLOCK_COMMENT();
          }
        case 107: break;
        case 2: 
          { return TokenType.BAD_CHARACTER;
          }
        case 108: break;
        case 3: 
          { return TokenType.WHITE_SPACE;
          }
        case 109: break;
        case 4: 
          { return TokenPackage.getNEW_LINE();
          }
        case 110: break;
        case 5: 
          { return HaskellLexerTokens.INTEGER;
          }
        case 111: break;
        case 6: 
          { return HaskellLexerTokens.BACKQUOTE;
          }
        case 112: break;
        case 7: 
          { return HaskellLexerTokens.VARSYM;
          }
        case 113: break;
        case 8: 
          { return HaskellLexerTokens.VARID;
          }
        case 114: break;
        case 9: 
          { return HaskellLexerTokens.CONID;
          }
        case 115: break;
        case 10: 
          { return HaskellLexerTokens.UNDERSCORE;
          }
        case 116: break;
        case 11: 
          { return HaskellLexerTokens.COLON;
          }
        case 117: break;
        case 12: 
          { return TokenPackage.getTH_VAR_QUOTE();
          }
        case 118: break;
        case 13: 
          { return HaskellLexerTokens.STAR;
          }
        case 119: break;
        case 14: 
          { return HaskellLexerTokens.LAM;
          }
        case 120: break;
        case 15: 
          { return HaskellLexerTokens.CBRACK;
          }
        case 121: break;
        case 16: 
          { return HaskellLexerTokens.AT;
          }
        case 122: break;
        case 17: 
          { return HaskellLexerTokens.MINUS;
          }
        case 123: break;
        case 18: 
          { return HaskellLexerTokens.OCURLY;
          }
        case 124: break;
        case 19: 
          { return HaskellLexerTokens.CCURLY;
          }
        case 125: break;
        case 20: 
          { return HaskellLexerTokens.OBRACK;
          }
        case 126: break;
        case 21: 
          { return HaskellLexerTokens.OPAREN;
          }
        case 127: break;
        case 22: 
          { return HaskellLexerTokens.CPAREN;
          }
        case 128: break;
        case 23: 
          { return HaskellLexerTokens.VBAR;
          }
        case 129: break;
        case 24: 
          { return HaskellLexerTokens.SEMI;
          }
        case 130: break;
        case 25: 
          { return HaskellLexerTokens.DOT;
          }
        case 131: break;
        case 26: 
          { return HaskellLexerTokens.COMMA;
          }
        case 132: break;
        case 27: 
          { return HaskellLexerTokens.EQUAL;
          }
        case 133: break;
        case 28: 
          { return HaskellLexerTokens.RARROW;
          }
        case 134: break;
        case 29: 
          { return HaskellLexerTokens.TILDE;
          }
        case 135: break;
        case 30: 
          { return HaskellLexerTokens.BANG;
          }
        case 136: break;
        case 31: 
          { 
          }
        case 137: break;
        case 32: 
          { return HaskellLexerTokens.STRING;
          }
        case 138: break;
        case 33: 
          { return HaskellLexerTokens.OF;
          }
        case 139: break;
        case 34: 
          { return HaskellLexerTokens.DCOLON;
          }
        case 140: break;
        case 35: 
          { return HaskellLexerTokens.CPABRACK;
          }
        case 141: break;
        case 36: 
          { return TokenPackage.getTH_TY_QUOTE();
          }
        case 142: break;
        case 37: 
          { return HaskellLexerTokens.IF;
          }
        case 143: break;
        case 38: 
          { return HaskellLexerTokens.IN;
          }
        case 144: break;
        case 39: 
          { return HaskellLexerTokens.DO;
          }
        case 145: break;
        case 40: 
          { return HaskellLexerTokens.AS;
          }
        case 146: break;
        case 41: 
          { return TokenPackage.getEND_OF_LINE_COMMENT();
          }
        case 147: break;
        case 42: 
          { yybegin(BLOCK_COMMENT);
    commentDepth = 0;
    commentStart = getTokenStart();
          }
        case 148: break;
        case 43: 
          { return HaskellLexerTokens.OPABRACK;
          }
        case 149: break;
        case 44: 
          { return HaskellLexerTokens.OUBXPAREN;
          }
        case 150: break;
        case 45: 
          { return HaskellLexerTokens.CPARENBAR;
          }
        case 151: break;
        case 46: 
          { return HaskellLexerTokens.CUBXPAREN;
          }
        case 152: break;
        case 47: 
          { return HaskellLexerTokens.DOTDOT;
          }
        case 153: break;
        case 48: 
          { return HaskellLexerTokens.DARROW;
          }
        case 154: break;
        case 49: 
          { return HaskellLexerTokens.LARROW;
          }
        case 155: break;
        case 50: 
          { if (commentDepth > 0) {
            commentDepth--;
        }
        else {
             int state = yystate();
             yybegin(YYINITIAL);
             zzStartRead = commentStart;
             return TokenPackage.getBLOCK_COMMENT();
        }
          }
        case 156: break;
        case 51: 
          { commentDepth++;
          }
        case 157: break;
        case 52: 
          { return HaskellLexerTokens.LET;
          }
        case 158: break;
        case 53: 
          { return HaskellLexerTokens.QVARID;
          }
        case 159: break;
        case 54: 
          { return HaskellLexerTokens.QCONID;
          }
        case 160: break;
        case 55: 
          { return HaskellLexerTokens.CHAR;
          }
        case 161: break;
        case 56: 
          { return CPPTokens.IF;
          }
        case 162: break;
        case 57: 
          { return HaskellLexerTokens.CLOSE_PRAG;
          }
        case 163: break;
        case 58: 
          { return HaskellLexerTokens.CASE;
          }
        case 164: break;
        case 59: 
          { return HaskellLexerTokens.DATA;
          }
        case 165: break;
        case 60: 
          { return HaskellLexerTokens.ROLE;
          }
        case 166: break;
        case 61: 
          { return HaskellLexerTokens.ELSE;
          }
        case 167: break;
        case 62: 
          { return HaskellLexerTokens.TYPE;
          }
        case 168: break;
        case 63: 
          { return HaskellLexerTokens.THEN;
          }
        case 169: break;
        case 64: 
          { return HaskellLexerTokens.CLASS;
          }
        case 170: break;
        case 65: 
          { return HaskellLexerTokens.INFIX;
          }
        case 171: break;
        case 66: 
          { return CPPTokens.ELSE;
          }
        case 172: break;
        case 67: 
          { return HaskellLexerTokens.WHERE;
          }
        case 173: break;
        case 68: 
          { return HaskellLexerTokens.MODULE;
          }
        case 174: break;
        case 69: 
          { return HaskellLexerTokens.IMPORT;
          }
        case 175: break;
        case 70: 
          { return HaskellLexerTokens.INFIXL;
          }
        case 176: break;
        case 71: 
          { return HaskellLexerTokens.INFIXR;
          }
        case 177: break;
        case 72: 
          { return HaskellLexerTokens.FORALL;
          }
        case 178: break;
        case 73: 
          { return HaskellLexerTokens.FAMILY;
          }
        case 179: break;
        case 74: 
          { return TokenPackage.getPRAGMA();
          }
        case 180: break;
        case 75: 
          { return CPPTokens.ENDIF;
          }
        case 181: break;
        case 76: 
          { return HaskellLexerTokens.HIDING;
          }
        case 182: break;
        case 77: 
          { return HaskellLexerTokens.DEFAULT;
          }
        case 183: break;
        case 78: 
          { return HaskellLexerTokens.NEWTYPE;
          }
        case 184: break;
        case 79: 
          { return HaskellLexerTokens.SCC_PRAG;
          }
        case 185: break;
        case 80: 
          { return HaskellLexerTokens.ANN_PRAG;
          }
        case 186: break;
        case 81: 
          { return HaskellLexerTokens.INSTANCE;
          }
        case 187: break;
        case 82: 
          { return HaskellLexerTokens.DERIVING;
          }
        case 188: break;
        case 83: 
          { return HaskellLexerTokens.CORE_PRAG;
          }
        case 189: break;
        case 84: 
          { return HaskellLexerTokens.CTYPE;
          }
        case 190: break;
        case 85: 
          { return HaskellLexerTokens.RULES_PRAG;
          }
        case 191: break;
        case 86: 
          { return HaskellLexerTokens.QUALIFIED;
          }
        case 192: break;
        case 87: 
          { yybegin(TEX); return TokenPackage.getBLOCK_COMMENT();
          }
        case 193: break;
        case 88: 
          { return HaskellLexerTokens.UNPACK_PRAG;
          }
        case 194: break;
        case 89: 
          { return HaskellLexerTokens.SOURCE_PRAG;
          }
        case 195: break;
        case 90: 
          { return HaskellLexerTokens.INLINE_PRAG;
          }
        case 196: break;
        case 91: 
          { yypushback(1);
                        return HaskellLexerTokens.OPARENBAR;
          }
        case 197: break;
        case 92: 
          { return HaskellLexerTokens.MINIMAL_PRAG;
          }
        case 198: break;
        case 93: 
          { return HaskellLexerTokens.WARNING_PRAG;
          }
        case 199: break;
        case 94: 
          { return HaskellLexerTokens.NOUNPACK_PRAG;
          }
        case 200: break;
        case 95: 
          { return HaskellLexerTokens.OVERLAPS;
          }
        case 201: break;
        case 96: 
          { yybegin(YYINITIAL); return TokenPackage.getBLOCK_COMMENT();
          }
        case 202: break;
        case 97: 
          { return HaskellLexerTokens.VECT_PRAG;
          }
        case 203: break;
        case 98: 
          { return HaskellLexerTokens.GENERATED_PRAG;
          }
        case 204: break;
        case 99: 
          { return HaskellLexerTokens.DEPRECATED_PRAG;
          }
        case 205: break;
        case 100: 
          { return HaskellLexerTokens.SPEC_PRAG;
          }
        case 206: break;
        case 101: 
          { return HaskellLexerTokens.INCOHERENT;
          }
        case 207: break;
        case 102: 
          { return HaskellLexerTokens.NOVECT_PRAG;
          }
        case 208: break;
        case 103: 
          { return HaskellLexerTokens.OVERLAPPING;
          }
        case 209: break;
        case 104: 
          { return HaskellLexerTokens.OVERLAPPABLE;
          }
        case 210: break;
        case 105: 
          { return HaskellLexerTokens.VECT_SCALAR_PRAG;
          }
        case 211: break;
        case 106: 
          { return HaskellLexerTokens.SPEC_INLINE_PRAG;
          }
        case 212: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case BLOCK_COMMENT: {
              int state = yystate();
        yybegin(YYINITIAL);
        zzStartRead = commentStart;
        return TokenPackage.getBLOCK_COMMENT();
            }
            case 431: break;
            default:
            return null;
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
