/* The following code was generated by JFlex 1.5.1 */

package org.jetbrains.haskell.parser.lexer;

import java.util.*;
import com.intellij.lexer.*;
import com.intellij.psi.*;
import org.jetbrains.haskell.parser.token.*;
import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.1
 * from the specification file <tt>/Users/atsky/Dropbox/haskell-idea-plugin/plugin/src/org/jetbrains/haskell/parser/lexer/Haskell.flex</tt>
 */
class _HaskellLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int BLOCK_COMMENT = 2;
  public static final int TEX = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\3\0\1\5\1\0\1\1\3\0\1\0\1\3\1\30\1\2\1\2"+
    "\22\0\1\1\1\64\1\10\1\61\1\23\2\7\1\22\1\46\1\47"+
    "\1\7\1\7\1\52\1\26\1\51\1\7\1\100\7\17\2\4\1\16"+
    "\1\50\1\55\1\53\1\56\1\60\1\62\6\20\10\11\1\101\10\11"+
    "\1\102\2\11\1\44\1\27\1\45\1\7\1\15\1\6\1\25\1\32"+
    "\1\40\1\42\1\33\1\21\1\34\1\74\1\35\2\13\1\66\1\24"+
    "\1\36\1\41\1\73\1\77\1\71\1\65\1\67\1\70\1\72\1\75"+
    "\1\31\1\76\1\13\1\37\1\54\1\43\1\63\6\0\1\30\33\0"+
    "\11\7\1\13\2\7\1\0\4\7\2\0\1\7\1\13\3\7\1\0"+
    "\1\13\1\7\3\0\1\7\27\11\1\7\7\11\30\13\1\7\10\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\2\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\2\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\2\11\1\13"+
    "\1\11\1\13\1\11\3\13\2\11\1\13\1\11\1\13\2\11\1\13"+
    "\3\11\2\13\4\11\1\13\2\11\1\13\3\11\3\13\2\11\1\13"+
    "\2\11\1\13\1\11\1\13\1\11\1\13\2\11\1\13\1\11\2\13"+
    "\1\11\1\13\2\11\1\13\3\11\1\13\1\11\1\13\2\11\2\13"+
    "\1\0\1\11\3\13\4\0\1\11\1\0\1\13\1\11\1\0\1\13"+
    "\1\11\1\0\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\2\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\2\13\1\11\1\0\1\13"+
    "\1\11\1\13\3\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\7\13\2\11\1\13\2\11\2\13\1\11\1\13\4\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\105\13\1\0\44\13"+
    "\7\0\2\13\4\7\14\0\16\7\5\13\7\7\1\0\1\7\1\0"+
    "\21\7\105\0\1\13\52\0\1\11\1\13\1\11\1\13\1\0\1\7"+
    "\1\11\1\13\2\0\4\13\1\7\5\0\2\7\1\11\1\7\3\11"+
    "\1\0\1\11\1\0\2\11\1\13\21\11\1\0\11\11\43\13\1\11"+
    "\2\13\3\11\3\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\5\13\1\11\1\13\1\7"+
    "\1\11\1\13\2\11\2\13\63\11\60\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\7\7\0\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\2\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\2\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\11\0\46\11"+
    "\3\0\6\7\1\0\47\13\1\0\2\7\4\0\1\7\56\0\1\7"+
    "\1\0\1\7\2\0\1\7\2\0\1\7\54\0\2\7\21\0\12\7"+
    "\13\0\1\7\2\0\2\7\112\0\4\7\146\0\1\7\11\0\1\7"+
    "\12\0\1\7\23\0\2\7\1\0\16\7\350\0\4\7\66\0\17\7"+
    "\37\0\1\7\u0105\0\2\7\12\0\1\7\201\0\2\7\6\0\2\7"+
    "\364\0\2\7\176\0\1\7\202\0\10\7\204\0\1\7\371\0\1\7"+
    "\172\0\1\7\112\0\1\7\17\0\1\7\12\0\2\7\245\0\27\7"+
    "\2\0\6\7\24\0\1\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\107\0\1\7\70\0\10\7\1\0\6\7\1\0\15\7\157\0\6\7"+
    "\116\0\2\7\46\11\1\0\1\11\5\0\1\11\55\0\1\7\u0264\0"+
    "\11\7\47\0\12\7\146\0\1\7\u026c\0\2\7\54\0\2\7\116\0"+
    "\3\7\107\0\2\7\235\0\3\7\1\0\4\7\44\0\13\7\u0135\0"+
    "\1\7\3\0\2\7\230\0\42\7\36\0\2\7\200\0\7\7\1\0"+
    "\6\7\254\0\21\7\11\0\11\7\177\0\4\7\73\0\5\7\76\0"+
    "\2\7\100\0\10\7\13\0\1\7\54\0\300\13\100\0\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\11\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\11\13\10\11\6\13\2\0\6\11"+
    "\2\0\10\13\10\11\10\13\10\11\6\13\2\0\6\11\2\0\10\13"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\10\13\10\11"+
    "\16\13\2\0\10\13\10\0\10\13\10\0\10\13\10\0\5\13\1\0"+
    "\2\13\4\11\1\0\1\7\1\13\3\7\3\13\1\0\2\13\4\11"+
    "\1\0\3\7\4\13\2\0\2\13\4\11\1\0\3\7\10\13\5\11"+
    "\3\7\2\0\3\13\1\0\2\13\4\11\1\0\2\7\21\0\30\7"+
    "\1\30\1\30\6\0\57\7\22\0\1\13\10\0\5\7\1\13\12\0"+
    "\5\7\1\0\15\13\3\0\33\7\105\0\2\7\1\11\4\7\1\11"+
    "\2\7\1\13\3\11\2\13\3\11\1\13\1\7\1\11\3\7\5\11"+
    "\6\7\1\11\1\7\1\11\1\7\1\11\1\7\4\11\1\7\1\13"+
    "\4\11\1\13\4\0\1\13\2\7\2\13\2\11\5\7\1\11\4\13"+
    "\4\7\1\13\1\7\20\0\20\11\20\13\3\0\1\11\1\13\13\0"+
    "\2\7\1\57\155\7\1\7\u01f3\7\14\0\47\7\31\0\13\7\121\0"+
    "\32\7\32\12\32\14\26\0\u0200\7\1\0\165\7\36\0\u03b9\7\3\0"+
    "\12\7\246\0\57\11\1\0\57\13\1\0\1\11\1\13\3\11\2\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\4\11\1\13\1\11\2\13"+
    "\1\11\10\13\3\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\2\13\6\7\1\11\1\13\1\11\1\13\3\0\1\11\1\13"+
    "\5\0\4\7\1\0\2\7\46\13\1\0\1\13\5\0\1\13\102\0"+
    "\1\7\217\0\57\7\1\0\14\7\104\0\32\7\1\0\131\7\14\0"+
    "\326\7\32\0\14\7\5\0\4\7\3\0\31\7\17\0\1\7\5\0"+
    "\2\7\5\0\3\7\133\0\2\7\3\0\1\7\132\0\1\7\224\0"+
    "\2\7\4\0\12\7\40\0\44\7\34\0\37\7\13\0\36\7\10\0"+
    "\1\7\17\0\40\7\12\0\47\7\17\0\77\7\1\0\u0100\7\u19c0\0"+
    "\100\7\u5690\0\67\7\67\0\2\7\u010d\0\3\7\60\0\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\5\0\1\7\12\0\1\7\1\0\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\132\0\6\7\10\0\27\7\11\0\2\7\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\3\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\12\13\1\11\1\13\1\11\1\13\2\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\0"+
    "\2\7\1\11\1\13\1\11\1\13\1\0\1\11\1\13\1\11\1\13"+
    "\14\0\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\115\0\3\13\55\0\4\7\12\0\4\7\72\0\4\7"+
    "\126\0\2\7\50\0\3\7\63\0\2\7\57\0\1\7\141\0\15\7"+
    "\20\0\2\7\174\0\4\7\27\0\3\7\144\0\2\7\20\0\2\7"+
    "\371\0\1\7\u4f14\0\7\13\14\0\5\13\21\0\1\7\210\0\20\7"+
    "\u017c\0\2\7\274\0\2\7\22\0\12\7\26\0\43\7\1\0\23\7"+
    "\1\0\4\7\225\0\17\7\12\0\7\7\32\11\6\7\32\13\13\7"+
    "\172\0\7\7\1\0\7\7\15\0\2\7\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\2\1\10\1\7\1\11\1\7\1\12\1\13\1\11"+
    "\1\14\1\15\2\11\1\7\1\16\3\11\1\17\3\11"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\7\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\7\11\1\5\3\40\2\1\1\0\1\41\1\0"+
    "\1\42\1\43\1\11\1\0\1\44\1\0\1\11\1\45"+
    "\1\46\1\0\2\11\1\47\1\11\1\50\1\11\1\51"+
    "\2\11\1\52\2\11\1\53\1\54\1\55\1\56\10\11"+
    "\2\5\1\57\1\60\1\1\1\0\1\11\2\61\1\0"+
    "\1\11\1\0\6\11\1\0\6\11\1\62\6\11\1\0"+
    "\3\11\1\0\1\11\1\63\4\11\1\0\1\64\1\11"+
    "\1\65\2\11\1\66\1\67\1\70\4\11\1\0\3\11"+
    "\1\0\2\11\1\71\2\11\1\0\1\72\4\11\1\73"+
    "\1\11\1\0\1\74\1\11\1\75\1\0\1\76\1\77"+
    "\1\100\1\101\2\11\1\102\2\11\1\103\1\104\1\11"+
    "\1\0\1\105\1\0\1\11\1\106\1\107\2\11\2\0"+
    "\1\110\1\111\1\11\2\0\1\112\1\0\1\113\2\0"+
    "\1\114";

  private static int [] zzUnpackAction() {
    int [] result = new int[209];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\311"+
    "\0\u01d5\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u02e1\0\u0367"+
    "\0\u03aa\0\u03ed\0\u01d5\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c"+
    "\0\u057f\0\u05c2\0\u0605\0\u0648\0\u068b\0\u06ce\0\311\0\311"+
    "\0\311\0\311\0\311\0\311\0\u0711\0\311\0\u0754\0\u01d5"+
    "\0\u0797\0\u01d5\0\u01d5\0\u01d5\0\u01d5\0\u01d5\0\u01d5\0\u07da"+
    "\0\u081d\0\u0860\0\u08a3\0\u08e6\0\u0929\0\u096c\0\u09af\0\311"+
    "\0\u09f2\0\u0a35\0\u0a78\0\u0abb\0\u0218\0\311\0\u0afe\0\u0b41"+
    "\0\u0b41\0\u0b84\0\u0bc7\0\311\0\u0c0a\0\u0c4d\0\u02e1\0\u0c90"+
    "\0\u0cd3\0\u0d16\0\u0d59\0\u02e1\0\u0d9c\0\u0ddf\0\u0e22\0\u0e65"+
    "\0\u0ea8\0\u0eeb\0\u02e1\0\u0f2e\0\u0f71\0\u02e1\0\u01d5\0\u01d5"+
    "\0\u01d5\0\u0fb4\0\u0ff7\0\u103a\0\u107d\0\u10c0\0\u1103\0\u1146"+
    "\0\u1189\0\u11cc\0\u120f\0\311\0\311\0\u1252\0\u1295\0\u12d8"+
    "\0\311\0\u0bc7\0\u131b\0\u135e\0\u13a1\0\u13e4\0\u1427\0\u146a"+
    "\0\u14ad\0\u14f0\0\u1533\0\u1576\0\u15b9\0\u15fc\0\u163f\0\u1682"+
    "\0\u16c5\0\u1708\0\u02e1\0\u174b\0\u178e\0\u17d1\0\u1814\0\u1857"+
    "\0\u189a\0\u18dd\0\u1920\0\u1963\0\u19a6\0\u19e9\0\u1a2c\0\u02e1"+
    "\0\u1a6f\0\u1ab2\0\u1af5\0\u1b38\0\u1b7b\0\u02e1\0\u1bbe\0\u02e1"+
    "\0\u1c01\0\u1c44\0\u02e1\0\u02e1\0\u02e1\0\u1c87\0\u1cca\0\u1d0d"+
    "\0\u1d50\0\u1d93\0\u1dd6\0\u1e19\0\u1e5c\0\u1e9f\0\u1ee2\0\u1f25"+
    "\0\u1f68\0\u1fab\0\u1fee\0\u2031\0\u02e1\0\u2074\0\u20b7\0\u20fa"+
    "\0\u213d\0\u02e1\0\u2180\0\u21c3\0\u02e1\0\u2206\0\u02e1\0\u2249"+
    "\0\u02e1\0\u02e1\0\u02e1\0\u02e1\0\u228c\0\u22cf\0\u1576\0\u2312"+
    "\0\u2355\0\u02e1\0\u02e1\0\u2398\0\u23db\0\u02e1\0\u241e\0\u2461"+
    "\0\u02e1\0\u02e1\0\u24a4\0\u24e7\0\u252a\0\u256d\0\u02e1\0\u02e1"+
    "\0\u25b0\0\u25f3\0\u2636\0\u02e1\0\u2679\0\311\0\u26bc\0\u26ff"+
    "\0\311";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[209];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\2\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\7\1\13\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\0\2\15"+
    "\1\30\1\15\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\11\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\3\15\1\64"+
    "\1\65\1\15\1\66\1\67\2\13\26\70\1\71\1\70"+
    "\1\0\6\70\1\72\43\70\27\73\1\74\53\73\104\0"+
    "\2\5\101\0\2\6\104\0\2\7\11\0\1\7\60\0"+
    "\1\7\11\0\1\11\2\0\1\11\1\0\1\11\1\0"+
    "\1\11\4\0\1\11\2\0\2\11\21\0\1\11\1\0"+
    "\12\11\16\0\10\75\1\76\16\75\1\77\53\75\4\0"+
    "\2\13\3\0\5\13\1\0\4\13\1\0\2\13\3\0"+
    "\6\13\1\0\3\13\22\0\16\13\4\0\2\13\1\0"+
    "\1\11\1\0\1\13\1\14\1\13\1\14\1\13\1\11"+
    "\4\13\1\11\2\13\2\11\1\0\6\13\1\0\3\13"+
    "\6\0\1\11\1\0\12\11\16\13\4\0\2\15\3\0"+
    "\5\15\1\0\4\15\1\0\2\15\3\0\6\15\1\0"+
    "\3\15\22\0\16\15\4\0\2\15\1\0\1\11\1\0"+
    "\1\15\1\16\1\15\1\16\1\15\1\11\4\15\1\11"+
    "\2\15\2\11\1\0\6\15\1\0\3\15\6\0\1\11"+
    "\1\0\12\11\16\15\7\0\1\100\2\0\1\100\1\0"+
    "\1\100\1\0\1\101\4\0\1\100\2\0\2\100\21\0"+
    "\1\100\1\0\12\100\22\0\2\15\3\0\5\15\1\0"+
    "\4\15\1\0\2\15\3\0\6\15\1\0\1\15\1\102"+
    "\1\15\22\0\16\15\22\103\1\104\4\103\1\105\53\103"+
    "\4\0\2\15\3\0\5\15\1\0\4\15\1\0\2\15"+
    "\3\0\6\15\1\0\1\15\1\106\1\15\22\0\16\15"+
    "\4\0\2\15\3\0\5\15\1\0\4\15\1\0\2\15"+
    "\3\0\6\15\1\0\3\15\22\0\1\107\15\15\7\0"+
    "\1\11\2\0\1\11\1\0\1\11\1\0\1\11\4\0"+
    "\1\11\2\0\1\110\1\11\21\0\1\11\1\0\3\11"+
    "\1\52\6\11\25\0\1\11\2\0\1\11\1\0\1\11"+
    "\1\0\1\11\4\0\1\11\2\0\2\11\3\0\1\111"+
    "\15\0\1\11\1\0\12\11\22\0\2\15\3\0\5\15"+
    "\1\0\4\15\1\0\2\15\3\0\1\112\5\15\1\0"+
    "\3\15\22\0\1\15\1\113\14\15\4\0\2\15\3\0"+
    "\5\15\1\0\2\15\1\114\1\15\1\0\1\115\1\15"+
    "\3\0\5\15\1\116\1\0\3\15\22\0\16\15\4\0"+
    "\2\15\3\0\5\15\1\0\4\15\1\0\2\15\3\0"+
    "\2\15\1\117\3\15\1\0\3\15\22\0\16\15\26\0"+
    "\1\120\60\0\2\15\3\0\5\15\1\0\4\15\1\0"+
    "\1\15\1\121\3\0\6\15\1\0\3\15\22\0\1\15"+
    "\1\122\14\15\4\0\2\15\3\0\5\15\1\0\2\15"+
    "\1\123\1\15\1\0\2\15\3\0\6\15\1\0\3\15"+
    "\22\0\16\15\4\0\2\15\3\0\5\15\1\0\4\15"+
    "\1\0\1\15\1\124\3\0\2\15\1\125\3\15\1\0"+
    "\1\15\1\126\1\15\22\0\16\15\7\0\1\11\2\0"+
    "\1\11\1\0\1\11\1\0\1\11\4\0\1\11\2\0"+
    "\2\11\21\0\1\127\1\0\12\11\25\0\1\11\2\0"+
    "\1\11\1\0\1\11\1\0\1\11\4\0\1\11\2\0"+
    "\2\11\21\0\1\11\1\0\3\11\1\130\6\11\25\0"+
    "\1\11\2\0\1\11\1\0\1\11\1\0\1\11\4\0"+
    "\1\11\2\0\1\131\1\11\21\0\1\11\1\0\12\11"+
    "\22\0\2\15\3\0\5\15\1\0\4\15\1\0\1\15"+
    "\1\132\3\0\6\15\1\0\3\15\22\0\16\15\4\0"+
    "\2\15\3\0\5\15\1\0\4\15\1\0\2\15\3\0"+
    "\2\15\1\133\3\15\1\0\3\15\22\0\16\15\4\0"+
    "\2\15\3\0\5\15\1\0\4\15\1\0\2\15\3\0"+
    "\6\15\1\0\3\15\22\0\7\15\1\134\1\15\1\135"+
    "\4\15\4\0\2\15\3\0\5\15\1\0\4\15\1\0"+
    "\2\15\3\0\5\15\1\136\1\0\3\15\22\0\16\15"+
    "\4\0\2\15\3\0\5\15\1\0\4\15\1\0\2\15"+
    "\3\0\4\15\1\137\1\15\1\0\3\15\22\0\16\15"+
    "\4\0\2\15\3\0\5\15\1\0\4\15\1\0\2\15"+
    "\3\0\6\15\1\0\3\15\22\0\7\15\1\140\6\15"+
    "\4\0\2\15\3\0\5\15\1\0\4\15\1\0\2\15"+
    "\3\0\6\15\1\0\3\15\22\0\3\15\1\141\12\15"+
    "\4\0\2\7\11\0\1\7\11\0\1\142\7\0\1\143"+
    "\36\0\1\7\1\143\1\142\43\0\1\144\65\0\1\145"+
    "\54\0\27\73\1\0\53\73\27\0\1\146\2\0\1\147"+
    "\50\0\2\75\2\0\24\75\1\0\52\75\7\0\1\100"+
    "\2\0\1\100\1\0\1\100\1\0\1\100\4\0\1\100"+
    "\2\0\2\100\21\0\1\100\1\0\12\100\22\0\2\15"+
    "\3\0\5\15\1\0\4\15\1\0\2\15\3\0\6\15"+
    "\1\0\3\15\22\0\4\15\1\150\11\15\22\0\1\151"+
    "\60\0\2\103\2\0\16\103\1\152\5\103\1\0\1\153"+
    "\51\103\4\0\2\15\3\0\5\15\1\0\4\15\1\0"+
    "\2\15\3\0\6\15\1\0\2\15\1\154\22\0\16\15"+
    "\3\110\1\0\77\110\36\0\1\155\50\0\2\15\3\0"+
    "\5\15\1\0\4\15\1\0\2\15\3\0\6\15\1\0"+
    "\3\15\22\0\6\15\1\156\7\15\4\0\2\15\3\0"+
    "\5\15\1\0\4\15\1\0\2\15\3\0\6\15\1\0"+
    "\3\15\22\0\1\157\15\15\4\0\2\15\3\0\5\15"+
    "\1\0\4\15\1\0\2\15\3\0\6\15\1\0\3\15"+
    "\22\0\6\15\1\160\7\15\4\0\2\15\3\0\5\15"+
    "\1\0\2\15\1\161\1\15\1\0\2\15\3\0\6\15"+
    "\1\0\3\15\22\0\1\162\15\15\4\0\2\15\3\0"+
    "\5\15\1\0\4\15\1\0\2\15\3\0\6\15\1\0"+
    "\3\15\22\0\10\15\1\163\5\15\61\0\1\164\25\0"+
    "\2\15\3\0\5\15\1\0\4\15\1\0\2\15\3\0"+
    "\6\15\1\0\3\15\22\0\1\165\15\15\4\0\2\15"+
    "\3\0\5\15\1\0\4\15\1\0\1\15\1\166\3\0"+
    "\6\15\1\0\3\15\22\0\16\15\4\0\2\15\3\0"+
    "\5\15\1\0\4\15\1\0\2\15\3\0\6\15\1\0"+
    "\3\15\22\0\2\15\1\167\13\15\4\0\2\15\3\0"+
    "\5\15\1\0\2\15\1\170\1\15\1\0\2\15\3\0"+
    "\6\15\1\0\3\15\22\0\4\15\1\171\11\15\4\0"+
    "\2\15\3\0\5\15\1\0\2\15\1\172\1\15\1\0"+
    "\2\15\3\0\6\15\1\0\3\15\22\0\16\15\4\0"+
    "\2\15\3\0\5\15\1\0\4\15\1\0\2\15\3\0"+
    "\6\15\1\0\3\15\22\0\2\15\1\173\13\15\4\0"+
    "\2\15\3\0\5\15\1\0\4\15\1\0\2\15\3\0"+
    "\2\15\1\174\3\15\1\0\3\15\22\0\16\15\4\0"+
    "\2\15\3\0\5\15\1\0\4\15\1\0\2\15\3\0"+
    "\6\15\1\0\3\15\22\0\6\15\1\175\7\15\4\0"+
    "\2\15\3\0\5\15\1\0\4\15\1\0\2\15\3\0"+
    "\6\15\1\0\3\15\22\0\1\176\15\15\4\0\2\15"+
    "\3\0\5\15\1\0\4\15\1\0\2\15\3\0\6\15"+
    "\1\0\2\15\1\177\22\0\16\15\4\0\2\15\3\0"+
    "\5\15\1\0\4\15\1\0\2\15\3\0\2\15\1\200"+
    "\3\15\1\0\3\15\22\0\16\15\4\0\2\15\3\0"+
    "\5\15\1\0\4\15\1\0\1\15\1\201\3\0\6\15"+
    "\1\0\3\15\22\0\16\15\4\0\1\142\12\0\3\142"+
    "\3\0\1\142\4\0\2\142\4\0\1\142\1\0\1\142"+
    "\35\0\1\142\21\0\1\143\60\0\1\143\31\0\1\146"+
    "\106\0\1\202\53\0\2\15\3\0\5\15\1\0\4\15"+
    "\1\0\1\15\1\203\3\0\2\15\1\204\3\15\1\0"+
    "\3\15\22\0\16\15\4\0\1\153\12\0\1\153\2\0"+
    "\1\151\55\0\1\153\6\0\2\15\3\0\5\15\1\0"+
    "\4\15\1\0\2\15\3\0\6\15\1\0\3\15\22\0"+
    "\3\15\1\205\12\15\42\0\1\206\44\0\2\15\3\0"+
    "\5\15\1\0\4\15\1\0\2\15\3\0\6\15\1\0"+
    "\1\15\1\207\1\15\22\0\16\15\4\0\2\15\3\0"+
    "\5\15\1\0\4\15\1\0\2\15\3\0\2\15\1\210"+
    "\3\15\1\0\3\15\22\0\16\15\4\0\2\15\3\0"+
    "\5\15\1\0\4\15\1\0\2\15\3\0\6\15\1\0"+
    "\1\15\1\211\1\15\22\0\16\15\4\0\2\15\3\0"+
    "\5\15\1\0\4\15\1\0\2\15\3\0\4\15\1\212"+
    "\1\15\1\0\3\15\22\0\16\15\4\0\2\15\3\0"+
    "\5\15\1\0\4\15\1\0\2\15\3\0\6\15\1\0"+
    "\3\15\22\0\2\15\1\213\13\15\4\0\2\15\3\0"+
    "\5\15\1\0\4\15\1\0\2\15\3\0\6\15\1\0"+
    "\3\15\22\0\2\15\1\214\13\15\2\164\2\0\24\164"+
    "\1\0\30\164\1\215\21\164\4\0\2\15\3\0\5\15"+
    "\1\0\4\15\1\0\2\15\3\0\2\15\1\216\3\15"+
    "\1\0\3\15\22\0\16\15\4\0\2\15\3\0\5\15"+
    "\1\0\4\15\1\0\2\15\3\0\6\15\1\0\3\15"+
    "\22\0\1\217\15\15\4\0\2\15\3\0\5\15\1\0"+
    "\4\15\1\0\1\15\1\220\3\0\6\15\1\0\3\15"+
    "\22\0\16\15\4\0\2\15\3\0\5\15\1\0\4\15"+
    "\1\0\1\15\1\221\3\0\6\15\1\0\3\15\22\0"+
    "\16\15\4\0\2\15\3\0\5\15\1\0\4\15\1\0"+
    "\2\15\3\0\4\15\1\222\1\15\1\0\3\15\22\0"+
    "\16\15\4\0\2\15\3\0\5\15\1\0\4\15\1\0"+
    "\2\15\3\0\2\15\1\223\3\15\1\0\3\15\22\0"+
    "\16\15\4\0\2\15\3\0\5\15\1\0\4\15\1\0"+
    "\2\15\3\0\5\15\1\224\1\0\3\15\22\0\16\15"+
    "\4\0\2\15\3\0\5\15\1\0\4\15\1\0\2\15"+
    "\3\0\2\15\1\225\3\15\1\0\3\15\22\0\16\15"+
    "\4\0\2\15\3\0\5\15\1\0\4\15\1\0\1\15"+
    "\1\226\3\0\6\15\1\0\3\15\22\0\16\15\4\0"+
    "\2\15\3\0\5\15\1\0\4\15\1\0\2\15\3\0"+
    "\4\15\1\227\1\15\1\0\3\15\22\0\16\15\4\0"+
    "\2\15\3\0\5\15\1\0\4\15\1\0\2\15\3\0"+
    "\6\15\1\0\3\15\22\0\4\15\1\230\11\15\4\0"+
    "\2\15\3\0\5\15\1\0\4\15\1\0\2\15\3\0"+
    "\6\15\1\0\3\15\22\0\1\15\1\231\14\15\34\0"+
    "\1\232\52\0\2\15\3\0\5\15\1\0\4\15\1\0"+
    "\2\15\3\0\6\15\1\0\3\15\22\0\1\15\1\233"+
    "\14\15\4\0\2\15\3\0\5\15\1\0\4\15\1\0"+
    "\2\15\3\0\4\15\1\234\1\15\1\0\3\15\22\0"+
    "\16\15\4\0\2\15\3\0\5\15\1\0\4\15\1\0"+
    "\2\15\3\0\6\15\1\0\3\15\22\0\1\15\1\235"+
    "\14\15\37\0\1\236\47\0\2\15\3\0\5\15\1\0"+
    "\4\15\1\0\2\15\3\0\6\15\1\0\3\15\22\0"+
    "\4\15\1\237\11\15\4\0\2\15\3\0\5\15\1\0"+
    "\4\15\1\0\2\15\3\0\6\15\1\0\3\15\22\0"+
    "\4\15\1\240\11\15\4\0\2\15\3\0\5\15\1\0"+
    "\4\15\1\0\2\15\3\0\1\241\5\15\1\0\3\15"+
    "\22\0\16\15\4\0\2\15\3\0\5\15\1\0\4\15"+
    "\1\0\1\15\1\242\3\0\6\15\1\0\3\15\22\0"+
    "\16\15\4\0\2\15\3\0\5\15\1\0\4\15\1\0"+
    "\2\15\3\0\6\15\1\0\3\15\22\0\11\15\1\243"+
    "\4\15\2\164\2\0\22\164\1\244\1\164\1\0\30\164"+
    "\1\215\21\164\4\0\2\15\3\0\5\15\1\0\4\15"+
    "\1\0\2\15\3\0\6\15\1\0\3\15\22\0\1\245"+
    "\15\15\4\0\2\15\3\0\5\15\1\0\4\15\1\0"+
    "\2\15\3\0\6\15\1\0\3\15\22\0\3\15\1\246"+
    "\12\15\4\0\2\15\3\0\5\15\1\0\4\15\1\0"+
    "\2\15\3\0\6\15\1\0\3\15\22\0\5\15\1\247"+
    "\10\15\4\0\2\15\3\0\5\15\1\0\2\15\1\250"+
    "\1\15\1\0\2\15\3\0\6\15\1\0\3\15\22\0"+
    "\16\15\4\0\2\15\3\0\5\15\1\0\4\15\1\0"+
    "\2\15\3\0\5\15\1\251\1\0\3\15\22\0\16\15"+
    "\4\0\2\15\3\0\5\15\1\0\4\15\1\0\2\15"+
    "\3\0\2\15\1\252\3\15\1\0\3\15\22\0\16\15"+
    "\4\0\2\15\3\0\5\15\1\0\4\15\1\0\2\15"+
    "\3\0\4\15\1\253\1\15\1\0\3\15\22\0\16\15"+
    "\35\0\1\254\51\0\2\15\3\0\5\15\1\0\4\15"+
    "\1\0\2\15\3\0\6\15\1\0\3\15\22\0\1\15"+
    "\1\255\14\15\4\0\2\15\3\0\5\15\1\0\4\15"+
    "\1\0\2\15\3\0\3\15\1\256\2\15\1\0\3\15"+
    "\22\0\16\15\4\0\2\15\3\0\5\15\1\0\4\15"+
    "\1\0\2\15\3\0\2\15\1\257\3\15\1\0\3\15"+
    "\22\0\16\15\40\0\1\260\46\0\2\15\3\0\5\15"+
    "\1\0\4\15\1\0\2\15\3\0\6\15\1\0\3\15"+
    "\22\0\2\15\1\261\13\15\4\0\2\15\3\0\5\15"+
    "\1\0\4\15\1\0\2\15\3\0\6\15\1\0\3\15"+
    "\22\0\2\15\1\262\13\15\4\0\2\15\3\0\5\15"+
    "\1\0\4\15\1\0\2\15\3\0\6\15\1\0\3\15"+
    "\22\0\1\15\1\263\2\15\1\264\11\15\4\0\2\15"+
    "\3\0\5\15\1\0\4\15\1\0\2\15\3\0\5\15"+
    "\1\265\1\0\3\15\22\0\16\15\4\0\2\15\3\0"+
    "\5\15\1\0\4\15\1\0\2\15\3\0\6\15\1\0"+
    "\3\15\22\0\6\15\1\266\7\15\2\164\2\0\24\164"+
    "\1\0\12\164\1\267\15\164\1\215\21\164\4\0\2\15"+
    "\3\0\5\15\1\0\4\15\1\0\2\15\3\0\6\15"+
    "\1\0\3\15\22\0\1\15\1\270\14\15\4\0\2\15"+
    "\3\0\5\15\1\0\4\15\1\0\2\15\3\0\4\15"+
    "\1\271\1\15\1\0\3\15\22\0\16\15\4\0\2\15"+
    "\3\0\5\15\1\0\4\15\1\0\2\15\3\0\2\15"+
    "\1\272\3\15\1\0\3\15\22\0\16\15\4\0\2\15"+
    "\3\0\5\15\1\0\4\15\1\0\2\15\3\0\3\15"+
    "\1\273\2\15\1\0\3\15\22\0\16\15\4\0\2\15"+
    "\3\0\5\15\1\0\2\15\1\274\1\15\1\0\2\15"+
    "\3\0\6\15\1\0\3\15\22\0\16\15\36\0\1\275"+
    "\50\0\2\15\3\0\5\15\1\0\4\15\1\0\2\15"+
    "\3\0\5\15\1\276\1\0\3\15\22\0\16\15\41\0"+
    "\1\277\45\0\2\15\3\0\5\15\1\0\4\15\1\0"+
    "\2\15\3\0\6\15\1\0\1\300\2\15\22\0\16\15"+
    "\4\0\2\15\3\0\5\15\1\0\4\15\1\0\2\15"+
    "\3\0\2\15\1\301\3\15\1\0\3\15\22\0\16\15"+
    "\4\0\2\15\3\0\5\15\1\0\4\15\1\0\2\15"+
    "\3\0\6\15\1\0\3\15\22\0\2\15\1\302\13\15"+
    "\4\0\2\15\3\0\5\15\1\0\4\15\1\0\2\15"+
    "\3\0\5\15\1\303\1\0\3\15\22\0\16\15\4\0"+
    "\2\15\3\0\5\15\1\0\4\15\1\0\2\15\3\0"+
    "\4\15\1\304\1\15\1\0\3\15\22\0\16\15\37\0"+
    "\1\305\105\0\1\306\44\0\2\15\3\0\5\15\1\0"+
    "\4\15\1\0\2\15\3\0\2\15\1\307\3\15\1\0"+
    "\3\15\22\0\16\15\4\0\2\15\3\0\5\15\1\0"+
    "\4\15\1\0\2\15\3\0\3\15\1\310\2\15\1\0"+
    "\3\15\22\0\16\15\4\0\2\15\3\0\5\15\1\0"+
    "\4\15\1\0\2\15\3\0\2\15\1\311\3\15\1\0"+
    "\3\15\22\0\16\15\40\0\1\312\75\0\1\313\53\0"+
    "\2\15\3\0\5\15\1\0\4\15\1\0\2\15\3\0"+
    "\6\15\1\0\2\15\1\314\22\0\16\15\41\0\1\315"+
    "\104\0\1\316\101\0\1\317\73\0\1\320\112\0\1\321"+
    "\37\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10050];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\1\1\11\3\1\1\11\26\1\6\11\1\1"+
    "\1\11\21\1\1\11\4\1\1\0\1\11\1\0\3\1"+
    "\1\0\1\11\1\0\3\1\1\0\32\1\2\11\1\1"+
    "\1\0\1\1\1\11\1\1\1\0\1\1\1\0\6\1"+
    "\1\0\15\1\1\0\3\1\1\0\6\1\1\0\14\1"+
    "\1\0\3\1\1\0\5\1\1\0\7\1\1\0\3\1"+
    "\1\0\14\1\1\0\1\1\1\0\5\1\2\0\3\1"+
    "\2\0\1\1\1\0\1\11\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[209];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char[] zzBuffer = new char[0];

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    private int commentStart;
    private int commentDepth;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _HaskellLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _HaskellLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3314) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer.toString().toCharArray();
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return TokenPackage.getBLOCK_COMMENT();
          }
        case 77: break;
        case 2: 
          { return TokenType.BAD_CHARACTER;
          }
        case 78: break;
        case 3: 
          { return TokenType.WHITE_SPACE;
          }
        case 79: break;
        case 4: 
          { return TokenType.NEW_LINE_INDENT;
          }
        case 80: break;
        case 5: 
          { return TokenPackage.getNUMBER();
          }
        case 81: break;
        case 6: 
          { return TokenPackage.getBACKQUOTE();
          }
        case 82: break;
        case 7: 
          { return TokenPackage.getOPERATOR_ID();
          }
        case 83: break;
        case 8: 
          { return TokenPackage.getTYPE_OR_CONS();
          }
        case 84: break;
        case 9: 
          { return TokenPackage.getID();
          }
        case 85: break;
        case 10: 
          { return TokenPackage.getUNDERSCORE();
          }
        case 86: break;
        case 11: 
          { return TokenPackage.getCOLON();
          }
        case 87: break;
        case 12: 
          { return TokenPackage.getTH_VAR_QUOTE();
          }
        case 88: break;
        case 13: 
          { return TokenPackage.getDOLLAR();
          }
        case 89: break;
        case 14: 
          { return TokenPackage.getBACK_SLASH();
          }
        case 90: break;
        case 15: 
          { return TokenPackage.getLEFT_BRACE();
          }
        case 91: break;
        case 16: 
          { return TokenPackage.getRIGHT_BRACE();
          }
        case 92: break;
        case 17: 
          { return TokenPackage.getLEFT_BRACKET();
          }
        case 93: break;
        case 18: 
          { return TokenPackage.getRIGHT_BRACKET();
          }
        case 94: break;
        case 19: 
          { return TokenPackage.getLEFT_PAREN();
          }
        case 95: break;
        case 20: 
          { return TokenPackage.getRIGHT_PAREN();
          }
        case 96: break;
        case 21: 
          { return TokenPackage.getSEMICOLON();
          }
        case 97: break;
        case 22: 
          { return TokenPackage.getDOT();
          }
        case 98: break;
        case 23: 
          { return TokenPackage.getCOMMA();
          }
        case 99: break;
        case 24: 
          { return TokenPackage.getEQUALS();
          }
        case 100: break;
        case 25: 
          { return TokenPackage.getVERTICAL_BAR();
          }
        case 101: break;
        case 26: 
          { return TokenPackage.getRIGHT_ARROW();
          }
        case 102: break;
        case 27: 
          { return TokenPackage.getQUESTION();
          }
        case 103: break;
        case 28: 
          { return TokenPackage.getHASH();
          }
        case 104: break;
        case 29: 
          { return TokenPackage.getAT();
          }
        case 105: break;
        case 30: 
          { return TokenPackage.getTILDE();
          }
        case 106: break;
        case 31: 
          { return TokenPackage.getEXCLAMATION();
          }
        case 107: break;
        case 32: 
          { 
          }
        case 108: break;
        case 33: 
          { return TokenPackage.getSTRING();
          }
        case 109: break;
        case 34: 
          { return TokenPackage.getOPERATOR_CONS();
          }
        case 110: break;
        case 35: 
          { return TokenPackage.getDOUBLE_COLON();
          }
        case 111: break;
        case 36: 
          { return TokenPackage.getTH_TY_QUOTE();
          }
        case 112: break;
        case 37: 
          { return TokenPackage.getAS_KW();
          }
        case 113: break;
        case 38: 
          { return TokenPackage.getEND_OF_LINE_COMMENT();
          }
        case 114: break;
        case 39: 
          { return TokenPackage.getIF_KW();
          }
        case 115: break;
        case 40: 
          { return TokenPackage.getIN_KW();
          }
        case 116: break;
        case 41: 
          { yybegin(BLOCK_COMMENT);
    commentDepth = 0;
    commentStart = getTokenStart();
          }
        case 117: break;
        case 42: 
          { return TokenPackage.getOF_KW();
          }
        case 118: break;
        case 43: 
          { return TokenPackage.getDO_KW();
          }
        case 119: break;
        case 44: 
          { return TokenPackage.getDOT_DOT();
          }
        case 120: break;
        case 45: 
          { return TokenPackage.getDOUBLE_ARROW();
          }
        case 121: break;
        case 46: 
          { return TokenPackage.getLEFT_ARROW();
          }
        case 122: break;
        case 47: 
          { if (commentDepth > 0) {
            commentDepth--;
        }
        else {
             int state = yystate();
             yybegin(YYINITIAL);
             zzStartRead = commentStart;
             return TokenPackage.getBLOCK_COMMENT();
        }
          }
        case 123: break;
        case 48: 
          { commentDepth++;
          }
        case 124: break;
        case 49: 
          { return TokenPackage.getCHARACTER();
          }
        case 125: break;
        case 50: 
          { return TokenPackage.getLET_KW();
          }
        case 126: break;
        case 51: 
          { return TokenPackage.getELSE_KW();
          }
        case 127: break;
        case 52: 
          { return TokenPackage.getCASE_KW();
          }
        case 128: break;
        case 53: 
          { return TokenPackage.getDATA_KW();
          }
        case 129: break;
        case 54: 
          { return TokenPackage.getSAFE();
          }
        case 130: break;
        case 55: 
          { return TokenPackage.getTHEN_KW();
          }
        case 131: break;
        case 56: 
          { return TokenPackage.getTYPE_KW();
          }
        case 132: break;
        case 57: 
          { return TokenPackage.getINFIX_KW();
          }
        case 133: break;
        case 58: 
          { return TokenPackage.getCLASS_KW();
          }
        case 134: break;
        case 59: 
          { return TokenPackage.getWHERE_KW();
          }
        case 135: break;
        case 60: 
          { return TokenPackage.getFORALL_KW();
          }
        case 136: break;
        case 61: 
          { return TokenPackage.getMODULE_KW();
          }
        case 137: break;
        case 62: 
          { return TokenPackage.getEXPORT();
          }
        case 138: break;
        case 63: 
          { return TokenPackage.getIMPORT_KW();
          }
        case 139: break;
        case 64: 
          { return TokenPackage.getINFIXL_KW();
          }
        case 140: break;
        case 65: 
          { return TokenPackage.getINFIXR_KW();
          }
        case 141: break;
        case 66: 
          { return TokenPackage.getPRAGMA();
          }
        case 142: break;
        case 67: 
          { return TokenPackage.getUNSAFE();
          }
        case 143: break;
        case 68: 
          { return TokenPackage.getHIDING_KW();
          }
        case 144: break;
        case 69: 
          { return TokenPackage.getFOREIGN_KW();
          }
        case 145: break;
        case 70: 
          { return TokenPackage.getNEWTYPE_KW();
          }
        case 146: break;
        case 71: 
          { return TokenPackage.getDEFAULT_KW();
          }
        case 147: break;
        case 72: 
          { return TokenPackage.getINSTANCE_KW();
          }
        case 148: break;
        case 73: 
          { return TokenPackage.getDERIVING_KW();
          }
        case 149: break;
        case 74: 
          { return TokenPackage.getQUALIFIED_KW();
          }
        case 150: break;
        case 75: 
          { yybegin(TEX); return TokenPackage.getBLOCK_COMMENT();
          }
        case 151: break;
        case 76: 
          { yybegin(YYINITIAL); return TokenPackage.getBLOCK_COMMENT();
          }
        case 152: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case BLOCK_COMMENT: {
              int state = yystate();
        yybegin(YYINITIAL);
        zzStartRead = commentStart;
        return TokenPackage.getBLOCK_COMMENT();
            }
            case 210: break;
            default:
            return null;
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
