/* The following code was generated by JFlex 1.5.1 */

package org.jetbrains.haskell.parser.lexer;

import java.util.*;
import com.intellij.lexer.*;
import com.intellij.psi.*;
import org.jetbrains.haskell.parser.token.*;
import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.1
 * from the specification file <tt>/Users/atsky/Dropbox/haskell-idea-plugin/plugin/src/org/jetbrains/haskell/parser/lexer/Haskell.flex</tt>
 */
class _HaskellLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int BLOCK_COMMENT = 2;
  public static final int TEX = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\3\0\1\5\1\0\1\1\3\0\1\0\1\3\1\27\1\2\1\2"+
    "\22\0\1\1\1\61\1\7\1\75\1\22\2\6\1\21\1\45\1\46"+
    "\1\6\1\6\1\51\1\25\1\50\1\6\1\76\7\16\2\4\1\15"+
    "\1\47\1\54\1\52\1\55\1\6\1\57\6\17\10\10\1\77\10\10"+
    "\1\100\2\10\1\43\1\26\1\44\1\6\1\14\1\0\1\24\1\31"+
    "\1\37\1\41\1\32\1\20\1\33\1\71\1\34\2\12\1\63\1\23"+
    "\1\35\1\40\1\70\1\74\1\66\1\62\1\64\1\65\1\67\1\72"+
    "\1\30\1\73\1\12\1\36\1\53\1\42\1\60\6\0\1\27\33\0"+
    "\11\6\1\12\2\6\1\0\4\6\2\0\1\6\1\12\3\6\1\0"+
    "\1\12\1\6\3\0\1\6\27\10\1\6\7\10\30\12\1\6\10\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\2\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\2\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\2\10\1\12"+
    "\1\10\1\12\1\10\3\12\2\10\1\12\1\10\1\12\2\10\1\12"+
    "\3\10\2\12\4\10\1\12\2\10\1\12\3\10\3\12\2\10\1\12"+
    "\2\10\1\12\1\10\1\12\1\10\1\12\2\10\1\12\1\10\2\12"+
    "\1\10\1\12\2\10\1\12\3\10\1\12\1\10\1\12\2\10\2\12"+
    "\1\0\1\10\3\12\4\0\1\10\1\0\1\12\1\10\1\0\1\12"+
    "\1\10\1\0\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10"+
    "\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\2\12\1\10"+
    "\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10"+
    "\1\12\1\10\1\12\1\10\1\12\1\10\2\12\1\10\1\0\1\12"+
    "\1\10\1\12\3\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\7\12\2\10\1\12\2\10\2\12\1\10\1\12\4\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\105\12\1\0\44\12"+
    "\7\0\2\12\4\6\14\0\16\6\5\12\7\6\1\0\1\6\1\0"+
    "\21\6\105\0\1\12\52\0\1\10\1\12\1\10\1\12\1\0\1\6"+
    "\1\10\1\12\2\0\4\12\1\6\5\0\2\6\1\10\1\6\3\10"+
    "\1\0\1\10\1\0\2\10\1\12\21\10\1\0\11\10\43\12\1\10"+
    "\2\12\3\10\3\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10"+
    "\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10"+
    "\1\12\1\10\1\12\1\10\1\12\1\10\5\12\1\10\1\12\1\6"+
    "\1\10\1\12\2\10\2\12\63\10\60\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\6\7\0\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\2\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\2\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\11\0\46\10"+
    "\3\0\6\6\1\0\47\12\1\0\2\6\4\0\1\6\56\0\1\6"+
    "\1\0\1\6\2\0\1\6\2\0\1\6\54\0\2\6\21\0\12\6"+
    "\13\0\1\6\2\0\2\6\112\0\4\6\146\0\1\6\11\0\1\6"+
    "\12\0\1\6\23\0\2\6\1\0\16\6\350\0\4\6\66\0\17\6"+
    "\37\0\1\6\u0105\0\2\6\12\0\1\6\201\0\2\6\6\0\2\6"+
    "\364\0\2\6\176\0\1\6\202\0\10\6\204\0\1\6\371\0\1\6"+
    "\172\0\1\6\112\0\1\6\17\0\1\6\12\0\2\6\245\0\27\6"+
    "\2\0\6\6\24\0\1\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\107\0\1\6\70\0\10\6\1\0\6\6\1\0\15\6\157\0\6\6"+
    "\116\0\2\6\46\10\1\0\1\10\5\0\1\10\55\0\1\6\u0264\0"+
    "\11\6\47\0\12\6\146\0\1\6\u026c\0\2\6\54\0\2\6\116\0"+
    "\3\6\107\0\2\6\235\0\3\6\1\0\4\6\44\0\13\6\u0135\0"+
    "\1\6\3\0\2\6\230\0\42\6\36\0\2\6\200\0\7\6\1\0"+
    "\6\6\254\0\21\6\11\0\11\6\177\0\4\6\73\0\5\6\76\0"+
    "\2\6\100\0\10\6\13\0\1\6\54\0\300\12\100\0\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\11\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\11\12\10\10\6\12\2\0\6\10"+
    "\2\0\10\12\10\10\10\12\10\10\6\12\2\0\6\10\2\0\10\12"+
    "\1\0\1\10\1\0\1\10\1\0\1\10\1\0\1\10\10\12\10\10"+
    "\16\12\2\0\10\12\10\0\10\12\10\0\10\12\10\0\5\12\1\0"+
    "\2\12\4\10\1\0\1\6\1\12\3\6\3\12\1\0\2\12\4\10"+
    "\1\0\3\6\4\12\2\0\2\12\4\10\1\0\3\6\10\12\5\10"+
    "\3\6\2\0\3\12\1\0\2\12\4\10\1\0\2\6\21\0\30\6"+
    "\1\27\1\27\6\0\57\6\22\0\1\12\10\0\5\6\1\12\12\0"+
    "\5\6\1\0\15\12\3\0\33\6\105\0\2\6\1\10\4\6\1\10"+
    "\2\6\1\12\3\10\2\12\3\10\1\12\1\6\1\10\3\6\5\10"+
    "\6\6\1\10\1\6\1\10\1\6\1\10\1\6\4\10\1\6\1\12"+
    "\4\10\1\12\4\0\1\12\2\6\2\12\2\10\5\6\1\10\4\12"+
    "\4\6\1\12\1\6\20\0\20\10\20\12\3\0\1\10\1\12\13\0"+
    "\2\6\1\56\155\6\1\6\u01f3\6\14\0\47\6\31\0\13\6\121\0"+
    "\32\6\32\11\32\13\26\0\u0200\6\1\0\165\6\36\0\u03b9\6\3\0"+
    "\12\6\246\0\57\10\1\0\57\12\1\0\1\10\1\12\3\10\2\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\4\10\1\12\1\10\2\12"+
    "\1\10\10\12\3\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\2\12\6\6\1\10\1\12\1\10\1\12\3\0\1\10\1\12"+
    "\5\0\4\6\1\0\2\6\46\12\1\0\1\12\5\0\1\12\102\0"+
    "\1\6\217\0\57\6\1\0\14\6\104\0\32\6\1\0\131\6\14\0"+
    "\326\6\32\0\14\6\5\0\4\6\3\0\31\6\17\0\1\6\5\0"+
    "\2\6\5\0\3\6\133\0\2\6\3\0\1\6\132\0\1\6\224\0"+
    "\2\6\4\0\12\6\40\0\44\6\34\0\37\6\13\0\36\6\10\0"+
    "\1\6\17\0\40\6\12\0\47\6\17\0\77\6\1\0\u0100\6\u19c0\0"+
    "\100\6\u5690\0\67\6\67\0\2\6\u010d\0\3\6\60\0\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12"+
    "\1\10\1\12\1\10\1\12\5\0\1\6\12\0\1\6\1\0\1\10"+
    "\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10"+
    "\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10"+
    "\1\12\1\10\1\12\132\0\6\6\10\0\27\6\11\0\2\6\1\10"+
    "\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10"+
    "\1\12\1\10\3\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10"+
    "\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10"+
    "\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10"+
    "\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10"+
    "\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10"+
    "\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10"+
    "\1\12\1\10\1\12\1\10\12\12\1\10\1\12\1\10\1\12\2\10"+
    "\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\0"+
    "\2\6\1\10\1\12\1\10\1\12\1\0\1\10\1\12\1\10\1\12"+
    "\14\0\1\10\1\12\1\10\1\12\1\10\1\12\1\10\1\12\1\10"+
    "\1\12\1\10\115\0\3\12\55\0\4\6\12\0\4\6\72\0\4\6"+
    "\126\0\2\6\50\0\3\6\63\0\2\6\57\0\1\6\141\0\15\6"+
    "\20\0\2\6\174\0\4\6\27\0\3\6\144\0\2\6\20\0\2\6"+
    "\371\0\1\6\u4f14\0\7\12\14\0\5\12\21\0\1\6\210\0\20\6"+
    "\u017c\0\2\6\274\0\2\6\22\0\12\6\26\0\43\6\1\0\23\6"+
    "\1\0\4\6\225\0\17\6\12\0\7\6\32\10\6\6\32\12\13\6"+
    "\172\0\7\6\1\0\7\6\15\0\2\6\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\2"+
    "\1\7\1\6\1\10\1\6\1\11\1\12\1\10\1\13"+
    "\1\14\2\10\1\6\1\15\3\10\1\16\3\10\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\6\1\31\1\32\1\33\1\34\7\10\1\5"+
    "\3\35\2\1\1\0\1\36\1\0\1\37\1\40\1\10"+
    "\1\0\1\41\1\0\1\10\1\42\1\43\1\0\2\10"+
    "\1\44\1\10\1\45\1\10\1\46\2\10\1\47\2\10"+
    "\1\50\1\51\1\52\1\53\10\10\2\5\1\54\1\55"+
    "\1\1\1\0\1\10\2\56\1\0\1\10\1\0\6\10"+
    "\1\0\6\10\1\57\6\10\1\0\3\10\1\0\1\10"+
    "\1\60\4\10\1\0\1\61\1\10\1\62\2\10\1\63"+
    "\1\64\1\65\4\10\1\0\3\10\1\0\2\10\1\66"+
    "\2\10\1\0\1\67\4\10\1\70\1\10\1\0\1\71"+
    "\1\10\1\72\1\0\1\73\1\74\1\75\1\76\2\10"+
    "\1\77\2\10\1\100\1\101\1\10\1\0\1\102\1\0"+
    "\1\10\1\103\1\104\2\10\2\0\1\105\1\106\1\10"+
    "\2\0\1\107\1\0\1\110\2\0\1\111";

  private static int [] zzUnpackAction() {
    int [] result = new int[206];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\u0186\0\u01c7"+
    "\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c\0\u02cb\0\u034d\0\u038e"+
    "\0\u03cf\0\u01c7\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514\0\u0555"+
    "\0\u0596\0\u05d7\0\u0618\0\u0659\0\u069a\0\303\0\303\0\303"+
    "\0\303\0\303\0\303\0\u06db\0\303\0\u071c\0\u01c7\0\u075d"+
    "\0\u01c7\0\u01c7\0\u01c7\0\u01c7\0\u079e\0\u07df\0\u0820\0\u0861"+
    "\0\u08a2\0\u08e3\0\u0924\0\u0965\0\303\0\u09a6\0\u09e7\0\u0a28"+
    "\0\u0a69\0\u0208\0\303\0\u0aaa\0\u0aeb\0\u0aeb\0\u0b2c\0\u0b6d"+
    "\0\303\0\u0bae\0\u0bef\0\u02cb\0\u0c30\0\u0c71\0\u0cb2\0\u0cf3"+
    "\0\u02cb\0\u0d34\0\u0d75\0\u0db6\0\u0df7\0\u0e38\0\u0e79\0\u02cb"+
    "\0\u0eba\0\u0efb\0\u02cb\0\u01c7\0\u01c7\0\u01c7\0\u0f3c\0\u0f7d"+
    "\0\u0fbe\0\u0fff\0\u1040\0\u1081\0\u10c2\0\u1103\0\u1144\0\u1185"+
    "\0\303\0\303\0\u11c6\0\u1207\0\u1248\0\303\0\u0b6d\0\u1289"+
    "\0\u12ca\0\u130b\0\u134c\0\u138d\0\u13ce\0\u140f\0\u1450\0\u1491"+
    "\0\u14d2\0\u1513\0\u1554\0\u1595\0\u15d6\0\u1617\0\u1658\0\u02cb"+
    "\0\u1699\0\u16da\0\u171b\0\u175c\0\u179d\0\u17de\0\u181f\0\u1860"+
    "\0\u18a1\0\u18e2\0\u1923\0\u1964\0\u02cb\0\u19a5\0\u19e6\0\u1a27"+
    "\0\u1a68\0\u1aa9\0\u02cb\0\u1aea\0\u02cb\0\u1b2b\0\u1b6c\0\u02cb"+
    "\0\u02cb\0\u02cb\0\u1bad\0\u1bee\0\u1c2f\0\u1c70\0\u1cb1\0\u1cf2"+
    "\0\u1d33\0\u1d74\0\u1db5\0\u1df6\0\u1e37\0\u1e78\0\u1eb9\0\u1efa"+
    "\0\u1f3b\0\u02cb\0\u1f7c\0\u1fbd\0\u1ffe\0\u203f\0\u02cb\0\u2080"+
    "\0\u20c1\0\u02cb\0\u2102\0\u02cb\0\u2143\0\u02cb\0\u02cb\0\u02cb"+
    "\0\u02cb\0\u2184\0\u21c5\0\u14d2\0\u2206\0\u2247\0\u02cb\0\u02cb"+
    "\0\u2288\0\u22c9\0\u02cb\0\u230a\0\u234b\0\u02cb\0\u02cb\0\u238c"+
    "\0\u23cd\0\u240e\0\u244f\0\u02cb\0\u02cb\0\u2490\0\u24d1\0\u2512"+
    "\0\u02cb\0\u2553\0\303\0\u2594\0\u25d5\0\303";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[206];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\2\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\7\1\12\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\0\2\14\1\27"+
    "\1\14\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\10\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\3\14\1\61\1\62\1\14\1\63"+
    "\1\10\1\64\2\12\25\65\1\66\1\65\1\0\6\65"+
    "\1\67\42\65\26\70\1\71\52\70\102\0\2\5\77\0"+
    "\2\6\102\0\2\7\10\0\1\7\57\0\1\7\10\0"+
    "\1\10\2\0\1\10\1\0\1\10\1\0\1\10\4\0"+
    "\1\10\2\0\2\10\21\0\1\10\1\0\10\10\13\0"+
    "\1\10\3\0\7\72\1\73\16\72\1\74\52\72\4\0"+
    "\2\12\2\0\5\12\1\0\4\12\1\0\2\12\3\0"+
    "\6\12\1\0\3\12\20\0\13\12\1\0\3\12\4\0"+
    "\2\12\1\10\1\0\1\12\1\13\1\12\1\13\1\12"+
    "\1\10\4\12\1\10\2\12\2\10\1\0\6\12\1\0"+
    "\3\12\6\0\1\10\1\0\10\10\13\12\1\10\3\12"+
    "\4\0\2\14\2\0\5\14\1\0\4\14\1\0\2\14"+
    "\3\0\6\14\1\0\3\14\20\0\13\14\1\0\3\14"+
    "\4\0\2\14\1\10\1\0\1\14\1\15\1\14\1\15"+
    "\1\14\1\10\4\14\1\10\2\14\2\10\1\0\6\14"+
    "\1\0\3\14\6\0\1\10\1\0\10\10\13\14\1\10"+
    "\3\14\6\0\1\75\2\0\1\75\1\0\1\75\1\0"+
    "\1\76\4\0\1\75\2\0\2\75\21\0\1\75\1\0"+
    "\10\75\13\0\1\75\7\0\2\14\2\0\5\14\1\0"+
    "\4\14\1\0\2\14\3\0\6\14\1\0\1\14\1\77"+
    "\1\14\20\0\13\14\1\0\3\14\21\100\1\101\4\100"+
    "\1\102\52\100\4\0\2\14\2\0\5\14\1\0\4\14"+
    "\1\0\2\14\3\0\6\14\1\0\1\14\1\103\1\14"+
    "\20\0\13\14\1\0\3\14\4\0\2\14\2\0\5\14"+
    "\1\0\4\14\1\0\2\14\3\0\6\14\1\0\3\14"+
    "\20\0\1\104\12\14\1\0\3\14\6\0\1\10\2\0"+
    "\1\10\1\0\1\10\1\0\1\10\4\0\1\10\2\0"+
    "\1\105\1\10\21\0\1\10\1\0\3\10\1\51\4\10"+
    "\13\0\1\10\11\0\1\10\2\0\1\10\1\0\1\10"+
    "\1\0\1\10\4\0\1\10\2\0\2\10\3\0\1\106"+
    "\15\0\1\10\1\0\10\10\13\0\1\10\7\0\2\14"+
    "\2\0\5\14\1\0\4\14\1\0\2\14\3\0\1\107"+
    "\5\14\1\0\3\14\20\0\1\14\1\110\11\14\1\0"+
    "\3\14\4\0\2\14\2\0\5\14\1\0\2\14\1\111"+
    "\1\14\1\0\1\112\1\14\3\0\5\14\1\113\1\0"+
    "\3\14\20\0\13\14\1\0\3\14\4\0\2\14\2\0"+
    "\5\14\1\0\4\14\1\0\2\14\3\0\2\14\1\114"+
    "\3\14\1\0\3\14\20\0\13\14\1\0\3\14\25\0"+
    "\1\115\57\0\2\14\2\0\5\14\1\0\4\14\1\0"+
    "\1\14\1\116\3\0\6\14\1\0\3\14\20\0\1\14"+
    "\1\117\11\14\1\0\3\14\4\0\2\14\2\0\5\14"+
    "\1\0\2\14\1\120\1\14\1\0\2\14\3\0\6\14"+
    "\1\0\3\14\20\0\13\14\1\0\3\14\4\0\2\14"+
    "\2\0\5\14\1\0\4\14\1\0\1\14\1\121\3\0"+
    "\2\14\1\122\3\14\1\0\1\14\1\123\1\14\20\0"+
    "\13\14\1\0\3\14\6\0\1\10\2\0\1\10\1\0"+
    "\1\10\1\0\1\10\4\0\1\10\2\0\2\10\21\0"+
    "\1\124\1\0\10\10\13\0\1\10\11\0\1\10\2\0"+
    "\1\10\1\0\1\10\1\0\1\10\4\0\1\10\2\0"+
    "\2\10\21\0\1\10\1\0\3\10\1\125\4\10\13\0"+
    "\1\10\11\0\1\10\2\0\1\10\1\0\1\10\1\0"+
    "\1\10\4\0\1\10\2\0\1\126\1\10\21\0\1\10"+
    "\1\0\10\10\13\0\1\10\7\0\2\14\2\0\5\14"+
    "\1\0\4\14\1\0\1\14\1\127\3\0\6\14\1\0"+
    "\3\14\20\0\13\14\1\0\3\14\4\0\2\14\2\0"+
    "\5\14\1\0\4\14\1\0\2\14\3\0\2\14\1\130"+
    "\3\14\1\0\3\14\20\0\13\14\1\0\3\14\4\0"+
    "\2\14\2\0\5\14\1\0\4\14\1\0\2\14\3\0"+
    "\6\14\1\0\3\14\20\0\7\14\1\131\1\14\1\132"+
    "\1\14\1\0\3\14\4\0\2\14\2\0\5\14\1\0"+
    "\4\14\1\0\2\14\3\0\5\14\1\133\1\0\3\14"+
    "\20\0\13\14\1\0\3\14\4\0\2\14\2\0\5\14"+
    "\1\0\4\14\1\0\2\14\3\0\4\14\1\134\1\14"+
    "\1\0\3\14\20\0\13\14\1\0\3\14\4\0\2\14"+
    "\2\0\5\14\1\0\4\14\1\0\2\14\3\0\6\14"+
    "\1\0\3\14\20\0\7\14\1\135\3\14\1\0\3\14"+
    "\4\0\2\14\2\0\5\14\1\0\4\14\1\0\2\14"+
    "\3\0\6\14\1\0\3\14\20\0\3\14\1\136\7\14"+
    "\1\0\3\14\4\0\2\7\10\0\1\7\11\0\1\137"+
    "\7\0\1\140\35\0\1\7\1\140\1\137\42\0\1\141"+
    "\63\0\1\142\53\0\26\70\1\0\52\70\26\0\1\143"+
    "\2\0\1\144\47\0\2\72\2\0\23\72\1\0\51\72"+
    "\6\0\1\75\2\0\1\75\1\0\1\75\1\0\1\75"+
    "\4\0\1\75\2\0\2\75\21\0\1\75\1\0\10\75"+
    "\13\0\1\75\7\0\2\14\2\0\5\14\1\0\4\14"+
    "\1\0\2\14\3\0\6\14\1\0\3\14\20\0\4\14"+
    "\1\145\6\14\1\0\3\14\21\0\1\146\57\0\2\100"+
    "\2\0\15\100\1\147\5\100\1\0\1\150\50\100\4\0"+
    "\2\14\2\0\5\14\1\0\4\14\1\0\2\14\3\0"+
    "\6\14\1\0\2\14\1\151\20\0\13\14\1\0\3\14"+
    "\3\105\1\0\75\105\35\0\1\152\47\0\2\14\2\0"+
    "\5\14\1\0\4\14\1\0\2\14\3\0\6\14\1\0"+
    "\3\14\20\0\6\14\1\153\4\14\1\0\3\14\4\0"+
    "\2\14\2\0\5\14\1\0\4\14\1\0\2\14\3\0"+
    "\6\14\1\0\3\14\20\0\1\154\12\14\1\0\3\14"+
    "\4\0\2\14\2\0\5\14\1\0\4\14\1\0\2\14"+
    "\3\0\6\14\1\0\3\14\20\0\6\14\1\155\4\14"+
    "\1\0\3\14\4\0\2\14\2\0\5\14\1\0\2\14"+
    "\1\156\1\14\1\0\2\14\3\0\6\14\1\0\3\14"+
    "\20\0\1\157\12\14\1\0\3\14\4\0\2\14\2\0"+
    "\5\14\1\0\4\14\1\0\2\14\3\0\6\14\1\0"+
    "\3\14\20\0\10\14\1\160\2\14\1\0\3\14\75\0"+
    "\1\161\7\0\2\14\2\0\5\14\1\0\4\14\1\0"+
    "\2\14\3\0\6\14\1\0\3\14\20\0\1\162\12\14"+
    "\1\0\3\14\4\0\2\14\2\0\5\14\1\0\4\14"+
    "\1\0\1\14\1\163\3\0\6\14\1\0\3\14\20\0"+
    "\13\14\1\0\3\14\4\0\2\14\2\0\5\14\1\0"+
    "\4\14\1\0\2\14\3\0\6\14\1\0\3\14\20\0"+
    "\2\14\1\164\10\14\1\0\3\14\4\0\2\14\2\0"+
    "\5\14\1\0\2\14\1\165\1\14\1\0\2\14\3\0"+
    "\6\14\1\0\3\14\20\0\4\14\1\166\6\14\1\0"+
    "\3\14\4\0\2\14\2\0\5\14\1\0\2\14\1\167"+
    "\1\14\1\0\2\14\3\0\6\14\1\0\3\14\20\0"+
    "\13\14\1\0\3\14\4\0\2\14\2\0\5\14\1\0"+
    "\4\14\1\0\2\14\3\0\6\14\1\0\3\14\20\0"+
    "\2\14\1\170\10\14\1\0\3\14\4\0\2\14\2\0"+
    "\5\14\1\0\4\14\1\0\2\14\3\0\2\14\1\171"+
    "\3\14\1\0\3\14\20\0\13\14\1\0\3\14\4\0"+
    "\2\14\2\0\5\14\1\0\4\14\1\0\2\14\3\0"+
    "\6\14\1\0\3\14\20\0\6\14\1\172\4\14\1\0"+
    "\3\14\4\0\2\14\2\0\5\14\1\0\4\14\1\0"+
    "\2\14\3\0\6\14\1\0\3\14\20\0\1\173\12\14"+
    "\1\0\3\14\4\0\2\14\2\0\5\14\1\0\4\14"+
    "\1\0\2\14\3\0\6\14\1\0\2\14\1\174\20\0"+
    "\13\14\1\0\3\14\4\0\2\14\2\0\5\14\1\0"+
    "\4\14\1\0\2\14\3\0\2\14\1\175\3\14\1\0"+
    "\3\14\20\0\13\14\1\0\3\14\4\0\2\14\2\0"+
    "\5\14\1\0\4\14\1\0\1\14\1\176\3\0\6\14"+
    "\1\0\3\14\20\0\13\14\1\0\3\14\4\0\1\137"+
    "\11\0\3\137\3\0\1\137\4\0\2\137\4\0\1\137"+
    "\1\0\1\137\34\0\1\137\20\0\1\140\57\0\1\140"+
    "\30\0\1\143\104\0\1\177\52\0\2\14\2\0\5\14"+
    "\1\0\4\14\1\0\1\14\1\200\3\0\2\14\1\201"+
    "\3\14\1\0\3\14\20\0\13\14\1\0\3\14\4\0"+
    "\1\150\11\0\1\150\2\0\1\146\54\0\1\150\6\0"+
    "\2\14\2\0\5\14\1\0\4\14\1\0\2\14\3\0"+
    "\6\14\1\0\3\14\20\0\3\14\1\202\7\14\1\0"+
    "\3\14\41\0\1\203\43\0\2\14\2\0\5\14\1\0"+
    "\4\14\1\0\2\14\3\0\6\14\1\0\1\14\1\204"+
    "\1\14\20\0\13\14\1\0\3\14\4\0\2\14\2\0"+
    "\5\14\1\0\4\14\1\0\2\14\3\0\2\14\1\205"+
    "\3\14\1\0\3\14\20\0\13\14\1\0\3\14\4\0"+
    "\2\14\2\0\5\14\1\0\4\14\1\0\2\14\3\0"+
    "\6\14\1\0\1\14\1\206\1\14\20\0\13\14\1\0"+
    "\3\14\4\0\2\14\2\0\5\14\1\0\4\14\1\0"+
    "\2\14\3\0\4\14\1\207\1\14\1\0\3\14\20\0"+
    "\13\14\1\0\3\14\4\0\2\14\2\0\5\14\1\0"+
    "\4\14\1\0\2\14\3\0\6\14\1\0\3\14\20\0"+
    "\2\14\1\210\10\14\1\0\3\14\4\0\2\14\2\0"+
    "\5\14\1\0\4\14\1\0\2\14\3\0\6\14\1\0"+
    "\3\14\20\0\2\14\1\211\10\14\1\0\3\14\2\161"+
    "\2\0\23\161\1\0\45\161\1\212\3\161\4\0\2\14"+
    "\2\0\5\14\1\0\4\14\1\0\2\14\3\0\2\14"+
    "\1\213\3\14\1\0\3\14\20\0\13\14\1\0\3\14"+
    "\4\0\2\14\2\0\5\14\1\0\4\14\1\0\2\14"+
    "\3\0\6\14\1\0\3\14\20\0\1\214\12\14\1\0"+
    "\3\14\4\0\2\14\2\0\5\14\1\0\4\14\1\0"+
    "\1\14\1\215\3\0\6\14\1\0\3\14\20\0\13\14"+
    "\1\0\3\14\4\0\2\14\2\0\5\14\1\0\4\14"+
    "\1\0\1\14\1\216\3\0\6\14\1\0\3\14\20\0"+
    "\13\14\1\0\3\14\4\0\2\14\2\0\5\14\1\0"+
    "\4\14\1\0\2\14\3\0\4\14\1\217\1\14\1\0"+
    "\3\14\20\0\13\14\1\0\3\14\4\0\2\14\2\0"+
    "\5\14\1\0\4\14\1\0\2\14\3\0\2\14\1\220"+
    "\3\14\1\0\3\14\20\0\13\14\1\0\3\14\4\0"+
    "\2\14\2\0\5\14\1\0\4\14\1\0\2\14\3\0"+
    "\5\14\1\221\1\0\3\14\20\0\13\14\1\0\3\14"+
    "\4\0\2\14\2\0\5\14\1\0\4\14\1\0\2\14"+
    "\3\0\2\14\1\222\3\14\1\0\3\14\20\0\13\14"+
    "\1\0\3\14\4\0\2\14\2\0\5\14\1\0\4\14"+
    "\1\0\1\14\1\223\3\0\6\14\1\0\3\14\20\0"+
    "\13\14\1\0\3\14\4\0\2\14\2\0\5\14\1\0"+
    "\4\14\1\0\2\14\3\0\4\14\1\224\1\14\1\0"+
    "\3\14\20\0\13\14\1\0\3\14\4\0\2\14\2\0"+
    "\5\14\1\0\4\14\1\0\2\14\3\0\6\14\1\0"+
    "\3\14\20\0\4\14\1\225\6\14\1\0\3\14\4\0"+
    "\2\14\2\0\5\14\1\0\4\14\1\0\2\14\3\0"+
    "\6\14\1\0\3\14\20\0\1\14\1\226\11\14\1\0"+
    "\3\14\33\0\1\227\51\0\2\14\2\0\5\14\1\0"+
    "\4\14\1\0\2\14\3\0\6\14\1\0\3\14\20\0"+
    "\1\14\1\230\11\14\1\0\3\14\4\0\2\14\2\0"+
    "\5\14\1\0\4\14\1\0\2\14\3\0\4\14\1\231"+
    "\1\14\1\0\3\14\20\0\13\14\1\0\3\14\4\0"+
    "\2\14\2\0\5\14\1\0\4\14\1\0\2\14\3\0"+
    "\6\14\1\0\3\14\20\0\1\14\1\232\11\14\1\0"+
    "\3\14\36\0\1\233\46\0\2\14\2\0\5\14\1\0"+
    "\4\14\1\0\2\14\3\0\6\14\1\0\3\14\20\0"+
    "\4\14\1\234\6\14\1\0\3\14\4\0\2\14\2\0"+
    "\5\14\1\0\4\14\1\0\2\14\3\0\6\14\1\0"+
    "\3\14\20\0\4\14\1\235\6\14\1\0\3\14\4\0"+
    "\2\14\2\0\5\14\1\0\4\14\1\0\2\14\3\0"+
    "\1\236\5\14\1\0\3\14\20\0\13\14\1\0\3\14"+
    "\4\0\2\14\2\0\5\14\1\0\4\14\1\0\1\14"+
    "\1\237\3\0\6\14\1\0\3\14\20\0\13\14\1\0"+
    "\3\14\4\0\2\14\2\0\5\14\1\0\4\14\1\0"+
    "\2\14\3\0\6\14\1\0\3\14\20\0\11\14\1\240"+
    "\1\14\1\0\3\14\2\161\2\0\21\161\1\241\1\161"+
    "\1\0\45\161\1\212\3\161\4\0\2\14\2\0\5\14"+
    "\1\0\4\14\1\0\2\14\3\0\6\14\1\0\3\14"+
    "\20\0\1\242\12\14\1\0\3\14\4\0\2\14\2\0"+
    "\5\14\1\0\4\14\1\0\2\14\3\0\6\14\1\0"+
    "\3\14\20\0\3\14\1\243\7\14\1\0\3\14\4\0"+
    "\2\14\2\0\5\14\1\0\4\14\1\0\2\14\3\0"+
    "\6\14\1\0\3\14\20\0\5\14\1\244\5\14\1\0"+
    "\3\14\4\0\2\14\2\0\5\14\1\0\2\14\1\245"+
    "\1\14\1\0\2\14\3\0\6\14\1\0\3\14\20\0"+
    "\13\14\1\0\3\14\4\0\2\14\2\0\5\14\1\0"+
    "\4\14\1\0\2\14\3\0\5\14\1\246\1\0\3\14"+
    "\20\0\13\14\1\0\3\14\4\0\2\14\2\0\5\14"+
    "\1\0\4\14\1\0\2\14\3\0\2\14\1\247\3\14"+
    "\1\0\3\14\20\0\13\14\1\0\3\14\4\0\2\14"+
    "\2\0\5\14\1\0\4\14\1\0\2\14\3\0\4\14"+
    "\1\250\1\14\1\0\3\14\20\0\13\14\1\0\3\14"+
    "\34\0\1\251\50\0\2\14\2\0\5\14\1\0\4\14"+
    "\1\0\2\14\3\0\6\14\1\0\3\14\20\0\1\14"+
    "\1\252\11\14\1\0\3\14\4\0\2\14\2\0\5\14"+
    "\1\0\4\14\1\0\2\14\3\0\3\14\1\253\2\14"+
    "\1\0\3\14\20\0\13\14\1\0\3\14\4\0\2\14"+
    "\2\0\5\14\1\0\4\14\1\0\2\14\3\0\2\14"+
    "\1\254\3\14\1\0\3\14\20\0\13\14\1\0\3\14"+
    "\37\0\1\255\45\0\2\14\2\0\5\14\1\0\4\14"+
    "\1\0\2\14\3\0\6\14\1\0\3\14\20\0\2\14"+
    "\1\256\10\14\1\0\3\14\4\0\2\14\2\0\5\14"+
    "\1\0\4\14\1\0\2\14\3\0\6\14\1\0\3\14"+
    "\20\0\2\14\1\257\10\14\1\0\3\14\4\0\2\14"+
    "\2\0\5\14\1\0\4\14\1\0\2\14\3\0\6\14"+
    "\1\0\3\14\20\0\1\14\1\260\2\14\1\261\6\14"+
    "\1\0\3\14\4\0\2\14\2\0\5\14\1\0\4\14"+
    "\1\0\2\14\3\0\5\14\1\262\1\0\3\14\20\0"+
    "\13\14\1\0\3\14\4\0\2\14\2\0\5\14\1\0"+
    "\4\14\1\0\2\14\3\0\6\14\1\0\3\14\20\0"+
    "\6\14\1\263\4\14\1\0\3\14\2\161\2\0\23\161"+
    "\1\0\12\161\1\264\32\161\1\212\3\161\4\0\2\14"+
    "\2\0\5\14\1\0\4\14\1\0\2\14\3\0\6\14"+
    "\1\0\3\14\20\0\1\14\1\265\11\14\1\0\3\14"+
    "\4\0\2\14\2\0\5\14\1\0\4\14\1\0\2\14"+
    "\3\0\4\14\1\266\1\14\1\0\3\14\20\0\13\14"+
    "\1\0\3\14\4\0\2\14\2\0\5\14\1\0\4\14"+
    "\1\0\2\14\3\0\2\14\1\267\3\14\1\0\3\14"+
    "\20\0\13\14\1\0\3\14\4\0\2\14\2\0\5\14"+
    "\1\0\4\14\1\0\2\14\3\0\3\14\1\270\2\14"+
    "\1\0\3\14\20\0\13\14\1\0\3\14\4\0\2\14"+
    "\2\0\5\14\1\0\2\14\1\271\1\14\1\0\2\14"+
    "\3\0\6\14\1\0\3\14\20\0\13\14\1\0\3\14"+
    "\35\0\1\272\47\0\2\14\2\0\5\14\1\0\4\14"+
    "\1\0\2\14\3\0\5\14\1\273\1\0\3\14\20\0"+
    "\13\14\1\0\3\14\40\0\1\274\44\0\2\14\2\0"+
    "\5\14\1\0\4\14\1\0\2\14\3\0\6\14\1\0"+
    "\1\275\2\14\20\0\13\14\1\0\3\14\4\0\2\14"+
    "\2\0\5\14\1\0\4\14\1\0\2\14\3\0\2\14"+
    "\1\276\3\14\1\0\3\14\20\0\13\14\1\0\3\14"+
    "\4\0\2\14\2\0\5\14\1\0\4\14\1\0\2\14"+
    "\3\0\6\14\1\0\3\14\20\0\2\14\1\277\10\14"+
    "\1\0\3\14\4\0\2\14\2\0\5\14\1\0\4\14"+
    "\1\0\2\14\3\0\5\14\1\300\1\0\3\14\20\0"+
    "\13\14\1\0\3\14\4\0\2\14\2\0\5\14\1\0"+
    "\4\14\1\0\2\14\3\0\4\14\1\301\1\14\1\0"+
    "\3\14\20\0\13\14\1\0\3\14\36\0\1\302\103\0"+
    "\1\303\43\0\2\14\2\0\5\14\1\0\4\14\1\0"+
    "\2\14\3\0\2\14\1\304\3\14\1\0\3\14\20\0"+
    "\13\14\1\0\3\14\4\0\2\14\2\0\5\14\1\0"+
    "\4\14\1\0\2\14\3\0\3\14\1\305\2\14\1\0"+
    "\3\14\20\0\13\14\1\0\3\14\4\0\2\14\2\0"+
    "\5\14\1\0\4\14\1\0\2\14\3\0\2\14\1\306"+
    "\3\14\1\0\3\14\20\0\13\14\1\0\3\14\37\0"+
    "\1\307\73\0\1\310\52\0\2\14\2\0\5\14\1\0"+
    "\4\14\1\0\2\14\3\0\6\14\1\0\2\14\1\311"+
    "\20\0\13\14\1\0\3\14\40\0\1\312\102\0\1\313"+
    "\77\0\1\314\71\0\1\315\110\0\1\316\36\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9750];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\1\1\11\31\1\6\11\1\1\1\11\17\1"+
    "\1\11\4\1\1\0\1\11\1\0\3\1\1\0\1\11"+
    "\1\0\3\1\1\0\32\1\2\11\1\1\1\0\1\1"+
    "\1\11\1\1\1\0\1\1\1\0\6\1\1\0\15\1"+
    "\1\0\3\1\1\0\6\1\1\0\14\1\1\0\3\1"+
    "\1\0\5\1\1\0\7\1\1\0\3\1\1\0\14\1"+
    "\1\0\1\1\1\0\5\1\2\0\3\1\2\0\1\1"+
    "\1\0\1\11\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[206];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char[] zzBuffer = new char[0];

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    private int commentStart;
    private int commentDepth;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _HaskellLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _HaskellLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3314) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer.toString().toCharArray();
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return TokenPackage.getBLOCK_COMMENT();
          }
        case 74: break;
        case 2: 
          { return TokenType.BAD_CHARACTER;
          }
        case 75: break;
        case 3: 
          { return TokenType.WHITE_SPACE;
          }
        case 76: break;
        case 4: 
          { return TokenType.NEW_LINE_INDENT;
          }
        case 77: break;
        case 5: 
          { return TokenPackage.getNUMBER();
          }
        case 78: break;
        case 6: 
          { return TokenPackage.getOPERATOR_ID();
          }
        case 79: break;
        case 7: 
          { return TokenPackage.getTYPE_OR_CONS();
          }
        case 80: break;
        case 8: 
          { return TokenPackage.getID();
          }
        case 81: break;
        case 9: 
          { return TokenPackage.getUNDERSCORE();
          }
        case 82: break;
        case 10: 
          { return TokenPackage.getCOLON();
          }
        case 83: break;
        case 11: 
          { return TokenPackage.getTH_VAR_QUOTE();
          }
        case 84: break;
        case 12: 
          { return TokenPackage.getDOLLAR();
          }
        case 85: break;
        case 13: 
          { return TokenPackage.getBACK_SLASH();
          }
        case 86: break;
        case 14: 
          { return TokenPackage.getLEFT_BRACE();
          }
        case 87: break;
        case 15: 
          { return TokenPackage.getRIGHT_BRACE();
          }
        case 88: break;
        case 16: 
          { return TokenPackage.getLEFT_BRACKET();
          }
        case 89: break;
        case 17: 
          { return TokenPackage.getRIGHT_BRACKET();
          }
        case 90: break;
        case 18: 
          { return TokenPackage.getLEFT_PAREN();
          }
        case 91: break;
        case 19: 
          { return TokenPackage.getRIGHT_PAREN();
          }
        case 92: break;
        case 20: 
          { return TokenPackage.getSEMICOLON();
          }
        case 93: break;
        case 21: 
          { return TokenPackage.getDOT();
          }
        case 94: break;
        case 22: 
          { return TokenPackage.getCOMMA();
          }
        case 95: break;
        case 23: 
          { return TokenPackage.getEQUALS();
          }
        case 96: break;
        case 24: 
          { return TokenPackage.getVERTICAL_BAR();
          }
        case 97: break;
        case 25: 
          { return TokenPackage.getRIGHT_ARROW();
          }
        case 98: break;
        case 26: 
          { return TokenPackage.getAT();
          }
        case 99: break;
        case 27: 
          { return TokenPackage.getTILDE();
          }
        case 100: break;
        case 28: 
          { return TokenPackage.getEXCLAMATION();
          }
        case 101: break;
        case 29: 
          { 
          }
        case 102: break;
        case 30: 
          { return TokenPackage.getSTRING();
          }
        case 103: break;
        case 31: 
          { return TokenPackage.getOPERATOR_CONS();
          }
        case 104: break;
        case 32: 
          { return TokenPackage.getDOUBLE_COLON();
          }
        case 105: break;
        case 33: 
          { return TokenPackage.getTH_TY_QUOTE();
          }
        case 106: break;
        case 34: 
          { return TokenPackage.getAS_KW();
          }
        case 107: break;
        case 35: 
          { return TokenPackage.getEND_OF_LINE_COMMENT();
          }
        case 108: break;
        case 36: 
          { return TokenPackage.getIF_KW();
          }
        case 109: break;
        case 37: 
          { return TokenPackage.getIN_KW();
          }
        case 110: break;
        case 38: 
          { yybegin(BLOCK_COMMENT);
    commentDepth = 0;
    commentStart = getTokenStart();
          }
        case 111: break;
        case 39: 
          { return TokenPackage.getOF_KW();
          }
        case 112: break;
        case 40: 
          { return TokenPackage.getDO_KW();
          }
        case 113: break;
        case 41: 
          { return TokenPackage.getDOT_DOT();
          }
        case 114: break;
        case 42: 
          { return TokenPackage.getDOUBLE_ARROW();
          }
        case 115: break;
        case 43: 
          { return TokenPackage.getLEFT_ARROW();
          }
        case 116: break;
        case 44: 
          { if (commentDepth > 0) {
            commentDepth--;
        }
        else {
             int state = yystate();
             yybegin(YYINITIAL);
             zzStartRead = commentStart;
             return TokenPackage.getBLOCK_COMMENT();
        }
          }
        case 117: break;
        case 45: 
          { commentDepth++;
          }
        case 118: break;
        case 46: 
          { return TokenPackage.getCHARACTER();
          }
        case 119: break;
        case 47: 
          { return TokenPackage.getLET_KW();
          }
        case 120: break;
        case 48: 
          { return TokenPackage.getELSE_KW();
          }
        case 121: break;
        case 49: 
          { return TokenPackage.getCASE_KW();
          }
        case 122: break;
        case 50: 
          { return TokenPackage.getDATA_KW();
          }
        case 123: break;
        case 51: 
          { return TokenPackage.getSAFE();
          }
        case 124: break;
        case 52: 
          { return TokenPackage.getTHEN_KW();
          }
        case 125: break;
        case 53: 
          { return TokenPackage.getTYPE_KW();
          }
        case 126: break;
        case 54: 
          { return TokenPackage.getINFIX_KW();
          }
        case 127: break;
        case 55: 
          { return TokenPackage.getCLASS_KW();
          }
        case 128: break;
        case 56: 
          { return TokenPackage.getWHERE_KW();
          }
        case 129: break;
        case 57: 
          { return TokenPackage.getFORALL_KW();
          }
        case 130: break;
        case 58: 
          { return TokenPackage.getMODULE_KW();
          }
        case 131: break;
        case 59: 
          { return TokenPackage.getEXPORT();
          }
        case 132: break;
        case 60: 
          { return TokenPackage.getIMPORT_KW();
          }
        case 133: break;
        case 61: 
          { return TokenPackage.getINFIXL_KW();
          }
        case 134: break;
        case 62: 
          { return TokenPackage.getINFIXR_KW();
          }
        case 135: break;
        case 63: 
          { return TokenPackage.getPRAGMA();
          }
        case 136: break;
        case 64: 
          { return TokenPackage.getUNSAFE();
          }
        case 137: break;
        case 65: 
          { return TokenPackage.getHIDING_KW();
          }
        case 138: break;
        case 66: 
          { return TokenPackage.getFOREIGN_KW();
          }
        case 139: break;
        case 67: 
          { return TokenPackage.getNEWTYPE_KW();
          }
        case 140: break;
        case 68: 
          { return TokenPackage.getDEFAULT_KW();
          }
        case 141: break;
        case 69: 
          { return TokenPackage.getINSTANCE_KW();
          }
        case 142: break;
        case 70: 
          { return TokenPackage.getDERIVING_KW();
          }
        case 143: break;
        case 71: 
          { return TokenPackage.getQUALIFIED_KW();
          }
        case 144: break;
        case 72: 
          { yybegin(TEX); return TokenPackage.getBLOCK_COMMENT();
          }
        case 145: break;
        case 73: 
          { yybegin(YYINITIAL); return TokenPackage.getBLOCK_COMMENT();
          }
        case 146: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case BLOCK_COMMENT: {
              int state = yystate();
        yybegin(YYINITIAL);
        zzStartRead = commentStart;
        return TokenPackage.getBLOCK_COMMENT();
            }
            case 207: break;
            default:
            return null;
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
