/* The following code was generated by JFlex 1.4.3 on 6/5/14 12:30 AM */

package org.jetbrains.haskell.parser.lexer;

import java.util.*;
import com.intellij.lexer.*;
import com.intellij.psi.*;
import org.jetbrains.haskell.parser.token.*;
import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 6/5/14 12:30 AM from the specification file
 * <tt>plugin/src/org/jetbrains/haskell/parser/lexer/Haskell.flex</tt>
 */
class _HaskellLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int BLOCK_COMMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int TEX = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\3\0\1\4\1\0\1\1\3\0\1\0\1\2\1\0\1\1\1\1"+
    "\22\0\1\1\1\54\1\10\1\71\1\16\2\0\1\15\1\40\1\41"+
    "\1\0\1\0\1\44\1\21\1\43\1\0\1\72\7\11\2\3\1\14"+
    "\1\42\1\47\1\45\1\50\1\0\1\52\6\12\10\5\1\73\10\5"+
    "\1\74\2\5\1\36\1\22\1\37\1\0\1\7\1\0\1\20\1\24"+
    "\1\32\1\34\1\25\1\13\1\26\1\64\1\27\2\6\1\56\1\17"+
    "\1\30\1\33\1\63\1\70\1\61\1\55\1\57\1\60\1\62\1\66"+
    "\1\23\1\67\1\6\1\31\1\46\1\35\1\53\53\0\1\6\12\0"+
    "\1\6\4\0\1\6\5\0\27\5\1\0\7\5\30\6\1\0\10\6"+
    "\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
    "\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
    "\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
    "\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
    "\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
    "\1\5\1\6\1\5\1\6\1\5\2\6\1\5\1\6\1\5\1\6"+
    "\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
    "\1\5\2\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
    "\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
    "\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
    "\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
    "\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\2\5\1\6"+
    "\1\5\1\6\1\5\3\6\2\5\1\6\1\5\1\6\2\5\1\6"+
    "\3\5\2\6\4\5\1\6\2\5\1\6\3\5\3\6\2\5\1\6"+
    "\2\5\1\6\1\5\1\6\1\5\1\6\2\5\1\6\1\5\2\6"+
    "\1\5\1\6\2\5\1\6\3\5\1\6\1\5\1\6\2\5\2\6"+
    "\1\0\1\5\3\6\4\0\1\5\1\0\1\6\1\5\1\0\1\6"+
    "\1\5\1\0\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5"+
    "\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\2\6\1\5"+
    "\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5"+
    "\1\6\1\5\1\6\1\5\1\6\1\5\2\6\1\5\1\0\1\6"+
    "\1\5\1\6\3\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
    "\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
    "\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
    "\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
    "\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
    "\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
    "\1\5\4\6\31\0\140\6\326\0\1\5\1\0\3\5\1\0\1\5"+
    "\1\0\2\5\1\6\21\5\1\0\11\5\43\6\1\0\2\6\3\5"+
    "\3\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5"+
    "\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5"+
    "\1\6\1\5\1\6\1\5\5\6\1\5\1\6\1\0\1\5\1\6"+
    "\2\5\1\6\4\0\60\5\60\6\1\5\1\6\1\5\1\6\1\5"+
    "\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5"+
    "\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5"+
    "\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\10\0"+
    "\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
    "\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
    "\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
    "\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
    "\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
    "\1\5\1\6\1\5\1\6\2\5\1\6\1\5\1\6\1\5\1\6"+
    "\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\0\1\5"+
    "\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5"+
    "\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5"+
    "\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5"+
    "\1\6\1\5\1\6\1\5\1\6\1\5\1\6\2\0\1\5\1\6"+
    "\6\0\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5"+
    "\1\6\1\5\1\6\1\5\1\6\1\5\1\6\41\0\46\5\12\0"+
    "\47\6\u0b18\0\46\5\u0c3a\0\54\6\66\0\12\6\224\0\1\5\1\6"+
    "\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
    "\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
    "\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
    "\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
    "\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
    "\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
    "\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
    "\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
    "\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
    "\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
    "\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
    "\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
    "\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
    "\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
    "\1\5\1\6\1\5\1\6\1\5\1\6\1\5\7\6\4\0\1\5"+
    "\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5"+
    "\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5"+
    "\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5"+
    "\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5"+
    "\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5"+
    "\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5"+
    "\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5"+
    "\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5"+
    "\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\6\0"+
    "\10\6\10\5\6\6\2\0\6\5\2\0\10\6\10\5\10\6\10\5"+
    "\6\6\2\0\6\5\2\0\10\6\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\10\6\10\5\16\6\2\0\10\6\10\0\10\6"+
    "\10\0\10\6\10\0\5\6\1\0\2\6\4\5\2\0\1\6\3\0"+
    "\3\6\1\0\2\6\4\5\4\0\4\6\2\0\2\6\4\5\4\0"+
    "\10\6\5\5\5\0\3\6\1\0\2\6\4\5\165\0\1\6\15\0"+
    "\1\6\202\0\1\5\4\0\1\5\2\0\1\6\3\5\2\6\3\5"+
    "\1\6\1\0\1\5\3\0\5\5\6\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\4\5\1\0\1\6\2\5\1\0\1\5\1\6\4\0"+
    "\1\6\3\0\1\6\2\5\5\0\1\5\4\6\110\0\1\51\155\0"+
    "\1\65\ud8ff\0\7\6\14\0\5\6\u0409\0\32\5\6\0\32\6\245\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\2\1\7\1\11\1\2\1\12\2\7\1\2"+
    "\1\13\3\7\1\14\3\7\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\2\1\27"+
    "\1\30\1\31\1\32\5\7\1\33\2\7\1\5\3\34"+
    "\2\1\1\0\1\35\1\0\1\7\1\36\2\0\1\7"+
    "\1\37\1\40\1\0\2\7\1\41\1\7\1\42\1\7"+
    "\1\43\2\7\1\44\2\7\1\45\1\46\1\47\1\50"+
    "\10\7\2\5\1\51\1\52\1\1\1\0\1\7\2\53"+
    "\1\0\1\7\1\0\6\7\1\0\6\7\1\54\6\7"+
    "\1\0\3\7\1\0\1\7\1\55\4\7\1\0\1\56"+
    "\1\7\1\57\2\7\1\60\1\61\1\62\4\7\1\0"+
    "\3\7\1\0\2\7\1\63\2\7\1\0\1\64\4\7"+
    "\1\65\1\7\1\0\1\33\1\7\1\66\1\0\1\67"+
    "\1\70\1\71\1\72\2\7\1\73\2\7\1\74\1\75"+
    "\1\7\1\0\1\76\1\0\1\7\1\77\1\100\2\7"+
    "\2\0\1\101\1\102\1\7\2\0\1\103\1\0\1\104"+
    "\2\0\1\105";

  private static int [] zzUnpackAction() {
    int [] result = new int[202];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u01ab"+
    "\0\u01e8\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\267\0\u0319"+
    "\0\u0356\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501"+
    "\0\u053e\0\u057b\0\267\0\267\0\267\0\267\0\267\0\267"+
    "\0\u05b8\0\267\0\u05f5\0\267\0\u0632\0\267\0\267\0\267"+
    "\0\267\0\u066f\0\u06ac\0\u06e9\0\u0726\0\u0763\0\267\0\u07a0"+
    "\0\u07dd\0\u081a\0\267\0\u0857\0\u0894\0\u08d1\0\u090e\0\u0225"+
    "\0\267\0\u094b\0\u0988\0\267\0\u09c5\0\u0a02\0\u0a3f\0\u01e8"+
    "\0\u0a7c\0\u0ab9\0\u0af6\0\u0b33\0\u01e8\0\u0b70\0\u0bad\0\u0bea"+
    "\0\u0c27\0\u0c64\0\u0ca1\0\u01e8\0\u0cde\0\u0d1b\0\u01e8\0\267"+
    "\0\267\0\267\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c\0\u0e89"+
    "\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d\0\267\0\267\0\u0fba\0\u0ff7"+
    "\0\u1034\0\267\0\u09c5\0\u1071\0\u10ae\0\u10eb\0\u1128\0\u1165"+
    "\0\u11a2\0\u11df\0\u121c\0\u1259\0\u1296\0\u12d3\0\u1310\0\u134d"+
    "\0\u138a\0\u13c7\0\u1404\0\u01e8\0\u1441\0\u147e\0\u14bb\0\u14f8"+
    "\0\u1535\0\u1572\0\u15af\0\u15ec\0\u1629\0\u1666\0\u16a3\0\u16e0"+
    "\0\u01e8\0\u171d\0\u175a\0\u1797\0\u17d4\0\u1811\0\u01e8\0\u184e"+
    "\0\u01e8\0\u188b\0\u18c8\0\u01e8\0\u01e8\0\u01e8\0\u1905\0\u1942"+
    "\0\u197f\0\u19bc\0\u19f9\0\u1a36\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a"+
    "\0\u1b67\0\u1ba4\0\u1be1\0\u1c1e\0\u1c5b\0\u01e8\0\u1c98\0\u1cd5"+
    "\0\u1d12\0\u1d4f\0\u01e8\0\u1d8c\0\u1dc9\0\u01e8\0\u1e06\0\u01e8"+
    "\0\u1e43\0\u01e8\0\u01e8\0\u01e8\0\u01e8\0\u1e80\0\u1ebd\0\u1296"+
    "\0\u1efa\0\u1f37\0\u01e8\0\u01e8\0\u1f74\0\u1fb1\0\u01e8\0\u1fee"+
    "\0\u202b\0\u01e8\0\u01e8\0\u2068\0\u20a5\0\u20e2\0\u211f\0\u01e8"+
    "\0\u01e8\0\u215c\0\u2199\0\u21d6\0\u01e8\0\u2213\0\267\0\u2250"+
    "\0\u228d\0\267";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[202];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\2\7\1\10\1\11\1\12\1\13"+
    "\1\7\1\10\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\2\11\1\24\1\11\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\4\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\3\11"+
    "\1\56\1\57\1\60\1\11\1\61\1\4\1\62\2\10"+
    "\21\63\1\64\7\63\1\65\43\63\22\66\1\67\52\66"+
    "\76\0\1\5\74\0\1\6\76\0\2\7\4\0\1\7"+
    "\60\0\1\7\5\0\5\10\1\0\3\10\1\0\1\10"+
    "\1\0\2\10\2\0\6\10\1\0\3\10\20\0\10\10"+
    "\1\0\3\10\1\0\3\10\3\0\5\11\1\0\3\11"+
    "\1\0\1\11\1\0\2\11\2\0\6\11\1\0\3\11"+
    "\20\0\10\11\1\0\3\11\1\0\3\11\10\70\1\71"+
    "\11\70\1\72\52\70\3\0\5\11\1\0\3\11\1\0"+
    "\1\11\1\0\2\11\2\0\6\11\1\0\1\11\1\73"+
    "\1\11\20\0\10\11\1\0\3\11\1\0\3\11\14\0"+
    "\1\74\60\0\15\75\1\0\4\75\1\76\52\75\3\0"+
    "\5\11\1\0\3\11\1\0\1\11\1\0\2\11\2\0"+
    "\6\11\1\0\1\11\1\77\1\11\20\0\10\11\1\0"+
    "\3\11\1\0\3\11\3\0\5\11\1\0\3\11\1\0"+
    "\1\11\1\0\2\11\2\0\6\11\1\0\3\11\20\0"+
    "\1\100\7\11\1\0\3\11\1\0\3\11\21\0\1\101"+
    "\26\0\1\46\51\0\1\102\52\0\5\11\1\0\3\11"+
    "\1\0\1\11\1\0\2\11\2\0\1\103\5\11\1\0"+
    "\3\11\20\0\1\11\1\104\6\11\1\0\3\11\1\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\105\1\0\1\11"+
    "\1\0\1\106\1\11\2\0\5\11\1\107\1\0\3\11"+
    "\20\0\10\11\1\0\3\11\1\0\3\11\3\0\5\11"+
    "\1\0\3\11\1\0\1\11\1\0\2\11\2\0\2\11"+
    "\1\110\3\11\1\0\3\11\20\0\10\11\1\0\3\11"+
    "\1\0\3\11\21\0\1\111\56\0\5\11\1\0\3\11"+
    "\1\0\1\11\1\0\1\11\1\112\2\0\6\11\1\0"+
    "\3\11\20\0\1\11\1\113\6\11\1\0\3\11\1\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\114\1\0\1\11"+
    "\1\0\2\11\2\0\6\11\1\0\3\11\20\0\10\11"+
    "\1\0\3\11\1\0\3\11\3\0\5\11\1\0\3\11"+
    "\1\0\1\11\1\0\1\11\1\115\2\0\2\11\1\116"+
    "\3\11\1\0\1\11\1\117\1\11\20\0\10\11\1\0"+
    "\3\11\1\0\3\11\43\0\1\120\101\0\1\121\45\0"+
    "\1\122\56\0\5\11\1\0\3\11\1\0\1\11\1\0"+
    "\1\11\1\123\2\0\6\11\1\0\3\11\20\0\10\11"+
    "\1\0\3\11\1\0\3\11\3\0\5\11\1\0\3\11"+
    "\1\0\1\11\1\0\2\11\2\0\2\11\1\124\3\11"+
    "\1\0\3\11\20\0\10\11\1\0\3\11\1\0\3\11"+
    "\3\0\5\11\1\0\3\11\1\0\1\11\1\0\2\11"+
    "\2\0\6\11\1\0\3\11\20\0\7\11\1\125\1\0"+
    "\1\11\1\126\1\11\1\0\3\11\3\0\5\11\1\0"+
    "\3\11\1\0\1\11\1\0\2\11\2\0\5\11\1\127"+
    "\1\0\3\11\20\0\10\11\1\0\3\11\1\0\3\11"+
    "\3\0\5\11\1\0\3\11\1\0\1\11\1\0\2\11"+
    "\2\0\4\11\1\130\1\11\1\0\3\11\20\0\10\11"+
    "\1\0\3\11\1\0\3\11\3\0\5\11\1\0\3\11"+
    "\1\0\1\11\1\0\2\11\2\0\6\11\1\0\3\11"+
    "\20\0\7\11\1\131\1\0\3\11\1\0\3\11\3\0"+
    "\5\11\1\0\3\11\1\0\1\11\1\0\2\11\2\0"+
    "\6\11\1\0\3\11\20\0\3\11\1\132\4\11\1\0"+
    "\3\11\1\0\3\11\3\0\2\7\4\0\1\7\11\0"+
    "\1\133\7\0\1\134\36\0\1\7\1\134\1\133\35\0"+
    "\1\135\60\0\1\136\53\0\22\66\1\0\52\66\22\0"+
    "\1\137\1\0\1\140\50\0\2\70\1\0\72\70\3\0"+
    "\5\11\1\0\3\11\1\0\1\11\1\0\2\11\2\0"+
    "\6\11\1\0\3\11\20\0\4\11\1\141\3\11\1\0"+
    "\3\11\1\0\3\11\15\0\1\142\57\0\2\75\1\0"+
    "\12\75\1\143\5\75\1\144\51\75\3\0\5\11\1\0"+
    "\3\11\1\0\1\11\1\0\2\11\2\0\6\11\1\0"+
    "\2\11\1\145\20\0\10\11\1\0\3\11\1\0\3\11"+
    "\2\101\1\0\72\101\30\0\1\146\47\0\5\11\1\0"+
    "\3\11\1\0\1\11\1\0\2\11\2\0\6\11\1\0"+
    "\3\11\20\0\6\11\1\147\1\11\1\0\3\11\1\0"+
    "\3\11\3\0\5\11\1\0\3\11\1\0\1\11\1\0"+
    "\2\11\2\0\6\11\1\0\3\11\20\0\1\150\7\11"+
    "\1\0\3\11\1\0\3\11\3\0\5\11\1\0\3\11"+
    "\1\0\1\11\1\0\2\11\2\0\6\11\1\0\3\11"+
    "\20\0\6\11\1\151\1\11\1\0\3\11\1\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\152\1\0\1\11\1\0"+
    "\2\11\2\0\6\11\1\0\3\11\20\0\1\153\7\11"+
    "\1\0\3\11\1\0\3\11\3\0\5\11\1\0\3\11"+
    "\1\0\1\11\1\0\2\11\2\0\6\11\1\0\3\11"+
    "\20\0\10\11\1\0\1\154\2\11\1\0\3\11\71\0"+
    "\1\155\6\0\5\11\1\0\3\11\1\0\1\11\1\0"+
    "\2\11\2\0\6\11\1\0\3\11\20\0\1\156\7\11"+
    "\1\0\3\11\1\0\3\11\3\0\5\11\1\0\3\11"+
    "\1\0\1\11\1\0\1\11\1\157\2\0\6\11\1\0"+
    "\3\11\20\0\10\11\1\0\3\11\1\0\3\11\3\0"+
    "\5\11\1\0\3\11\1\0\1\11\1\0\2\11\2\0"+
    "\6\11\1\0\3\11\20\0\2\11\1\160\5\11\1\0"+
    "\3\11\1\0\3\11\3\0\5\11\1\0\2\11\1\161"+
    "\1\0\1\11\1\0\2\11\2\0\6\11\1\0\3\11"+
    "\20\0\4\11\1\162\3\11\1\0\3\11\1\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\163\1\0\1\11\1\0"+
    "\2\11\2\0\6\11\1\0\3\11\20\0\10\11\1\0"+
    "\3\11\1\0\3\11\3\0\5\11\1\0\3\11\1\0"+
    "\1\11\1\0\2\11\2\0\6\11\1\0\3\11\20\0"+
    "\2\11\1\164\5\11\1\0\3\11\1\0\3\11\3\0"+
    "\5\11\1\0\3\11\1\0\1\11\1\0\2\11\2\0"+
    "\2\11\1\165\3\11\1\0\3\11\20\0\10\11\1\0"+
    "\3\11\1\0\3\11\3\0\5\11\1\0\3\11\1\0"+
    "\1\11\1\0\2\11\2\0\6\11\1\0\3\11\20\0"+
    "\6\11\1\166\1\11\1\0\3\11\1\0\3\11\3\0"+
    "\5\11\1\0\3\11\1\0\1\11\1\0\2\11\2\0"+
    "\6\11\1\0\3\11\20\0\1\167\7\11\1\0\3\11"+
    "\1\0\3\11\3\0\5\11\1\0\3\11\1\0\1\11"+
    "\1\0\2\11\2\0\6\11\1\0\2\11\1\170\20\0"+
    "\10\11\1\0\3\11\1\0\3\11\3\0\5\11\1\0"+
    "\3\11\1\0\1\11\1\0\2\11\2\0\2\11\1\171"+
    "\3\11\1\0\3\11\20\0\10\11\1\0\3\11\1\0"+
    "\3\11\3\0\5\11\1\0\3\11\1\0\1\11\1\0"+
    "\1\11\1\172\2\0\6\11\1\0\3\11\20\0\10\11"+
    "\1\0\3\11\1\0\3\11\3\0\1\133\5\0\3\133"+
    "\4\0\1\133\3\0\2\133\4\0\1\133\1\0\1\133"+
    "\35\0\1\133\13\0\1\134\60\0\1\134\24\0\1\137"+
    "\77\0\1\173\52\0\5\11\1\0\3\11\1\0\1\11"+
    "\1\0\1\11\1\174\2\0\2\11\1\175\3\11\1\0"+
    "\3\11\20\0\10\11\1\0\3\11\1\0\3\11\3\0"+
    "\1\144\5\0\1\144\3\0\1\142\54\0\1\144\5\0"+
    "\5\11\1\0\3\11\1\0\1\11\1\0\2\11\2\0"+
    "\6\11\1\0\3\11\20\0\3\11\1\176\4\11\1\0"+
    "\3\11\1\0\3\11\34\0\1\177\43\0\5\11\1\0"+
    "\3\11\1\0\1\11\1\0\2\11\2\0\6\11\1\0"+
    "\1\11\1\200\1\11\20\0\10\11\1\0\3\11\1\0"+
    "\3\11\3\0\5\11\1\0\3\11\1\0\1\11\1\0"+
    "\2\11\2\0\2\11\1\201\3\11\1\0\3\11\20\0"+
    "\10\11\1\0\3\11\1\0\3\11\3\0\5\11\1\0"+
    "\3\11\1\0\1\11\1\0\2\11\2\0\6\11\1\0"+
    "\1\11\1\202\1\11\20\0\10\11\1\0\3\11\1\0"+
    "\3\11\3\0\5\11\1\0\3\11\1\0\1\11\1\0"+
    "\2\11\2\0\4\11\1\203\1\11\1\0\3\11\20\0"+
    "\10\11\1\0\3\11\1\0\3\11\3\0\5\11\1\0"+
    "\3\11\1\0\1\11\1\0\2\11\2\0\6\11\1\0"+
    "\3\11\20\0\2\11\1\204\5\11\1\0\3\11\1\0"+
    "\3\11\3\0\5\11\1\0\3\11\1\0\1\11\1\0"+
    "\2\11\2\0\6\11\1\0\3\11\20\0\2\11\1\205"+
    "\5\11\1\0\3\11\1\0\3\11\2\155\1\0\66\155"+
    "\1\206\3\155\3\0\5\11\1\0\3\11\1\0\1\11"+
    "\1\0\2\11\2\0\2\11\1\207\3\11\1\0\3\11"+
    "\20\0\10\11\1\0\3\11\1\0\3\11\3\0\5\11"+
    "\1\0\3\11\1\0\1\11\1\0\2\11\2\0\6\11"+
    "\1\0\3\11\20\0\1\210\7\11\1\0\3\11\1\0"+
    "\3\11\3\0\5\11\1\0\3\11\1\0\1\11\1\0"+
    "\1\11\1\211\2\0\6\11\1\0\3\11\20\0\10\11"+
    "\1\0\3\11\1\0\3\11\3\0\5\11\1\0\3\11"+
    "\1\0\1\11\1\0\1\11\1\212\2\0\6\11\1\0"+
    "\3\11\20\0\10\11\1\0\3\11\1\0\3\11\3\0"+
    "\5\11\1\0\3\11\1\0\1\11\1\0\2\11\2\0"+
    "\4\11\1\213\1\11\1\0\3\11\20\0\10\11\1\0"+
    "\3\11\1\0\3\11\3\0\5\11\1\0\3\11\1\0"+
    "\1\11\1\0\2\11\2\0\2\11\1\214\3\11\1\0"+
    "\3\11\20\0\10\11\1\0\3\11\1\0\3\11\3\0"+
    "\5\11\1\0\3\11\1\0\1\11\1\0\2\11\2\0"+
    "\5\11\1\215\1\0\3\11\20\0\10\11\1\0\3\11"+
    "\1\0\3\11\3\0\5\11\1\0\3\11\1\0\1\11"+
    "\1\0\2\11\2\0\2\11\1\216\3\11\1\0\3\11"+
    "\20\0\10\11\1\0\3\11\1\0\3\11\3\0\5\11"+
    "\1\0\3\11\1\0\1\11\1\0\1\11\1\217\2\0"+
    "\6\11\1\0\3\11\20\0\10\11\1\0\3\11\1\0"+
    "\3\11\3\0\5\11\1\0\3\11\1\0\1\11\1\0"+
    "\2\11\2\0\4\11\1\220\1\11\1\0\3\11\20\0"+
    "\10\11\1\0\3\11\1\0\3\11\3\0\5\11\1\0"+
    "\3\11\1\0\1\11\1\0\2\11\2\0\6\11\1\0"+
    "\3\11\20\0\4\11\1\221\3\11\1\0\3\11\1\0"+
    "\3\11\3\0\5\11\1\0\3\11\1\0\1\11\1\0"+
    "\2\11\2\0\6\11\1\0\3\11\20\0\1\11\1\222"+
    "\6\11\1\0\3\11\1\0\3\11\26\0\1\223\51\0"+
    "\5\11\1\0\3\11\1\0\1\11\1\0\2\11\2\0"+
    "\6\11\1\0\3\11\20\0\1\11\1\224\6\11\1\0"+
    "\3\11\1\0\3\11\3\0\5\11\1\0\3\11\1\0"+
    "\1\11\1\0\2\11\2\0\4\11\1\225\1\11\1\0"+
    "\3\11\20\0\10\11\1\0\3\11\1\0\3\11\3\0"+
    "\5\11\1\0\3\11\1\0\1\11\1\0\2\11\2\0"+
    "\6\11\1\0\3\11\20\0\1\11\1\226\6\11\1\0"+
    "\3\11\1\0\3\11\31\0\1\227\46\0\5\11\1\0"+
    "\3\11\1\0\1\11\1\0\2\11\2\0\6\11\1\0"+
    "\3\11\20\0\4\11\1\230\3\11\1\0\3\11\1\0"+
    "\3\11\3\0\5\11\1\0\3\11\1\0\1\11\1\0"+
    "\2\11\2\0\6\11\1\0\3\11\20\0\4\11\1\231"+
    "\3\11\1\0\3\11\1\0\3\11\3\0\5\11\1\0"+
    "\3\11\1\0\1\11\1\0\2\11\2\0\1\232\5\11"+
    "\1\0\3\11\20\0\10\11\1\0\3\11\1\0\3\11"+
    "\3\0\5\11\1\0\3\11\1\0\1\11\1\0\1\11"+
    "\1\233\2\0\6\11\1\0\3\11\20\0\10\11\1\0"+
    "\3\11\1\0\3\11\3\0\5\11\1\0\3\11\1\0"+
    "\1\11\1\0\2\11\2\0\6\11\1\0\3\11\20\0"+
    "\10\11\1\0\1\11\1\234\1\11\1\0\3\11\2\155"+
    "\1\0\16\155\1\235\47\155\1\206\3\155\3\0\5\11"+
    "\1\0\3\11\1\0\1\11\1\0\2\11\2\0\6\11"+
    "\1\0\3\11\20\0\1\236\7\11\1\0\3\11\1\0"+
    "\3\11\3\0\5\11\1\0\3\11\1\0\1\11\1\0"+
    "\2\11\2\0\6\11\1\0\3\11\20\0\3\11\1\237"+
    "\4\11\1\0\3\11\1\0\3\11\3\0\5\11\1\0"+
    "\3\11\1\0\1\11\1\0\2\11\2\0\6\11\1\0"+
    "\3\11\20\0\5\11\1\240\2\11\1\0\3\11\1\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\241\1\0\1\11"+
    "\1\0\2\11\2\0\6\11\1\0\3\11\20\0\10\11"+
    "\1\0\3\11\1\0\3\11\3\0\5\11\1\0\3\11"+
    "\1\0\1\11\1\0\2\11\2\0\5\11\1\242\1\0"+
    "\3\11\20\0\10\11\1\0\3\11\1\0\3\11\3\0"+
    "\5\11\1\0\3\11\1\0\1\11\1\0\2\11\2\0"+
    "\2\11\1\243\3\11\1\0\3\11\20\0\10\11\1\0"+
    "\3\11\1\0\3\11\3\0\5\11\1\0\3\11\1\0"+
    "\1\11\1\0\2\11\2\0\4\11\1\244\1\11\1\0"+
    "\3\11\20\0\10\11\1\0\3\11\1\0\3\11\27\0"+
    "\1\245\50\0\5\11\1\0\3\11\1\0\1\11\1\0"+
    "\2\11\2\0\6\11\1\0\3\11\20\0\1\11\1\246"+
    "\6\11\1\0\3\11\1\0\3\11\3\0\5\11\1\0"+
    "\3\11\1\0\1\11\1\0\2\11\2\0\3\11\1\247"+
    "\2\11\1\0\3\11\20\0\10\11\1\0\3\11\1\0"+
    "\3\11\3\0\5\11\1\0\3\11\1\0\1\11\1\0"+
    "\2\11\2\0\2\11\1\250\3\11\1\0\3\11\20\0"+
    "\10\11\1\0\3\11\1\0\3\11\32\0\1\251\45\0"+
    "\5\11\1\0\3\11\1\0\1\11\1\0\2\11\2\0"+
    "\6\11\1\0\3\11\20\0\2\11\1\252\5\11\1\0"+
    "\3\11\1\0\3\11\3\0\5\11\1\0\3\11\1\0"+
    "\1\11\1\0\2\11\2\0\6\11\1\0\3\11\20\0"+
    "\2\11\1\253\5\11\1\0\3\11\1\0\3\11\3\0"+
    "\5\11\1\0\3\11\1\0\1\11\1\0\2\11\2\0"+
    "\6\11\1\0\3\11\20\0\1\11\1\254\2\11\1\255"+
    "\3\11\1\0\3\11\1\0\3\11\3\0\5\11\1\0"+
    "\3\11\1\0\1\11\1\0\2\11\2\0\5\11\1\256"+
    "\1\0\3\11\20\0\10\11\1\0\3\11\1\0\3\11"+
    "\3\0\5\11\1\0\3\11\1\0\1\11\1\0\2\11"+
    "\2\0\6\11\1\0\3\11\20\0\6\11\1\257\1\11"+
    "\1\0\3\11\1\0\3\11\2\155\1\0\32\155\1\260"+
    "\33\155\1\206\3\155\3\0\5\11\1\0\3\11\1\0"+
    "\1\11\1\0\2\11\2\0\6\11\1\0\3\11\20\0"+
    "\1\11\1\261\6\11\1\0\3\11\1\0\3\11\3\0"+
    "\5\11\1\0\3\11\1\0\1\11\1\0\2\11\2\0"+
    "\4\11\1\262\1\11\1\0\3\11\20\0\10\11\1\0"+
    "\3\11\1\0\3\11\3\0\5\11\1\0\3\11\1\0"+
    "\1\11\1\0\2\11\2\0\2\11\1\263\3\11\1\0"+
    "\3\11\20\0\10\11\1\0\3\11\1\0\3\11\3\0"+
    "\5\11\1\0\3\11\1\0\1\11\1\0\2\11\2\0"+
    "\3\11\1\264\2\11\1\0\3\11\20\0\10\11\1\0"+
    "\3\11\1\0\3\11\3\0\5\11\1\0\2\11\1\265"+
    "\1\0\1\11\1\0\2\11\2\0\6\11\1\0\3\11"+
    "\20\0\10\11\1\0\3\11\1\0\3\11\30\0\1\266"+
    "\47\0\5\11\1\0\3\11\1\0\1\11\1\0\2\11"+
    "\2\0\5\11\1\267\1\0\3\11\20\0\10\11\1\0"+
    "\3\11\1\0\3\11\33\0\1\270\44\0\5\11\1\0"+
    "\3\11\1\0\1\11\1\0\2\11\2\0\6\11\1\0"+
    "\1\271\2\11\20\0\10\11\1\0\3\11\1\0\3\11"+
    "\3\0\5\11\1\0\3\11\1\0\1\11\1\0\2\11"+
    "\2\0\2\11\1\272\3\11\1\0\3\11\20\0\10\11"+
    "\1\0\3\11\1\0\3\11\3\0\5\11\1\0\3\11"+
    "\1\0\1\11\1\0\2\11\2\0\6\11\1\0\3\11"+
    "\20\0\2\11\1\273\5\11\1\0\3\11\1\0\3\11"+
    "\3\0\5\11\1\0\3\11\1\0\1\11\1\0\2\11"+
    "\2\0\5\11\1\274\1\0\3\11\20\0\10\11\1\0"+
    "\3\11\1\0\3\11\3\0\5\11\1\0\3\11\1\0"+
    "\1\11\1\0\2\11\2\0\4\11\1\275\1\11\1\0"+
    "\3\11\20\0\10\11\1\0\3\11\1\0\3\11\31\0"+
    "\1\276\77\0\1\277\43\0\5\11\1\0\3\11\1\0"+
    "\1\11\1\0\2\11\2\0\2\11\1\300\3\11\1\0"+
    "\3\11\20\0\10\11\1\0\3\11\1\0\3\11\3\0"+
    "\5\11\1\0\3\11\1\0\1\11\1\0\2\11\2\0"+
    "\3\11\1\301\2\11\1\0\3\11\20\0\10\11\1\0"+
    "\3\11\1\0\3\11\3\0\5\11\1\0\3\11\1\0"+
    "\1\11\1\0\2\11\2\0\2\11\1\302\3\11\1\0"+
    "\3\11\20\0\10\11\1\0\3\11\1\0\3\11\32\0"+
    "\1\303\67\0\1\304\52\0\5\11\1\0\3\11\1\0"+
    "\1\11\1\0\2\11\2\0\6\11\1\0\2\11\1\305"+
    "\20\0\10\11\1\0\3\11\1\0\3\11\33\0\1\306"+
    "\76\0\1\307\73\0\1\310\65\0\1\311\104\0\1\312"+
    "\37\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8906];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\1\1\11\12\1\1\11\13\1\6\11\1\1"+
    "\1\11\1\1\1\11\1\1\4\11\5\1\1\11\3\1"+
    "\1\11\4\1\1\0\1\11\1\0\1\1\1\11\2\0"+
    "\3\1\1\0\15\1\3\11\12\1\2\11\1\1\1\0"+
    "\1\1\1\11\1\1\1\0\1\1\1\0\6\1\1\0"+
    "\15\1\1\0\3\1\1\0\6\1\1\0\14\1\1\0"+
    "\3\1\1\0\5\1\1\0\7\1\1\0\3\1\1\0"+
    "\14\1\1\0\1\1\1\0\5\1\2\0\3\1\2\0"+
    "\1\1\1\0\1\11\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[202];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    private int commentStart;
    private int commentDepth;


  _HaskellLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _HaskellLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1880) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 29: 
          { return TokenPackage.getSTRING();
          }
        case 70: break;
        case 33: 
          { return TokenPackage.getIF_KW();
          }
        case 71: break;
        case 34: 
          { return TokenPackage.getIN_KW();
          }
        case 72: break;
        case 15: 
          { return TokenPackage.getRIGHT_BRACKET();
          }
        case 73: break;
        case 40: 
          { return TokenPackage.getLEFT_ARROW();
          }
        case 74: break;
        case 19: 
          { return TokenPackage.getDOT();
          }
        case 75: break;
        case 39: 
          { return TokenPackage.getDOUBLE_ARROW();
          }
        case 76: break;
        case 11: 
          { return TokenPackage.getBACK_SLASH();
          }
        case 77: break;
        case 54: 
          { return TokenPackage.getMODULE_KW();
          }
        case 78: break;
        case 41: 
          { if (commentDepth > 0) {
            commentDepth--;
        }
        else {
             int state = yystate();
             yybegin(YYINITIAL);
             zzStartRead = commentStart;
             return TokenPackage.getBLOCK_COMMENT();
        }
          }
        case 79: break;
        case 21: 
          { return TokenPackage.getEQUALS();
          }
        case 80: break;
        case 69: 
          { yybegin(YYINITIAL); return TokenPackage.getBLOCK_COMMENT();
          }
        case 81: break;
        case 68: 
          { yybegin(TEX); return TokenPackage.getBLOCK_COMMENT();
          }
        case 82: break;
        case 3: 
          { return TokenType.WHITE_SPACE;
          }
        case 83: break;
        case 24: 
          { return TokenPackage.getAT();
          }
        case 84: break;
        case 26: 
          { return TokenPackage.getEXCLAMATION();
          }
        case 85: break;
        case 16: 
          { return TokenPackage.getLEFT_PAREN();
          }
        case 86: break;
        case 62: 
          { return TokenPackage.getFOREIGN_KW();
          }
        case 87: break;
        case 12: 
          { return TokenPackage.getLEFT_BRACE();
          }
        case 88: break;
        case 51: 
          { return TokenPackage.getINFIX_KW();
          }
        case 89: break;
        case 63: 
          { return TokenPackage.getNEWTYPE_KW();
          }
        case 90: break;
        case 8: 
          { return TokenPackage.getUNDERSCORE();
          }
        case 91: break;
        case 59: 
          { return TokenPackage.getPRAGMA();
          }
        case 92: break;
        case 5: 
          { return TokenPackage.getNUMBER();
          }
        case 93: break;
        case 22: 
          { return TokenPackage.getVERTICAL_BAR();
          }
        case 94: break;
        case 53: 
          { return TokenPackage.getWHERE_KW();
          }
        case 95: break;
        case 4: 
          { return TokenType.NEW_LINE_INDENT;
          }
        case 96: break;
        case 1: 
          { return TokenPackage.getBLOCK_COMMENT();
          }
        case 97: break;
        case 67: 
          { return TokenPackage.getQUALIFIED_KW();
          }
        case 98: break;
        case 18: 
          { return TokenPackage.getSEMICOLON();
          }
        case 99: break;
        case 46: 
          { return TokenPackage.getCASE_KW();
          }
        case 100: break;
        case 31: 
          { return TokenPackage.getAS_KW();
          }
        case 101: break;
        case 7: 
          { return TokenPackage.getID();
          }
        case 102: break;
        case 30: 
          { return TokenPackage.getDOUBLE_COLON();
          }
        case 103: break;
        case 38: 
          { return TokenPackage.getDOT_DOT();
          }
        case 104: break;
        case 56: 
          { return TokenPackage.getIMPORT_KW();
          }
        case 105: break;
        case 48: 
          { return TokenPackage.getSAFE();
          }
        case 106: break;
        case 36: 
          { return TokenPackage.getOF_KW();
          }
        case 107: break;
        case 6: 
          { return TokenPackage.getTYPE_OR_CONS();
          }
        case 108: break;
        case 45: 
          { return TokenPackage.getELSE_KW();
          }
        case 109: break;
        case 23: 
          { return TokenPackage.getRIGHT_ARROW();
          }
        case 110: break;
        case 60: 
          { return TokenPackage.getUNSAFE();
          }
        case 111: break;
        case 44: 
          { return TokenPackage.getLET_KW();
          }
        case 112: break;
        case 2: 
          { return TokenType.BAD_CHARACTER;
          }
        case 113: break;
        case 25: 
          { return TokenPackage.getTILDE();
          }
        case 114: break;
        case 37: 
          { return TokenPackage.getDO_KW();
          }
        case 115: break;
        case 55: 
          { return TokenPackage.getEXPORT();
          }
        case 116: break;
        case 42: 
          { commentDepth++;
          }
        case 117: break;
        case 20: 
          { return TokenPackage.getCOMMA();
          }
        case 118: break;
        case 47: 
          { return TokenPackage.getDATA_KW();
          }
        case 119: break;
        case 17: 
          { return TokenPackage.getRIGHT_PAREN();
          }
        case 120: break;
        case 27: 
          { return TokenPackage.getFORALL_KW();
          }
        case 121: break;
        case 66: 
          { return TokenPackage.getDERIVING_KW();
          }
        case 122: break;
        case 57: 
          { return TokenPackage.getINFIXL_KW();
          }
        case 123: break;
        case 13: 
          { return TokenPackage.getRIGHT_BRACE();
          }
        case 124: break;
        case 35: 
          { yybegin(BLOCK_COMMENT);
    commentDepth = 0;
    commentStart = getTokenStart();
          }
        case 125: break;
        case 58: 
          { return TokenPackage.getINFIXR_KW();
          }
        case 126: break;
        case 43: 
          { return TokenPackage.getCHARACTER();
          }
        case 127: break;
        case 32: 
          { return TokenPackage.getEND_OF_LINE_COMMENT();
          }
        case 128: break;
        case 61: 
          { return TokenPackage.getHIDING_KW();
          }
        case 129: break;
        case 10: 
          { return TokenPackage.getDOLLAR();
          }
        case 130: break;
        case 52: 
          { return TokenPackage.getCLASS_KW();
          }
        case 131: break;
        case 49: 
          { return TokenPackage.getTHEN_KW();
          }
        case 132: break;
        case 14: 
          { return TokenPackage.getLEFT_BRACKET();
          }
        case 133: break;
        case 64: 
          { return TokenPackage.getDEFAULT_KW();
          }
        case 134: break;
        case 65: 
          { return TokenPackage.getINSTANCE_KW();
          }
        case 135: break;
        case 50: 
          { return TokenPackage.getTYPE_KW();
          }
        case 136: break;
        case 28: 
          { 
          }
        case 137: break;
        case 9: 
          { return TokenPackage.getCOLON();
          }
        case 138: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case BLOCK_COMMENT: {
              int state = yystate();
        yybegin(YYINITIAL);
        zzStartRead = commentStart;
        return TokenPackage.getBLOCK_COMMENT();
            }
            case 203: break;
            default:
            return null;
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
