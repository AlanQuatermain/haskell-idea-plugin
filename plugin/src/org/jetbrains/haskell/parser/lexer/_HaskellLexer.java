/* The following code was generated by JFlex 1.5.1 */

package org.jetbrains.haskell.parser.lexer;

import java.util.*;
import com.intellij.lexer.*;
import com.intellij.psi.*;
import org.jetbrains.haskell.parser.token.*;
import com.intellij.psi.tree.IElementType;
import org.jetbrains.haskell.parser.cpp.CPPTokens;
import org.jetbrains.grammar.HaskellLexerTokens;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.1
 * from the specification file <tt>/Users/atsky/work/haskell-idea-plugin/plugin/src/org/jetbrains/haskell/parser/lexer/Haskell.flex</tt>
 */
class _HaskellLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int BLOCK_COMMENT = 2;
  public static final int TEX = 4;
  public static final int LAMBDA = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\3\0\1\5\1\0\1\1\3\0\1\1\1\3\1\12\1\11\1\11"+
    "\22\0\1\2\1\124\1\10\1\113\1\35\1\7\1\13\1\34\1\110"+
    "\1\111\1\40\1\7\1\116\1\101\1\115\1\7\1\135\1\73\1\73"+
    "\1\73\1\73\3\31\2\4\1\30\1\114\1\120\1\117\1\121\1\136"+
    "\1\43\1\63\1\66\1\64\1\33\1\61\1\67\1\76\1\56\1\72"+
    "\1\26\1\65\1\53\1\75\1\51\1\55\1\77\1\62\1\71\1\54"+
    "\1\57\1\52\1\70\1\134\1\60\1\74\1\26\1\107\1\41\1\42"+
    "\1\44\1\27\1\6\1\50\1\17\1\32\1\37\1\102\1\46\1\103"+
    "\1\130\1\36\1\133\1\24\1\21\1\16\1\104\1\20\1\127\1\132"+
    "\1\47\1\14\1\125\1\126\1\45\1\131\1\100\1\15\1\24\1\105"+
    "\1\112\1\106\1\123\6\0\1\12\33\0\11\7\1\24\2\7\1\0"+
    "\4\7\2\0\1\7\1\24\3\7\1\0\1\24\1\7\3\0\1\7"+
    "\27\22\1\7\7\22\30\24\1\7\10\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\2\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\2\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\2\22\1\24\1\22\1\24\1\22\3\24"+
    "\2\22\1\24\1\22\1\24\2\22\1\24\3\22\2\24\4\22\1\24"+
    "\2\22\1\24\3\22\3\24\2\22\1\24\2\22\1\24\1\22\1\24"+
    "\1\22\1\24\2\22\1\24\1\22\2\24\1\22\1\24\2\22\1\24"+
    "\3\22\1\24\1\22\1\24\2\22\2\24\1\0\1\22\3\24\4\0"+
    "\1\22\1\0\1\24\1\22\1\0\1\24\1\22\1\0\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\2\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\2\24\1\22\1\0\1\24\1\22\1\24\3\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\7\24\2\22\1\24"+
    "\2\22\2\24\1\22\1\24\4\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\105\24\1\0\44\24\7\0\2\24\4\7\14\0"+
    "\16\7\5\24\7\7\1\0\1\7\1\0\21\7\105\0\1\24\52\0"+
    "\1\22\1\24\1\22\1\24\1\0\1\7\1\22\1\24\2\0\4\24"+
    "\1\7\5\0\2\7\1\22\1\7\3\22\1\0\1\22\1\0\2\22"+
    "\1\24\21\22\1\0\11\22\43\24\1\22\2\24\3\22\3\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\5\24\1\22\1\24\1\7\1\22\1\24\2\22\2\24"+
    "\63\22\60\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\7\7\0\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\2\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\2\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\11\0\46\22\3\0\6\7\1\0\47\24"+
    "\1\0\2\7\4\0\1\7\56\0\1\7\1\0\1\7\2\0\1\7"+
    "\2\0\1\7\54\0\2\7\21\0\12\7\13\0\1\7\2\0\2\7"+
    "\112\0\4\7\146\0\1\7\11\0\1\7\12\0\1\7\23\0\2\7"+
    "\1\0\16\7\350\0\4\7\66\0\17\7\37\0\1\7\u0105\0\2\7"+
    "\12\0\1\7\201\0\2\7\6\0\2\7\364\0\2\7\176\0\1\7"+
    "\202\0\10\7\204\0\1\7\371\0\1\7\172\0\1\7\112\0\1\7"+
    "\17\0\1\7\12\0\2\7\245\0\27\7\2\0\6\7\24\0\1\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\107\0\1\7\70\0\10\7"+
    "\1\0\6\7\1\0\15\7\157\0\6\7\116\0\2\7\46\22\1\0"+
    "\1\22\5\0\1\22\55\0\1\7\u0264\0\11\7\47\0\12\7\146\0"+
    "\1\7\u026c\0\2\7\54\0\2\7\116\0\3\7\107\0\2\7\235\0"+
    "\3\7\1\0\4\7\44\0\13\7\u0135\0\1\7\3\0\2\7\230\0"+
    "\42\7\36\0\2\7\200\0\7\7\1\0\6\7\254\0\21\7\11\0"+
    "\11\7\177\0\4\7\73\0\5\7\76\0\2\7\100\0\10\7\13\0"+
    "\1\7\54\0\300\24\100\0\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\11\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\11\24\10\22\6\24\2\0\6\22\2\0\10\24\10\22\10\24"+
    "\10\22\6\24\2\0\6\22\2\0\10\24\1\0\1\22\1\0\1\22"+
    "\1\0\1\22\1\0\1\22\10\24\10\22\16\24\2\0\10\24\10\0"+
    "\10\24\10\0\10\24\10\0\5\24\1\0\2\24\4\22\1\0\1\7"+
    "\1\24\3\7\3\24\1\0\2\24\4\22\1\0\3\7\4\24\2\0"+
    "\2\24\4\22\1\0\3\7\10\24\5\22\3\7\2\0\3\24\1\0"+
    "\2\24\4\22\1\0\2\7\21\0\30\7\1\12\1\12\6\0\57\7"+
    "\22\0\1\24\10\0\5\7\1\24\12\0\5\7\1\0\15\24\3\0"+
    "\33\7\105\0\2\7\1\22\4\7\1\22\2\7\1\24\3\22\2\24"+
    "\3\22\1\24\1\7\1\22\3\7\5\22\6\7\1\22\1\7\1\22"+
    "\1\7\1\22\1\7\4\22\1\7\1\24\4\22\1\24\4\0\1\24"+
    "\2\7\2\24\2\22\5\7\1\22\4\24\4\7\1\24\1\7\20\0"+
    "\20\22\20\24\3\0\1\22\1\24\13\0\2\7\1\122\155\7\1\7"+
    "\u01f3\7\14\0\47\7\31\0\13\7\121\0\32\7\32\23\32\25\26\0"+
    "\u0200\7\1\0\165\7\36\0\u03b9\7\3\0\12\7\246\0\57\22\1\0"+
    "\57\24\1\0\1\22\1\24\3\22\2\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\4\22\1\24\1\22\2\24\1\22\10\24\3\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\2\24\6\7\1\22"+
    "\1\24\1\22\1\24\3\0\1\22\1\24\5\0\4\7\1\0\2\7"+
    "\46\24\1\0\1\24\5\0\1\24\102\0\1\7\217\0\57\7\1\0"+
    "\14\7\104\0\32\7\1\0\131\7\14\0\326\7\32\0\14\7\5\0"+
    "\4\7\3\0\31\7\17\0\1\7\5\0\2\7\5\0\3\7\133\0"+
    "\2\7\3\0\1\7\132\0\1\7\224\0\2\7\4\0\12\7\40\0"+
    "\44\7\34\0\37\7\13\0\36\7\10\0\1\7\17\0\40\7\12\0"+
    "\47\7\17\0\77\7\1\0\u0100\7\u19c0\0\100\7\u5690\0\67\7\67\0"+
    "\2\7\u010d\0\3\7\60\0\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\5\0\1\7\12\0\1\7\1\0\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\132\0"+
    "\6\7\10\0\27\7\11\0\2\7\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\3\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\12\24\1\22\1\24\1\22\1\24\2\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\0\2\7\1\22\1\24\1\22"+
    "\1\24\1\0\1\22\1\24\1\22\1\24\14\0\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\115\0\3\24"+
    "\55\0\4\7\12\0\4\7\72\0\4\7\126\0\2\7\50\0\3\7"+
    "\63\0\2\7\57\0\1\7\141\0\15\7\20\0\2\7\174\0\4\7"+
    "\27\0\3\7\144\0\2\7\20\0\2\7\371\0\1\7\u4f14\0\7\24"+
    "\14\0\5\24\21\0\1\7\210\0\20\7\u017c\0\2\7\274\0\2\7"+
    "\22\0\12\7\26\0\43\7\1\0\23\7\1\0\4\7\225\0\17\7"+
    "\12\0\7\7\32\22\6\7\32\24\13\7\172\0\7\7\1\0\7\7"+
    "\15\0\2\7\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\2\5\10\1\11\2\7\1\12\1\13\1\10"+
    "\1\14\1\7\2\10\1\15\1\16\1\17\1\20\3\10"+
    "\1\21\2\10\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\7\1\30\1\31\1\32\1\33\1\7\1\34\1\35"+
    "\1\36\7\10\1\5\1\7\3\37\2\1\2\40\1\5"+
    "\1\0\1\41\1\0\4\10\1\42\1\10\1\11\1\0"+
    "\1\7\1\43\1\44\1\45\3\10\1\0\1\46\1\0"+
    "\1\7\1\47\1\10\1\50\1\51\1\52\2\10\1\0"+
    "\3\10\1\53\1\54\3\10\1\55\1\56\2\0\1\57"+
    "\3\0\1\60\1\61\1\62\1\7\1\0\1\7\1\0"+
    "\1\63\1\64\1\65\1\66\10\10\2\5\1\67\1\7"+
    "\1\70\1\71\1\0\1\1\1\0\1\5\17\0\3\10"+
    "\1\72\1\73\1\74\2\7\4\10\1\75\17\0\1\76"+
    "\6\10\1\0\6\10\1\0\1\77\1\100\1\101\1\102"+
    "\1\0\1\103\1\104\1\105\2\0\10\10\14\0\1\106"+
    "\2\10\1\73\1\74\2\10\1\107\1\110\15\0\3\10"+
    "\1\111\2\10\1\0\3\10\1\112\1\113\2\10\6\0"+
    "\1\114\1\115\1\10\1\116\4\10\1\0\1\117\2\10"+
    "\1\120\1\121\2\10\1\122\2\10\1\0\5\10\17\0"+
    "\1\123\1\0\2\10\1\124\2\10\1\0\1\10\1\125"+
    "\1\126\1\10\1\127\1\130\2\10\1\0\1\131\1\10"+
    "\1\132\1\133\1\10\20\0\1\134\3\0\1\135\1\136"+
    "\1\137\2\10\1\0\1\140\1\10\1\141\1\10\1\0"+
    "\1\142\1\143\5\0\1\144\2\0\1\145\12\0\2\10"+
    "\1\0\1\146\1\147\10\0\1\150\11\0\2\10\11\0"+
    "\1\151\1\0\1\152\6\0\1\153\1\10\1\0\1\154"+
    "\3\0\1\155\1\156\3\0\1\157\4\0\1\160\1\161"+
    "\10\0\1\162\1\0\1\163\2\0\1\164\2\0\1\165"+
    "\4\0\1\166\5\0\1\167\1\0\1\170\1\171\1\0"+
    "\1\172\3\0\1\173\1\174\2\0\1\175\2\0\1\176"+
    "\10\0\1\177\1\200";

  private static int [] zzUnpackAction() {
    int [] result = new int[503];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\137\0\276\0\u011d\0\u017c\0\u01db\0\u017c\0\u023a"+
    "\0\u017c\0\u0299\0\u02f8\0\u0357\0\u03b6\0\u0415\0\u0474\0\u04d3"+
    "\0\u0532\0\u0591\0\u05f0\0\u03b6\0\u064f\0\u06ae\0\u070d\0\u076c"+
    "\0\u07cb\0\u082a\0\u0299\0\u0889\0\u017c\0\u0299\0\u08e8\0\u0947"+
    "\0\u09a6\0\u0a05\0\u0a64\0\u0ac3\0\u0b22\0\u017c\0\u0b81\0\u0be0"+
    "\0\u017c\0\u0c3f\0\u0c9e\0\u017c\0\u0cfd\0\u017c\0\u0d5c\0\u0dbb"+
    "\0\u0299\0\u0299\0\u0299\0\u0e1a\0\u0e79\0\u0ed8\0\u0f37\0\u0f96"+
    "\0\u0ff5\0\u1054\0\u10b3\0\u1112\0\u017c\0\u1171\0\u11d0\0\u122f"+
    "\0\u128e\0\u017c\0\u12ed\0\u134c\0\u02f8\0\u017c\0\u13ab\0\u140a"+
    "\0\u1469\0\u14c8\0\u1527\0\u03b6\0\u1586\0\u15e5\0\u1644\0\u16a3"+
    "\0\u1702\0\u1702\0\u017c\0\u1761\0\u17c0\0\u181f\0\u187e\0\u017c"+
    "\0\u18dd\0\u193c\0\u017c\0\u199b\0\u03b6\0\u19fa\0\u03b6\0\u1a59"+
    "\0\u1ab8\0\u1b17\0\u1b76\0\u1bd5\0\u1c34\0\u03b6\0\u1c93\0\u1cf2"+
    "\0\u1d51\0\u1db0\0\u1e0f\0\u017c\0\u1e6e\0\u1ecd\0\u1f2c\0\u1f8b"+
    "\0\u1fea\0\u2049\0\u017c\0\u017c\0\u017c\0\u20a8\0\u2107\0\u2166"+
    "\0\u21c5\0\u017c\0\u0299\0\u0299\0\u0299\0\u2224\0\u2283\0\u22e2"+
    "\0\u2341\0\u23a0\0\u23ff\0\u245e\0\u24bd\0\u251c\0\u257b\0\u25da"+
    "\0\u2639\0\u017c\0\u017c\0\u2698\0\u26f7\0\u2756\0\u017c\0\u27b5"+
    "\0\u2814\0\u2873\0\u28d2\0\u2931\0\u2990\0\u29ef\0\u2a4e\0\u2aad"+
    "\0\u2b0c\0\u2b6b\0\u2bca\0\u2c29\0\u2c88\0\u2ce7\0\u2d46\0\u2da5"+
    "\0\u2e04\0\u03b6\0\u2e63\0\u2ec2\0\u2f21\0\u2f80\0\u2fdf\0\u303e"+
    "\0\u309d\0\u30fc\0\u017c\0\u315b\0\u31ba\0\u3219\0\u3278\0\u32d7"+
    "\0\u3336\0\u3395\0\u33f4\0\u3453\0\u34b2\0\u3511\0\u3570\0\u35cf"+
    "\0\u362e\0\u368d\0\u017c\0\u36ec\0\u374b\0\u37aa\0\u3809\0\u3868"+
    "\0\u38c7\0\u3926\0\u3985\0\u39e4\0\u3a43\0\u3aa2\0\u3b01\0\u3b60"+
    "\0\u3bbf\0\u017c\0\u017c\0\u017c\0\u017c\0\u3c1e\0\u017c\0\u3c7d"+
    "\0\u017c\0\u3cdc\0\u3d3b\0\u3d9a\0\u3df9\0\u3e58\0\u3eb7\0\u3f16"+
    "\0\u3f75\0\u3fd4\0\u4033\0\u4092\0\u40f1\0\u4150\0\u41af\0\u420e"+
    "\0\u426d\0\u42cc\0\u432b\0\u438a\0\u43e9\0\u4448\0\u44a7\0\u03b6"+
    "\0\u4506\0\u4565\0\u45c4\0\u4623\0\u4682\0\u46e1\0\u03b6\0\u03b6"+
    "\0\u4740\0\u479f\0\u47fe\0\u485d\0\u48bc\0\u491b\0\u497a\0\u49d9"+
    "\0\u4a38\0\u4a97\0\u4af6\0\u4b55\0\u4bb4\0\u4c13\0\u4c72\0\u4cd1"+
    "\0\u03b6\0\u4d30\0\u4d8f\0\u4dee\0\u4e4d\0\u4eac\0\u4f0b\0\u03b6"+
    "\0\u03b6\0\u4f6a\0\u4fc9\0\u5028\0\u5087\0\u50e6\0\u5145\0\u51a4"+
    "\0\u5203\0\u03b6\0\u03b6\0\u5262\0\u03b6\0\u52c1\0\u5320\0\u537f"+
    "\0\u53de\0\u543d\0\u017c\0\u549c\0\u54fb\0\u03b6\0\u03b6\0\u555a"+
    "\0\u55b9\0\u5618\0\u5677\0\u56d6\0\u5735\0\u5794\0\u57f3\0\u5852"+
    "\0\u58b1\0\u5910\0\u596f\0\u59ce\0\u5a2d\0\u5a8c\0\u5aeb\0\u5b4a"+
    "\0\u5ba9\0\u5c08\0\u5c67\0\u5cc6\0\u5d25\0\u5d84\0\u5de3\0\u5e42"+
    "\0\u5ea1\0\u5f00\0\u5f5f\0\u5fbe\0\u601d\0\u03b6\0\u607c\0\u60db"+
    "\0\u613a\0\u6199\0\u03b6\0\u03b6\0\u61f8\0\u03b6\0\u03b6\0\u6257"+
    "\0\u62b6\0\u6315\0\u03b6\0\u6374\0\u03b6\0\u03b6\0\u63d3\0\u6432"+
    "\0\u6491\0\u64f0\0\u654f\0\u65ae\0\u660d\0\u666c\0\u66cb\0\u672a"+
    "\0\u6789\0\u67e8\0\u6847\0\u68a6\0\u6905\0\u6964\0\u69c3\0\u5028"+
    "\0\u6a22\0\u6a81\0\u6ae0\0\u6b3f\0\u03b6\0\u03b6\0\u6b9e\0\u6bfd"+
    "\0\u6c5c\0\u03b6\0\u6cbb\0\u03b6\0\u6d1a\0\u6d79\0\u03b6\0\u03b6"+
    "\0\u6dd8\0\u6e37\0\u6e96\0\u6ef5\0\u6f54\0\u5028\0\u6fb3\0\u7012"+
    "\0\u5028\0\u7071\0\u70d0\0\u712f\0\u718e\0\u71ed\0\u724c\0\u72ab"+
    "\0\u730a\0\u7369\0\u73c8\0\u7427\0\u7486\0\u74e5\0\u03b6\0\u03b6"+
    "\0\u7544\0\u75a3\0\u7602\0\u7661\0\u76c0\0\u771f\0\u777e\0\u77dd"+
    "\0\u5028\0\u783c\0\u789b\0\u78fa\0\u7959\0\u79b8\0\u7a17\0\u7a76"+
    "\0\u7ad5\0\u7b34\0\u7b93\0\u7bf2\0\u7c51\0\u7cb0\0\u7d0f\0\u7d6e"+
    "\0\u7dcd\0\u7e2c\0\u7e8b\0\u7eea\0\u7f49\0\u5028\0\u7fa8\0\u5028"+
    "\0\u8007\0\u8066\0\u80c5\0\u8124\0\u8183\0\u81e2\0\u03b6\0\u8241"+
    "\0\u82a0\0\u017c\0\u82ff\0\u835e\0\u83bd\0\u5028\0\u5028\0\u841c"+
    "\0\u847b\0\u84da\0\u5028\0\u8539\0\u8598\0\u85f7\0\u8656\0\u6a22"+
    "\0\u03b6\0\u86b5\0\u8714\0\u8773\0\u87d2\0\u8831\0\u8890\0\u88ef"+
    "\0\u894e\0\u5028\0\u89ad\0\u5028\0\u8a0c\0\u8a6b\0\u5028\0\u8aca"+
    "\0\u8b29\0\u5028\0\u8b88\0\u8be7\0\u8c46\0\u8ca5\0\u017c\0\u8d04"+
    "\0\u8d63\0\u8dc2\0\u8e21\0\u8e80\0\u8edf\0\u8f3e\0\u5028\0\u5028"+
    "\0\u8f9d\0\u8ffc\0\u905b\0\u90ba\0\u9119\0\u5028\0\u5028\0\u9178"+
    "\0\u91d7\0\u5028\0\u9236\0\u9295\0\u5028\0\u92f4\0\u9353\0\u93b2"+
    "\0\u9411\0\u9470\0\u94cf\0\u952e\0\u958d\0\u5028\0\u5028";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[503];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\1\7\2\10\1\11\1\12\1\13\1\6"+
    "\1\0\1\12\1\14\1\15\1\16\1\15\1\17\1\20"+
    "\1\21\1\22\1\15\1\23\1\21\1\24\1\25\1\10"+
    "\1\26\1\21\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\12\1\15\1\37\1\40\1\41\22\21"+
    "\1\10\4\21\1\15\1\42\1\43\1\15\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\12\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\21\1\73"+
    "\1\74\12\75\1\0\66\75\1\76\3\75\1\77\31\75"+
    "\41\100\1\101\75\100\12\102\1\0\17\102\1\103\104\102"+
    "\140\0\2\6\6\0\1\6\131\0\2\10\23\0\1\10"+
    "\41\0\1\10\17\0\1\104\21\0\1\10\10\0\1\12"+
    "\3\0\1\12\7\0\1\12\1\0\1\12\2\0\1\12"+
    "\4\0\1\12\2\0\2\12\1\0\2\12\34\0\1\12"+
    "\10\0\2\12\1\0\1\12\1\0\6\12\11\0\1\12"+
    "\3\105\1\106\4\105\1\106\30\105\1\107\75\105\4\0"+
    "\2\15\6\0\14\15\1\0\4\15\1\0\2\15\5\0"+
    "\3\15\1\110\30\15\1\0\3\15\6\0\1\111\11\0"+
    "\1\112\10\15\5\0\2\15\6\0\14\15\1\0\4\15"+
    "\1\0\2\15\5\0\34\15\1\0\3\15\6\0\1\111"+
    "\11\0\11\15\5\0\2\15\6\0\4\15\1\113\7\15"+
    "\1\0\4\15\1\0\2\15\5\0\34\15\1\0\3\15"+
    "\6\0\1\111\11\0\11\15\5\0\2\15\6\0\14\15"+
    "\1\0\4\15\1\0\2\15\5\0\1\15\1\114\32\15"+
    "\1\0\3\15\6\0\1\111\11\0\11\15\5\0\2\15"+
    "\6\0\14\15\1\0\4\15\1\0\2\15\5\0\34\15"+
    "\1\0\1\115\2\15\6\0\1\111\11\0\11\15\5\0"+
    "\2\21\6\0\14\21\1\0\4\21\1\0\2\21\5\0"+
    "\34\21\1\0\3\21\6\0\1\116\1\0\1\117\7\0"+
    "\11\21\5\0\2\21\1\0\1\12\3\0\1\12\7\21"+
    "\1\22\1\21\1\22\2\21\1\12\4\21\1\12\2\21"+
    "\2\12\1\0\2\12\34\21\1\12\3\21\5\0\2\12"+
    "\1\0\1\120\1\0\6\12\11\21\1\12\4\0\2\15"+
    "\1\0\1\12\3\0\1\12\7\15\1\23\1\15\1\23"+
    "\2\15\1\12\4\15\1\12\2\15\2\12\1\0\2\12"+
    "\34\15\1\12\3\15\5\0\2\12\1\0\1\12\1\0"+
    "\6\12\11\15\1\12\7\0\1\121\3\0\1\121\7\0"+
    "\1\121\1\0\1\121\2\0\1\122\4\0\1\121\2\0"+
    "\2\121\1\123\2\121\34\0\1\121\10\0\2\121\1\0"+
    "\1\121\1\0\6\121\11\0\1\121\4\0\2\15\6\0"+
    "\5\15\1\124\6\15\1\0\1\15\1\125\2\15\1\0"+
    "\2\15\5\0\3\15\1\126\30\15\1\0\3\15\6\0"+
    "\1\111\11\0\11\15\1\0\3\127\1\0\30\127\1\130"+
    "\4\127\1\131\75\127\7\0\1\12\3\0\1\12\7\0"+
    "\1\12\1\0\1\12\2\0\1\12\4\0\1\132\2\0"+
    "\2\12\1\0\2\12\34\0\1\12\6\0\1\133\1\0"+
    "\2\12\1\0\1\12\1\0\6\12\11\0\1\12\4\0"+
    "\2\15\6\0\2\15\1\134\11\15\1\0\4\15\1\0"+
    "\2\15\5\0\1\15\1\135\32\15\1\0\2\15\1\136"+
    "\6\0\1\111\11\0\11\15\5\0\2\15\6\0\4\15"+
    "\1\137\7\15\1\0\4\15\1\0\2\15\5\0\3\15"+
    "\1\140\30\15\1\0\1\141\2\15\6\0\1\111\11\0"+
    "\11\15\10\0\1\12\3\0\1\12\7\0\1\12\1\0"+
    "\1\12\2\0\1\12\4\0\1\12\2\0\2\12\1\0"+
    "\2\12\34\0\1\12\1\142\7\0\2\12\1\0\1\12"+
    "\1\0\6\12\11\0\1\12\4\0\2\15\6\0\4\15"+
    "\1\143\7\15\1\0\4\15\1\0\2\15\5\0\3\15"+
    "\1\144\30\15\1\0\3\15\6\0\1\111\11\0\11\15"+
    "\5\0\2\15\6\0\4\15\1\145\7\15\1\0\4\15"+
    "\1\0\2\15\5\0\34\15\1\0\3\15\6\0\1\111"+
    "\11\0\11\15\5\0\2\15\6\0\1\146\13\15\1\0"+
    "\4\15\1\0\2\15\5\0\34\15\1\0\3\15\6\0"+
    "\1\111\11\0\11\15\10\0\1\12\3\0\1\12\7\0"+
    "\1\12\1\0\1\12\2\0\1\12\4\0\1\12\2\0"+
    "\2\12\1\0\2\12\34\0\1\147\10\0\2\12\1\0"+
    "\1\12\1\0\2\12\1\61\3\12\11\0\1\12\4\0"+
    "\2\15\6\0\5\15\1\150\6\15\1\0\4\15\1\0"+
    "\2\15\5\0\33\15\1\151\1\0\3\15\6\0\1\111"+
    "\11\0\11\15\5\0\2\15\6\0\14\15\1\0\4\15"+
    "\1\0\2\15\5\0\34\15\1\0\1\152\2\15\6\0"+
    "\1\111\11\0\11\15\102\0\1\153\65\0\1\154\6\0"+
    "\1\155\42\0\1\156\7\0\1\157\12\0\1\160\1\0"+
    "\1\161\121\0\1\162\1\163\32\0\1\12\3\0\1\12"+
    "\7\0\1\12\1\0\1\12\2\0\1\12\4\0\1\12"+
    "\2\0\2\12\1\164\2\12\34\0\1\12\7\0\1\165"+
    "\1\166\1\12\1\0\1\12\1\0\6\12\11\0\1\12"+
    "\7\0\1\12\3\0\1\12\7\0\1\12\1\0\1\12"+
    "\2\0\1\12\4\0\1\12\1\167\1\0\2\12\1\0"+
    "\2\12\34\0\1\170\1\171\6\0\1\172\2\12\1\0"+
    "\1\12\1\0\6\12\11\0\1\12\7\0\1\12\3\0"+
    "\1\12\7\0\1\12\1\0\1\12\2\0\1\12\4\0"+
    "\1\12\2\0\2\12\1\0\2\12\34\0\1\12\10\0"+
    "\2\12\1\0\1\173\1\0\6\12\11\0\1\12\7\0"+
    "\1\12\3\0\1\12\7\0\1\12\1\0\1\12\2\0"+
    "\1\12\4\0\1\12\2\0\2\12\1\0\2\12\34\0"+
    "\1\12\10\0\2\12\1\0\1\12\1\0\2\12\1\174"+
    "\3\12\11\0\1\12\7\0\1\12\3\0\1\12\7\0"+
    "\1\12\1\0\1\12\2\0\1\12\4\0\1\12\2\0"+
    "\2\12\1\0\2\12\34\0\1\175\10\0\2\12\1\0"+
    "\1\12\1\0\6\12\11\0\1\12\4\0\2\15\6\0"+
    "\1\15\1\176\12\15\1\0\4\15\1\0\2\15\5\0"+
    "\34\15\1\0\3\15\6\0\1\111\11\0\3\15\1\177"+
    "\5\15\5\0\2\15\6\0\14\15\1\0\4\15\1\0"+
    "\2\15\5\0\34\15\1\0\2\15\1\200\6\0\1\111"+
    "\11\0\11\15\5\0\2\15\6\0\14\15\1\0\4\15"+
    "\1\0\2\15\5\0\2\15\1\201\31\15\1\0\3\15"+
    "\6\0\1\111\11\0\11\15\5\0\2\15\6\0\14\15"+
    "\1\0\4\15\1\0\1\202\1\15\5\0\34\15\1\0"+
    "\3\15\6\0\1\111\11\0\11\15\5\0\2\15\6\0"+
    "\14\15\1\0\4\15\1\0\2\15\5\0\34\15\1\0"+
    "\3\15\6\0\1\111\11\0\3\15\1\203\5\15\5\0"+
    "\2\15\6\0\14\15\1\0\4\15\1\0\2\15\5\0"+
    "\34\15\1\0\3\15\6\0\1\111\11\0\1\15\1\204"+
    "\7\15\5\0\2\15\6\0\14\15\1\0\4\15\1\0"+
    "\2\15\5\0\3\15\1\205\30\15\1\0\3\15\6\0"+
    "\1\111\11\0\11\15\5\0\2\10\12\0\1\206\10\0"+
    "\1\10\23\0\1\206\2\0\1\207\12\0\1\10\4\0"+
    "\1\207\12\0\1\104\21\0\1\10\10\0\1\12\3\0"+
    "\1\12\6\210\1\0\1\12\1\210\1\211\1\0\1\210"+
    "\1\12\1\0\1\210\2\0\1\12\2\210\2\12\1\0"+
    "\2\12\4\210\27\0\1\210\1\12\3\210\5\0\2\12"+
    "\1\0\1\12\1\0\6\12\7\210\2\0\1\12\106\0"+
    "\1\212\131\0\1\213\35\0\41\100\1\0\75\100\17\0"+
    "\1\214\21\0\1\215\145\0\1\216\201\0\1\217\24\0"+
    "\3\220\1\105\3\0\1\105\1\220\1\0\1\105\3\0"+
    "\1\105\1\221\10\0\1\105\1\0\1\222\1\105\4\0"+
    "\1\105\2\0\1\223\4\105\1\224\1\225\1\226\1\227"+
    "\1\0\1\230\2\0\1\231\1\0\1\232\1\233\1\0"+
    "\1\234\1\235\1\230\1\225\1\0\1\105\2\0\1\225"+
    "\1\0\1\236\3\0\1\105\20\0\1\105\7\0\1\105"+
    "\5\0\2\15\6\0\14\15\1\0\4\15\1\0\2\15"+
    "\5\0\1\15\1\237\32\15\1\0\3\15\6\0\1\111"+
    "\11\0\11\15\114\0\1\111\27\0\2\15\6\0\14\15"+
    "\1\0\4\15\1\0\1\15\1\240\5\0\34\15\1\0"+
    "\3\15\6\0\1\111\11\0\11\15\5\0\2\15\6\0"+
    "\14\15\1\0\4\15\1\0\1\15\1\241\5\0\34\15"+
    "\1\0\3\15\6\0\1\111\11\0\11\15\5\0\2\15"+
    "\6\0\14\15\1\0\4\15\1\0\2\15\5\0\34\15"+
    "\1\0\3\15\6\0\1\111\11\0\1\242\10\15\114\0"+
    "\1\116\37\0\6\243\2\244\2\243\1\244\1\243\2\0"+
    "\1\243\1\244\2\0\2\243\5\0\4\243\22\244\1\0"+
    "\4\244\1\243\1\0\3\243\20\0\7\243\1\244\11\0"+
    "\1\12\3\0\1\12\6\243\1\244\1\245\1\243\1\246"+
    "\1\244\1\243\1\12\1\0\1\243\1\244\1\0\1\12"+
    "\2\243\2\12\1\0\2\12\4\243\22\244\1\0\4\244"+
    "\1\243\1\12\3\243\5\0\2\12\1\0\1\12\1\0"+
    "\6\12\7\243\1\244\1\0\1\12\7\0\1\121\3\0"+
    "\1\121\7\0\1\121\1\0\1\121\2\0\1\121\4\0"+
    "\1\121\2\0\2\121\1\0\2\121\34\0\1\121\10\0"+
    "\2\121\1\0\1\121\1\0\6\121\11\0\1\121\4\0"+
    "\2\15\6\0\14\15\1\0\4\15\1\0\2\15\5\0"+
    "\3\15\1\247\30\15\1\0\3\15\6\0\1\111\11\0"+
    "\11\15\5\0\2\15\6\0\14\15\1\0\4\15\1\0"+
    "\2\15\5\0\3\15\1\250\30\15\1\0\3\15\6\0"+
    "\1\111\11\0\11\15\5\0\2\15\6\0\1\251\13\15"+
    "\1\0\4\15\1\0\2\15\5\0\34\15\1\0\3\15"+
    "\6\0\1\111\11\0\2\15\1\252\6\15\35\0\1\253"+
    "\106\0\1\254\3\0\1\127\2\0\1\127\3\0\1\127"+
    "\1\255\10\0\1\254\1\0\1\256\1\127\4\0\1\127"+
    "\2\0\1\257\4\127\1\260\1\261\1\262\1\263\1\0"+
    "\1\264\2\0\1\265\1\0\1\266\1\267\1\0\1\270"+
    "\1\271\1\264\1\261\1\0\1\254\2\0\1\261\1\0"+
    "\1\272\3\0\1\127\20\0\1\127\7\0\1\254\10\0"+
    "\1\12\3\0\1\12\7\0\1\12\1\0\1\12\2\0"+
    "\1\12\4\0\1\12\2\0\2\12\1\0\2\12\34\0"+
    "\1\12\6\0\1\273\1\0\2\12\1\0\1\12\1\0"+
    "\6\12\11\0\1\12\4\0\2\15\6\0\14\15\1\0"+
    "\4\15\1\0\2\15\5\0\34\15\1\0\3\15\6\0"+
    "\1\111\11\0\2\15\1\274\6\15\5\0\2\15\6\0"+
    "\1\275\13\15\1\0\4\15\1\0\2\15\5\0\1\15"+
    "\1\276\32\15\1\0\3\15\6\0\1\111\11\0\11\15"+
    "\5\0\2\15\6\0\14\15\1\0\4\15\1\0\2\15"+
    "\5\0\34\15\1\0\3\15\6\0\1\111\11\0\1\277"+
    "\10\15\5\0\2\15\6\0\14\15\1\0\4\15\1\0"+
    "\2\15\5\0\1\15\1\300\1\301\31\15\1\0\3\15"+
    "\6\0\1\111\11\0\11\15\105\0\1\302\36\0\2\15"+
    "\6\0\14\15\1\0\4\15\1\0\2\15\5\0\2\15"+
    "\1\303\31\15\1\0\3\15\6\0\1\111\11\0\11\15"+
    "\5\0\2\15\6\0\2\15\1\304\11\15\1\0\4\15"+
    "\1\0\2\15\5\0\34\15\1\0\3\15\6\0\1\111"+
    "\11\0\11\15\5\0\2\15\6\0\5\15\1\305\6\15"+
    "\1\0\4\15\1\0\2\15\5\0\34\15\1\0\3\15"+
    "\6\0\1\111\11\0\11\15\1\0\3\147\1\0\133\147"+
    "\4\0\2\15\6\0\1\306\13\15\1\0\4\15\1\0"+
    "\2\15\5\0\34\15\1\0\3\15\6\0\1\111\11\0"+
    "\11\15\5\0\2\15\6\0\14\15\1\0\4\15\1\0"+
    "\2\15\5\0\34\15\1\0\3\15\6\0\1\111\11\0"+
    "\2\15\1\307\6\15\5\0\2\15\6\0\14\15\1\0"+
    "\4\15\1\0\2\15\5\0\34\15\1\0\3\15\6\0"+
    "\1\111\11\0\4\15\1\310\4\15\114\0\1\311\135\0"+
    "\1\312\136\0\1\157\136\0\1\313\136\0\1\314\136\0"+
    "\1\315\24\0\3\316\1\0\5\316\2\0\124\316\7\0"+
    "\1\12\3\0\1\12\7\0\1\12\1\0\1\12\2\0"+
    "\1\12\4\0\1\12\2\0\2\12\1\317\2\12\34\0"+
    "\1\12\10\0\2\12\1\0\1\12\1\0\6\12\11\0"+
    "\1\12\46\0\1\320\77\0\1\12\3\0\1\12\7\0"+
    "\1\12\1\0\1\12\2\0\1\12\4\0\1\12\2\0"+
    "\2\12\1\0\2\12\34\0\1\12\4\0\1\321\3\0"+
    "\2\12\1\0\1\12\1\0\6\12\11\0\1\12\21\0"+
    "\1\322\62\0\1\323\36\0\2\15\6\0\14\15\1\0"+
    "\4\15\1\0\2\15\5\0\34\15\1\0\3\15\6\0"+
    "\1\111\11\0\2\15\1\324\6\15\5\0\2\15\6\0"+
    "\14\15\1\0\4\15\1\0\2\15\5\0\34\15\1\0"+
    "\1\325\2\15\6\0\1\111\11\0\11\15\5\0\2\15"+
    "\6\0\1\326\13\15\1\0\4\15\1\0\2\15\5\0"+
    "\34\15\1\0\3\15\6\0\1\111\11\0\11\15\5\0"+
    "\2\15\6\0\14\15\1\0\4\15\1\0\1\327\1\15"+
    "\5\0\34\15\1\0\3\15\6\0\1\111\11\0\11\15"+
    "\5\0\2\15\6\0\14\15\1\0\4\15\1\0\1\15"+
    "\1\330\5\0\34\15\1\0\3\15\6\0\1\111\11\0"+
    "\11\15\5\0\2\15\6\0\14\15\1\0\4\15\1\0"+
    "\2\15\5\0\34\15\1\0\1\331\2\15\6\0\1\111"+
    "\11\0\11\15\5\0\2\15\6\0\14\15\1\0\4\15"+
    "\1\0\2\15\5\0\3\15\1\332\30\15\1\0\3\15"+
    "\6\0\1\111\11\0\11\15\5\0\2\15\6\0\14\15"+
    "\1\0\4\15\1\0\2\15\5\0\1\333\33\15\1\0"+
    "\3\15\6\0\1\111\11\0\11\15\32\0\1\206\41\0"+
    "\1\206\41\0\1\206\5\0\1\207\12\0\1\207\11\0"+
    "\3\207\3\0\1\207\6\0\1\207\1\0\1\207\10\0"+
    "\1\207\1\0\2\207\1\0\2\207\3\0\1\207\6\0"+
    "\1\207\32\0\1\207\5\0\2\210\6\0\14\210\1\0"+
    "\4\210\1\0\2\210\5\0\34\210\1\0\3\210\20\0"+
    "\11\210\5\0\2\210\1\0\1\12\3\0\1\12\7\210"+
    "\1\211\1\210\1\211\2\210\1\12\4\210\1\12\2\210"+
    "\2\12\1\0\2\12\34\210\1\12\3\210\5\0\2\12"+
    "\1\0\1\12\1\0\6\12\11\210\1\12\102\0\1\334"+
    "\75\0\1\215\111\0\1\335\123\0\3\220\5\0\1\220"+
    "\27\0\1\105\126\0\1\105\41\0\1\105\41\0\1\105"+
    "\54\0\1\336\5\0\1\337\2\0\1\340\100\0\2\105"+
    "\3\0\1\105\5\0\4\105\4\0\22\105\1\0\4\105"+
    "\7\0\1\105\24\0\1\105\54\0\1\337\10\0\1\341"+
    "\127\0\1\105\151\0\1\105\121\0\1\342\2\0\1\105"+
    "\1\0\1\343\12\0\1\105\1\0\1\344\2\0\1\105"+
    "\116\0\1\105\130\0\1\345\2\0\1\346\1\230\1\0"+
    "\1\347\15\0\1\105\125\0\1\341\135\0\1\344\5\0"+
    "\1\105\121\0\1\105\4\0\1\337\131\0\1\105\12\0"+
    "\1\105\53\0\1\105\12\0\1\105\11\0\3\105\3\0"+
    "\1\105\6\0\1\105\1\0\1\105\10\0\1\105\1\0"+
    "\2\105\1\0\2\105\3\0\1\105\6\0\1\105\32\0"+
    "\1\105\5\0\2\15\6\0\14\15\1\0\4\15\1\0"+
    "\2\15\5\0\34\15\1\0\1\350\2\15\6\0\1\111"+
    "\11\0\11\15\5\0\2\15\6\0\14\15\1\0\1\15"+
    "\1\351\2\15\1\0\2\15\5\0\34\15\1\0\3\15"+
    "\6\0\1\111\11\0\11\15\5\0\2\15\6\0\14\15"+
    "\1\0\4\15\1\0\2\15\5\0\34\15\1\0\3\15"+
    "\6\0\1\111\11\0\1\15\1\352\7\15\5\0\2\243"+
    "\6\0\14\243\1\0\4\243\1\0\2\243\5\0\34\243"+
    "\1\0\3\243\6\0\1\353\11\0\11\243\5\0\2\244"+
    "\6\0\14\244\1\0\4\244\1\0\2\244\5\0\34\244"+
    "\1\0\3\244\6\0\1\354\1\0\1\117\7\0\11\244"+
    "\5\0\2\244\1\0\1\12\3\0\1\12\7\244\1\245"+
    "\1\244\1\245\2\244\1\12\4\244\1\12\2\244\2\12"+
    "\1\0\2\12\34\244\1\12\3\244\5\0\2\12\1\0"+
    "\1\120\1\0\6\12\11\244\1\12\4\0\2\243\1\0"+
    "\1\12\3\0\1\12\7\243\1\246\1\243\1\246\2\243"+
    "\1\12\4\243\1\12\2\243\2\12\1\0\2\12\34\243"+
    "\1\12\3\243\5\0\2\12\1\0\1\12\1\0\6\12"+
    "\11\243\1\12\4\0\2\15\6\0\1\355\13\15\1\0"+
    "\4\15\1\0\2\15\5\0\34\15\1\0\3\15\6\0"+
    "\1\111\11\0\11\15\5\0\2\15\6\0\5\15\1\356"+
    "\6\15\1\0\4\15\1\0\2\15\5\0\34\15\1\0"+
    "\3\15\6\0\1\111\11\0\11\15\5\0\2\15\6\0"+
    "\14\15\1\0\4\15\1\0\2\15\5\0\34\15\1\0"+
    "\1\357\2\15\6\0\1\111\11\0\11\15\5\0\2\15"+
    "\6\0\14\15\1\0\4\15\1\0\1\360\1\15\5\0"+
    "\34\15\1\0\3\15\6\0\1\111\11\0\11\15\5\0"+
    "\1\254\24\0\1\254\2\0\1\253\36\0\1\254\41\0"+
    "\1\254\32\0\1\361\41\0\1\361\41\0\1\361\54\0"+
    "\1\362\5\0\1\363\2\0\1\364\100\0\2\127\3\0"+
    "\1\127\5\0\4\127\4\0\22\127\1\0\4\127\7\0"+
    "\1\127\24\0\1\127\54\0\1\363\10\0\1\365\127\0"+
    "\1\127\151\0\1\127\121\0\1\366\2\0\1\367\1\0"+
    "\1\370\12\0\1\127\1\0\1\371\2\0\1\127\116\0"+
    "\1\127\130\0\1\372\2\0\1\373\1\264\1\0\1\374"+
    "\15\0\1\127\125\0\1\365\135\0\1\371\5\0\1\127"+
    "\121\0\1\127\4\0\1\363\131\0\1\127\12\0\1\127"+
    "\53\0\1\375\12\0\1\375\11\0\3\375\3\0\1\375"+
    "\6\0\1\375\1\0\1\375\10\0\1\375\1\0\2\375"+
    "\1\0\2\375\3\0\1\375\6\0\1\375\32\0\1\375"+
    "\5\0\2\15\6\0\4\15\1\376\7\15\1\0\4\15"+
    "\1\0\2\15\5\0\34\15\1\0\3\15\6\0\1\111"+
    "\11\0\11\15\5\0\2\15\6\0\14\15\1\0\4\15"+
    "\1\0\2\15\5\0\34\15\1\0\3\15\6\0\1\111"+
    "\11\0\1\377\10\15\5\0\2\15\6\0\14\15\1\0"+
    "\4\15\1\0\1\u0100\1\15\5\0\34\15\1\0\3\15"+
    "\6\0\1\111\11\0\11\15\5\0\2\15\6\0\14\15"+
    "\1\0\4\15\1\0\2\15\5\0\3\15\1\u0101\30\15"+
    "\1\0\3\15\6\0\1\111\11\0\11\15\5\0\2\15"+
    "\6\0\14\15\1\0\4\15\1\0\2\15\5\0\3\15"+
    "\1\u0102\30\15\1\0\3\15\6\0\1\111\11\0\11\15"+
    "\5\0\2\15\6\0\14\15\1\0\4\15\1\0\1\u0103"+
    "\1\15\5\0\34\15\1\0\3\15\6\0\1\111\11\0"+
    "\11\15\40\0\1\u0104\103\0\2\15\6\0\14\15\1\0"+
    "\4\15\1\0\2\15\5\0\3\15\1\u0105\30\15\1\0"+
    "\1\u0106\2\15\6\0\1\111\11\0\11\15\5\0\2\15"+
    "\6\0\14\15\1\0\4\15\1\0\1\u0107\1\15\5\0"+
    "\34\15\1\0\3\15\6\0\1\111\11\0\11\15\5\0"+
    "\2\15\6\0\14\15\1\0\4\15\1\0\2\15\5\0"+
    "\34\15\1\0\1\u0108\2\15\6\0\1\111\11\0\11\15"+
    "\5\0\2\15\6\0\14\15\1\0\4\15\1\0\2\15"+
    "\5\0\34\15\1\0\1\u0109\2\15\6\0\1\111\11\0"+
    "\11\15\5\0\2\15\6\0\4\15\1\u010a\7\15\1\0"+
    "\4\15\1\0\2\15\5\0\34\15\1\0\3\15\6\0"+
    "\1\111\11\0\11\15\5\0\2\15\6\0\14\15\1\0"+
    "\4\15\1\0\2\15\5\0\34\15\1\0\3\15\6\0"+
    "\1\111\11\0\1\u010b\10\15\1\0\2\u010c\1\u010d\1\0"+
    "\5\u010c\2\0\100\u010c\1\u010e\23\u010c\13\0\1\u010f\123\0"+
    "\3\320\1\0\133\320\14\0\1\u0110\161\0\1\u0111\103\0"+
    "\2\15\6\0\14\15\1\0\4\15\1\0\2\15\5\0"+
    "\34\15\1\0\1\u0112\2\15\6\0\1\111\11\0\11\15"+
    "\5\0\2\15\6\0\14\15\1\0\4\15\1\0\2\15"+
    "\5\0\34\15\1\0\2\15\1\u0113\6\0\1\111\11\0"+
    "\11\15\5\0\2\15\6\0\14\15\1\0\4\15\1\0"+
    "\2\15\5\0\3\15\1\u0114\30\15\1\0\3\15\6\0"+
    "\1\111\11\0\11\15\5\0\2\15\6\0\2\15\1\u0115"+
    "\11\15\1\0\4\15\1\0\2\15\5\0\34\15\1\0"+
    "\3\15\6\0\1\111\11\0\11\15\5\0\2\15\6\0"+
    "\14\15\1\0\4\15\1\0\1\u0116\1\15\5\0\34\15"+
    "\1\0\3\15\6\0\1\111\11\0\11\15\5\0\2\15"+
    "\6\0\14\15\1\0\4\15\1\0\2\15\5\0\2\15"+
    "\1\u0117\31\15\1\0\3\15\6\0\1\111\11\0\11\15"+
    "\5\0\2\15\6\0\5\15\1\u0118\6\15\1\0\4\15"+
    "\1\0\2\15\5\0\34\15\1\0\3\15\6\0\1\111"+
    "\11\0\11\15\5\0\2\15\6\0\14\15\1\0\4\15"+
    "\1\0\2\15\5\0\3\15\1\u0119\30\15\1\0\3\15"+
    "\6\0\1\111\11\0\11\15\104\0\1\u011a\135\0\1\u011b"+
    "\115\0\1\105\130\0\1\105\156\0\1\105\130\0\1\105"+
    "\137\0\1\105\130\0\1\105\127\0\1\105\147\0\1\105"+
    "\140\0\1\105\132\0\1\105\5\0\1\105\54\0\2\15"+
    "\6\0\14\15\1\0\4\15\1\0\2\15\5\0\3\15"+
    "\1\u011c\30\15\1\0\3\15\6\0\1\111\11\0\11\15"+
    "\5\0\2\15\6\0\5\15\1\u011d\6\15\1\0\4\15"+
    "\1\0\2\15\5\0\34\15\1\0\3\15\6\0\1\111"+
    "\11\0\11\15\114\0\1\353\136\0\1\354\27\0\2\15"+
    "\6\0\1\u011e\13\15\1\0\4\15\1\0\2\15\5\0"+
    "\34\15\1\0\3\15\6\0\1\111\11\0\11\15\5\0"+
    "\2\15\6\0\5\15\1\u011f\6\15\1\0\4\15\1\0"+
    "\2\15\5\0\34\15\1\0\3\15\6\0\1\111\11\0"+
    "\11\15\32\0\1\361\2\0\1\253\36\0\1\361\41\0"+
    "\1\361\62\0\1\127\130\0\1\127\156\0\1\127\130\0"+
    "\1\127\137\0\1\127\104\0\1\253\21\0\1\127\140\0"+
    "\1\127\127\0\1\127\147\0\1\127\140\0\1\127\132\0"+
    "\1\127\5\0\1\127\54\0\1\375\12\0\1\375\11\0"+
    "\3\375\1\253\2\0\1\375\6\0\1\375\1\0\1\375"+
    "\10\0\1\375\1\0\2\375\1\0\2\375\3\0\1\375"+
    "\6\0\1\375\32\0\1\375\5\0\2\15\6\0\14\15"+
    "\1\0\4\15\1\0\2\15\5\0\2\15\1\u0120\31\15"+
    "\1\0\3\15\6\0\1\111\11\0\11\15\5\0\2\15"+
    "\6\0\14\15\1\0\4\15\1\0\2\15\5\0\3\15"+
    "\1\u0121\30\15\1\0\3\15\6\0\1\111\11\0\11\15"+
    "\5\0\2\15\6\0\14\15\1\0\4\15\1\0\2\15"+
    "\5\0\33\15\1\u0122\1\0\3\15\6\0\1\111\11\0"+
    "\11\15\5\0\2\15\6\0\14\15\1\0\4\15\1\0"+
    "\2\15\5\0\34\15\1\0\3\15\6\0\1\111\11\0"+
    "\1\15\1\u0123\7\15\5\0\2\15\6\0\14\15\1\0"+
    "\4\15\1\0\2\15\5\0\1\u0124\33\15\1\0\3\15"+
    "\6\0\1\111\11\0\11\15\106\0\1\u0125\35\0\2\15"+
    "\6\0\5\15\1\u0126\6\15\1\0\4\15\1\0\2\15"+
    "\5\0\34\15\1\0\3\15\6\0\1\111\11\0\11\15"+
    "\5\0\2\15\6\0\14\15\1\0\4\15\1\0\1\u0127"+
    "\1\15\5\0\34\15\1\0\3\15\6\0\1\111\11\0"+
    "\11\15\5\0\2\15\6\0\5\15\1\u0128\6\15\1\0"+
    "\4\15\1\0\2\15\5\0\34\15\1\0\3\15\6\0"+
    "\1\111\11\0\11\15\5\0\2\15\6\0\14\15\1\0"+
    "\4\15\1\0\2\15\5\0\2\15\1\u0129\31\15\1\0"+
    "\3\15\6\0\1\111\11\0\11\15\5\0\2\15\6\0"+
    "\1\15\1\u012a\12\15\1\0\4\15\1\0\2\15\5\0"+
    "\34\15\1\0\3\15\6\0\1\111\11\0\11\15\1\0"+
    "\3\u010c\1\0\5\u010c\2\0\100\u010c\1\u010e\26\u010c\1\0"+
    "\5\u010c\2\0\20\u010c\1\u012b\15\u010c\1\u012c\1\u012d\1\u010c"+
    "\1\u012e\1\u012f\5\u010c\1\u0130\1\u0131\3\u010c\1\u0132\1\u0133"+
    "\1\u0134\2\u010c\1\u0135\1\u0136\14\u010c\1\u010e\20\u010c\1\u0137"+
    "\5\u010c\1\0\5\u010c\2\0\66\u010c\1\u0138\11\u010c\1\u010e"+
    "\23\u010c\13\0\1\u0139\225\0\1\u013a\72\0\1\u013b\104\0"+
    "\2\15\6\0\14\15\1\0\4\15\1\0\2\15\5\0"+
    "\1\15\1\u013c\32\15\1\0\3\15\6\0\1\111\11\0"+
    "\11\15\5\0\2\15\6\0\14\15\1\0\4\15\1\0"+
    "\2\15\5\0\34\15\1\0\2\15\1\u013d\6\0\1\111"+
    "\11\0\11\15\5\0\2\15\6\0\14\15\1\0\4\15"+
    "\1\0\2\15\5\0\34\15\1\0\1\u013e\2\15\6\0"+
    "\1\111\11\0\11\15\5\0\2\15\6\0\14\15\1\0"+
    "\4\15\1\0\1\u013f\1\15\5\0\34\15\1\0\3\15"+
    "\6\0\1\111\11\0\11\15\5\0\2\15\6\0\1\u0140"+
    "\13\15\1\0\4\15\1\0\2\15\5\0\34\15\1\0"+
    "\3\15\6\0\1\111\11\0\11\15\37\0\1\u0141\104\0"+
    "\2\15\6\0\5\15\1\u0142\6\15\1\0\4\15\1\0"+
    "\2\15\5\0\34\15\1\0\3\15\6\0\1\111\11\0"+
    "\11\15\5\0\2\15\6\0\14\15\1\0\4\15\1\0"+
    "\2\15\5\0\34\15\1\0\1\u0143\2\15\6\0\1\111"+
    "\11\0\11\15\5\0\2\15\6\0\14\15\1\0\4\15"+
    "\1\0\2\15\5\0\34\15\1\0\3\15\6\0\1\111"+
    "\11\0\1\u0144\10\15\5\0\2\15\6\0\14\15\1\0"+
    "\4\15\1\0\2\15\5\0\34\15\1\0\2\15\1\u0145"+
    "\6\0\1\111\11\0\11\15\5\0\2\15\6\0\5\15"+
    "\1\u0146\6\15\1\0\4\15\1\0\2\15\5\0\2\15"+
    "\1\u0147\31\15\1\0\3\15\6\0\1\111\11\0\11\15"+
    "\5\0\2\15\6\0\5\15\1\u0148\6\15\1\0\4\15"+
    "\1\0\2\15\5\0\34\15\1\0\3\15\6\0\1\111"+
    "\11\0\11\15\5\0\2\15\6\0\14\15\1\0\4\15"+
    "\1\0\1\u0149\1\15\5\0\34\15\1\0\3\15\6\0"+
    "\1\111\11\0\11\15\33\0\1\u014a\110\0\2\15\6\0"+
    "\5\15\1\u014b\6\15\1\0\4\15\1\0\2\15\5\0"+
    "\34\15\1\0\3\15\6\0\1\111\11\0\11\15\5\0"+
    "\2\15\6\0\14\15\1\0\4\15\1\0\2\15\5\0"+
    "\34\15\1\0\1\15\1\u014c\1\15\6\0\1\111\11\0"+
    "\11\15\5\0\2\15\6\0\1\15\1\u014d\12\15\1\0"+
    "\4\15\1\0\2\15\5\0\34\15\1\0\3\15\6\0"+
    "\1\111\11\0\11\15\5\0\2\15\6\0\14\15\1\0"+
    "\4\15\1\0\2\15\5\0\34\15\1\0\3\15\6\0"+
    "\1\111\11\0\1\u014e\10\15\5\0\2\15\6\0\14\15"+
    "\1\0\4\15\1\0\2\15\5\0\34\15\1\0\3\15"+
    "\6\0\1\111\11\0\2\15\1\u014f\6\15\1\0\3\u010c"+
    "\1\0\5\u010c\2\0\46\u010c\1\u0150\31\u010c\1\u010e\26\u010c"+
    "\1\0\5\u010c\2\0\42\u010c\1\u0151\35\u010c\1\u010e\26\u010c"+
    "\1\0\5\u010c\2\0\36\u010c\1\u0152\41\u010c\1\u010e\26\u010c"+
    "\1\0\5\u010c\2\0\42\u010c\1\u0153\6\u010c\1\u0154\12\u010c"+
    "\1\u0155\13\u010c\1\u010e\26\u010c\1\0\5\u010c\2\0\55\u010c"+
    "\1\u0156\22\u010c\1\u010e\26\u010c\1\0\5\u010c\2\0\36\u010c"+
    "\1\u0157\41\u010c\1\u010e\26\u010c\1\0\5\u010c\2\0\42\u010c"+
    "\1\u0158\1\u010c\1\u0159\33\u010c\1\u010e\26\u010c\1\0\5\u010c"+
    "\2\0\46\u010c\1\u015a\31\u010c\1\u010e\26\u010c\1\0\5\u010c"+
    "\2\0\37\u010c\1\u015b\40\u010c\1\u010e\26\u010c\1\0\5\u010c"+
    "\2\0\36\u010c\1\u015c\41\u010c\1\u010e\26\u010c\1\0\5\u010c"+
    "\2\0\57\u010c\1\u015d\20\u010c\1\u010e\26\u010c\1\0\5\u010c"+
    "\2\0\46\u010c\1\u015e\31\u010c\1\u010e\26\u010c\1\0\5\u010c"+
    "\2\0\50\u010c\1\u015f\27\u010c\1\u010e\26\u010c\1\0\5\u010c"+
    "\2\0\73\u010c\1\u0160\4\u010c\1\u010e\23\u010c\14\u0161\1\u0162"+
    "\1\u0163\121\u0161\3\u013a\1\0\133\u013a\46\0\1\u0164\74\0"+
    "\2\15\6\0\14\15\1\0\4\15\1\0\2\15\5\0"+
    "\34\15\1\0\1\u0165\2\15\6\0\1\111\11\0\11\15"+
    "\5\0\2\15\6\0\14\15\1\0\4\15\1\0\2\15"+
    "\5\0\34\15\1\0\1\15\1\u0166\1\15\6\0\1\111"+
    "\11\0\11\15\5\0\2\15\6\0\14\15\1\0\4\15"+
    "\1\0\2\15\5\0\1\15\1\u0167\32\15\1\0\3\15"+
    "\6\0\1\111\11\0\11\15\5\0\2\15\6\0\14\15"+
    "\1\0\1\15\1\u0168\2\15\1\0\2\15\5\0\34\15"+
    "\1\0\3\15\6\0\1\111\11\0\11\15\105\0\1\u0169"+
    "\36\0\2\15\6\0\5\15\1\u016a\6\15\1\0\4\15"+
    "\1\0\2\15\5\0\34\15\1\0\3\15\6\0\1\111"+
    "\11\0\11\15\5\0\2\15\6\0\14\15\1\0\1\15"+
    "\1\u016b\2\15\1\0\2\15\5\0\34\15\1\0\3\15"+
    "\6\0\1\111\11\0\11\15\5\0\2\15\6\0\14\15"+
    "\1\0\4\15\1\0\2\15\5\0\34\15\1\0\3\15"+
    "\6\0\1\111\11\0\1\u016c\10\15\5\0\2\15\6\0"+
    "\14\15\1\0\4\15\1\0\2\15\5\0\34\15\1\0"+
    "\2\15\1\u016d\6\0\1\111\11\0\11\15\21\0\1\u016e"+
    "\122\0\2\15\6\0\14\15\1\0\4\15\1\0\2\15"+
    "\5\0\34\15\1\0\2\15\1\u016f\6\0\1\111\11\0"+
    "\11\15\5\0\2\15\6\0\14\15\1\0\4\15\1\0"+
    "\2\15\5\0\34\15\1\0\1\u0170\2\15\6\0\1\111"+
    "\11\0\11\15\1\0\3\u010c\1\0\5\u010c\2\0\64\u010c"+
    "\1\u0171\13\u010c\1\u010e\26\u010c\1\0\5\u010c\2\0\37\u010c"+
    "\1\u0172\15\u010c\1\u0173\22\u010c\1\u010e\26\u010c\1\0\5\u010c"+
    "\2\0\64\u010c\1\u0174\13\u010c\1\u010e\26\u010c\1\0\5\u010c"+
    "\2\0\37\u010c\1\u0175\40\u010c\1\u010e\26\u010c\1\0\5\u010c"+
    "\2\0\51\u010c\1\u0176\26\u010c\1\u010e\26\u010c\1\0\5\u010c"+
    "\2\0\46\u010c\1\u0177\31\u010c\1\u010e\26\u010c\1\0\5\u010c"+
    "\2\0\46\u010c\1\u0178\31\u010c\1\u010e\26\u010c\1\0\5\u010c"+
    "\2\0\36\u010c\1\u0179\41\u010c\1\u010e\26\u010c\1\0\5\u010c"+
    "\2\0\56\u010c\1\u017a\21\u010c\1\u010e\26\u010c\1\0\5\u010c"+
    "\2\0\61\u010c\1\u017b\16\u010c\1\u010e\26\u010c\1\0\5\u010c"+
    "\2\0\51\u010c\1\u017c\26\u010c\1\u010e\26\u010c\1\0\5\u010c"+
    "\2\0\40\u010c\1\u017d\37\u010c\1\u010e\26\u010c\1\0\5\u010c"+
    "\2\0\40\u010c\1\u017e\10\u010c\1\u017f\26\u010c\1\u010e\26\u010c"+
    "\1\0\5\u010c\2\0\36\u010c\1\u0180\41\u010c\1\u010e\26\u010c"+
    "\1\0\5\u010c\2\0\36\u010c\1\u0181\41\u010c\1\u010e\26\u010c"+
    "\1\0\5\u010c\2\0\56\u010c\1\u0182\21\u010c\1\u010e\23\u010c"+
    "\15\u0161\1\u0163\275\u0161\1\u0163\1\u0183\120\u0161\3\u0164\1\0"+
    "\133\u0164\4\0\2\15\6\0\14\15\1\0\4\15\1\0"+
    "\1\u0184\1\15\5\0\34\15\1\0\3\15\6\0\1\111"+
    "\11\0\11\15\5\0\2\15\6\0\14\15\1\0\4\15"+
    "\1\0\2\15\5\0\2\15\1\u0185\31\15\1\0\3\15"+
    "\6\0\1\111\11\0\11\15\106\0\1\u0186\35\0\2\15"+
    "\6\0\14\15\1\0\4\15\1\0\2\15\5\0\34\15"+
    "\1\0\1\u0187\2\15\6\0\1\111\11\0\11\15\5\0"+
    "\2\15\6\0\14\15\1\0\4\15\1\0\2\15\5\0"+
    "\34\15\1\0\1\15\1\u0188\1\15\6\0\1\111\11\0"+
    "\11\15\40\0\1\u0189\77\0\3\u010c\1\0\5\u010c\2\0"+
    "\56\u010c\1\u018a\21\u010c\1\u010e\26\u010c\1\0\5\u010c\2\0"+
    "\36\u010c\1\u018b\41\u010c\1\u010e\26\u010c\1\0\5\u010c\2\0"+
    "\46\u010c\1\u018c\31\u010c\1\u010e\26\u010c\1\0\5\u010c\2\0"+
    "\50\u010c\1\u018d\27\u010c\1\u010e\26\u010c\1\0\5\u010c\2\0"+
    "\56\u010c\1\u018e\21\u010c\1\u010e\26\u010c\1\0\5\u010c\2\0"+
    "\51\u010c\1\u018f\26\u010c\1\u010e\26\u010c\1\0\5\u010c\2\0"+
    "\56\u010c\1\u0190\21\u010c\1\u010e\26\u010c\1\0\5\u010c\2\0"+
    "\46\u010c\1\u0191\31\u010c\1\u010e\26\u010c\1\0\5\u010c\2\0"+
    "\64\u010c\1\u0192\13\u010c\1\u010e\26\u010c\1\0\5\u010c\2\0"+
    "\44\u010c\1\u0193\33\u010c\1\u010e\26\u010c\1\0\5\u010c\2\0"+
    "\46\u010c\1\u0194\31\u010c\1\u010e\26\u010c\1\0\5\u010c\2\0"+
    "\57\u010c\1\u0195\20\u010c\1\u010e\26\u010c\1\0\5\u010c\2\0"+
    "\42\u010c\1\u0196\35\u010c\1\u010e\26\u010c\1\0\5\u010c\2\0"+
    "\57\u010c\1\u0197\20\u010c\1\u010e\26\u010c\1\0\5\u010c\2\0"+
    "\46\u010c\1\u0198\31\u010c\1\u010e\26\u010c\1\0\5\u010c\2\0"+
    "\36\u010c\1\u0199\41\u010c\1\u010e\23\u010c\15\u0161\1\u0163\1\u0161"+
    "\1\u019a\117\u0161\4\0\2\15\6\0\14\15\1\0\4\15"+
    "\1\0\2\15\5\0\34\15\1\0\1\u019b\2\15\6\0"+
    "\1\111\11\0\11\15\5\0\2\15\6\0\14\15\1\0"+
    "\4\15\1\0\1\u019c\1\15\5\0\34\15\1\0\3\15"+
    "\6\0\1\111\11\0\11\15\33\0\1\u019d\206\0\1\u019e"+
    "\34\0\3\u010c\1\0\5\u010c\2\0\46\u010c\1\u019f\31\u010c"+
    "\1\u010e\26\u010c\1\0\5\u010c\2\0\64\u010c\1\u01a0\13\u010c"+
    "\1\u010e\26\u010c\1\0\5\u010c\2\0\51\u010c\1\u01a1\26\u010c"+
    "\1\u010e\26\u010c\1\0\5\u010c\2\0\51\u010c\1\u01a2\26\u010c"+
    "\1\u010e\26\u010c\1\0\5\u010c\2\0\51\u010c\1\u01a3\26\u010c"+
    "\1\u010e\26\u010c\1\0\5\u010c\2\0\57\u010c\1\u01a4\20\u010c"+
    "\1\u010e\26\u010c\1\0\5\u010c\2\0\40\u010c\1\u01a5\37\u010c"+
    "\1\u010e\26\u010c\1\0\5\u010c\2\0\46\u010c\1\u01a6\31\u010c"+
    "\1\u010e\26\u010c\1\0\5\u010c\2\0\42\u010c\1\u01a7\35\u010c"+
    "\1\u010e\26\u010c\1\0\5\u010c\2\0\41\u010c\1\u01a8\36\u010c"+
    "\1\u010e\26\u010c\1\0\5\u010c\2\0\36\u010c\1\u01a9\41\u010c"+
    "\1\u010e\26\u010c\1\0\5\u010c\2\0\43\u010c\1\u01aa\34\u010c"+
    "\1\u010e\26\u010c\1\0\5\u010c\2\0\62\u010c\1\u01ab\15\u010c"+
    "\1\u010e\26\u010c\1\0\5\u010c\2\0\56\u010c\1\u01ac\21\u010c"+
    "\1\u010e\26\u010c\1\0\5\u010c\2\0\57\u010c\1\u01ad\20\u010c"+
    "\1\u010e\23\u010c\15\u0161\1\u0163\2\u0161\1\u01ae\116\u0161\4\0"+
    "\2\15\6\0\14\15\1\0\4\15\1\0\1\15\1\u01af"+
    "\5\0\34\15\1\0\3\15\6\0\1\111\11\0\11\15"+
    "\5\0\2\15\6\0\14\15\1\0\4\15\1\0\2\15"+
    "\5\0\34\15\1\0\3\15\6\0\1\111\11\0\2\15"+
    "\1\u01b0\6\15\21\0\1\u01b1\224\0\1\u01b2\30\0\3\u010c"+
    "\1\0\5\u010c\2\0\51\u010c\1\u01b3\26\u010c\1\u010e\26\u010c"+
    "\1\0\5\u010c\2\0\50\u010c\1\u01b4\27\u010c\1\u010e\26\u010c"+
    "\1\0\5\u010c\2\0\44\u010c\1\u01b5\33\u010c\1\u010e\26\u010c"+
    "\1\0\5\u010c\2\0\52\u010c\1\u01b6\25\u010c\1\u010e\26\u010c"+
    "\1\0\5\u010c\2\0\46\u010c\1\u01b7\31\u010c\1\u010e\26\u010c"+
    "\1\0\5\u010c\2\0\50\u010c\1\u01b8\27\u010c\1\u010e\26\u010c"+
    "\1\0\5\u010c\2\0\50\u010c\1\u01b9\27\u010c\1\u010e\26\u010c"+
    "\1\0\5\u010c\2\0\56\u010c\1\u01ba\21\u010c\1\u010e\26\u010c"+
    "\1\0\5\u010c\2\0\46\u010c\1\u01bb\31\u010c\1\u010e\26\u010c"+
    "\1\0\5\u010c\2\0\46\u010c\1\u01bc\31\u010c\1\u010e\26\u010c"+
    "\1\0\5\u010c\2\0\50\u010c\1\u01bd\27\u010c\1\u010e\26\u010c"+
    "\1\0\5\u010c\2\0\50\u010c\1\u01be\27\u010c\1\u010e\26\u010c"+
    "\1\0\5\u010c\2\0\36\u010c\1\u01bf\41\u010c\1\u010e\23\u010c"+
    "\15\u0161\1\u0163\3\u0161\1\u01c0\115\u0161\4\0\2\15\6\0"+
    "\14\15\1\0\4\15\1\0\2\15\5\0\34\15\1\0"+
    "\3\15\6\0\1\111\11\0\1\u01c1\10\15\40\0\1\u01c2"+
    "\77\0\3\u010c\1\0\5\u010c\2\0\50\u010c\1\u01c3\27\u010c"+
    "\1\u010e\26\u010c\1\0\5\u010c\2\0\51\u010c\1\u01c4\26\u010c"+
    "\1\u010e\26\u010c\1\0\5\u010c\2\0\42\u010c\1\u01c5\35\u010c"+
    "\1\u010e\26\u010c\1\0\5\u010c\2\0\40\u010c\1\u01c6\37\u010c"+
    "\1\u010e\26\u010c\1\0\5\u010c\2\0\64\u010c\1\u01c7\13\u010c"+
    "\1\u010e\26\u010c\1\0\5\u010c\2\0\57\u010c\1\u01c8\20\u010c"+
    "\1\u010e\26\u010c\1\0\5\u010c\2\0\56\u010c\1\u01c9\21\u010c"+
    "\1\u010e\26\u010c\1\0\5\u010c\2\0\40\u010c\1\u01ca\37\u010c"+
    "\1\u010e\26\u010c\1\0\5\u010c\2\0\44\u010c\1\u01cb\33\u010c"+
    "\1\u010e\26\u010c\1\0\5\u010c\2\0\63\u010c\1\u01cc\14\u010c"+
    "\1\u010e\23\u010c\102\0\1\u01cd\34\0\3\u010c\1\0\5\u010c"+
    "\2\0\44\u010c\1\u01ce\33\u010c\1\u010e\26\u010c\1\0\5\u010c"+
    "\2\0\52\u010c\1\u01cf\25\u010c\1\u010e\26\u010c\1\0\5\u010c"+
    "\2\0\56\u010c\1\u01d0\21\u010c\1\u010e\26\u010c\1\0\5\u010c"+
    "\2\0\57\u010c\1\u01d1\20\u010c\1\u010e\26\u010c\1\0\5\u010c"+
    "\2\0\41\u010c\1\u01d2\22\u010c\1\u01d3\13\u010c\1\u010e\26\u010c"+
    "\1\0\5\u010c\2\0\41\u010c\1\u01d4\36\u010c\1\u010e\26\u010c"+
    "\1\0\5\u010c\2\0\46\u010c\1\u01d5\31\u010c\1\u010e\26\u010c"+
    "\1\0\5\u010c\2\0\46\u010c\1\u01d6\31\u010c\1\u010e\23\u010c"+
    "\106\0\1\u01d7\30\0\3\u010c\1\0\5\u010c\2\0\46\u010c"+
    "\1\u01d8\31\u010c\1\u010e\26\u010c\1\0\5\u010c\2\0\57\u010c"+
    "\1\u01d9\20\u010c\1\u010e\26\u010c\1\0\5\u010c\2\0\41\u010c"+
    "\1\u01da\36\u010c\1\u010e\26\u010c\1\0\5\u010c\2\0\50\u010c"+
    "\1\u01db\6\u010c\1\u01dc\20\u010c\1\u010e\26\u010c\1\0\5\u010c"+
    "\2\0\46\u010c\1\u01dd\31\u010c\1\u010e\26\u010c\1\0\5\u010c"+
    "\2\0\36\u010c\1\u01de\41\u010c\1\u010e\26\u010c\1\0\5\u010c"+
    "\2\0\20\u010c\1\u01df\57\u010c\1\u010e\26\u010c\1\0\5\u010c"+
    "\2\0\20\u010c\1\u01e0\57\u010c\1\u010e\26\u010c\1\0\5\u010c"+
    "\2\0\41\u010c\1\u01e1\36\u010c\1\u010e\26\u010c\1\0\5\u010c"+
    "\2\0\46\u010c\1\u01e2\31\u010c\1\u010e\26\u010c\1\0\5\u010c"+
    "\2\0\53\u010c\1\u01e3\24\u010c\1\u010e\26\u010c\1\0\5\u010c"+
    "\2\0\36\u010c\1\u01e4\41\u010c\1\u010e\26\u010c\1\0\5\u010c"+
    "\2\0\14\u010c\1\u01e5\63\u010c\1\u010e\26\u010c\1\0\5\u010c"+
    "\2\0\44\u010c\1\u01e6\33\u010c\1\u010e\26\u010c\1\0\5\u010c"+
    "\2\0\46\u010c\1\u01e7\31\u010c\1\u010e\26\u010c\1\0\5\u010c"+
    "\2\0\14\u010c\1\u01e8\63\u010c\1\u010e\26\u010c\1\0\5\u010c"+
    "\2\0\40\u010c\1\u01e9\37\u010c\1\u010e\26\u010c\1\0\5\u010c"+
    "\2\0\63\u010c\1\u01ea\14\u010c\1\u010e\26\u010c\1\0\5\u010c"+
    "\2\0\41\u010c\1\u01eb\36\u010c\1\u010e\26\u010c\1\0\5\u010c"+
    "\2\0\57\u010c\1\u01ec\20\u010c\1\u010e\26\u010c\1\0\5\u010c"+
    "\2\0\46\u010c\1\u01ed\31\u010c\1\u010e\26\u010c\1\0\5\u010c"+
    "\2\0\51\u010c\1\u01ee\26\u010c\1\u010e\26\u010c\1\0\5\u010c"+
    "\2\0\36\u010c\1\u01ef\41\u010c\1\u010e\26\u010c\1\0\5\u010c"+
    "\2\0\50\u010c\1\u01f0\27\u010c\1\u010e\26\u010c\1\0\5\u010c"+
    "\2\0\40\u010c\1\u01f1\37\u010c\1\u010e\26\u010c\1\0\5\u010c"+
    "\2\0\40\u010c\1\u01f2\37\u010c\1\u010e\26\u010c\1\0\5\u010c"+
    "\2\0\57\u010c\1\u01f3\20\u010c\1\u010e\26\u010c\1\0\5\u010c"+
    "\2\0\50\u010c\1\u01f4\27\u010c\1\u010e\26\u010c\1\0\5\u010c"+
    "\2\0\36\u010c\1\u01f5\41\u010c\1\u010e\26\u010c\1\0\5\u010c"+
    "\2\0\56\u010c\1\u01f6\21\u010c\1\u010e\26\u010c\1\0\5\u010c"+
    "\2\0\46\u010c\1\u01f7\31\u010c\1\u010e\23\u010c";

  private static int [] zzUnpackTrans() {
    int [] result = new int[38380];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\1\1\0\1\11\1\1\1\11\1\1\1\11"+
    "\23\1\1\11\10\1\1\11\2\1\1\11\2\1\1\11"+
    "\1\1\1\11\16\1\1\11\4\1\1\11\2\1\1\0"+
    "\1\11\1\0\7\1\1\0\3\1\1\11\3\1\1\0"+
    "\1\11\1\0\1\1\1\11\6\1\1\0\11\1\1\11"+
    "\2\0\1\1\3\0\3\11\1\1\1\0\1\1\1\0"+
    "\1\11\17\1\2\11\1\0\1\1\1\0\1\11\17\0"+
    "\14\1\1\11\17\0\1\11\6\1\1\0\6\1\1\0"+
    "\4\11\1\0\1\11\1\1\1\11\2\0\10\1\14\0"+
    "\11\1\15\0\6\1\1\0\7\1\6\0\10\1\1\0"+
    "\1\11\11\1\1\0\5\1\17\0\1\1\1\0\5\1"+
    "\1\0\10\1\1\0\5\1\20\0\1\1\3\0\5\1"+
    "\1\0\4\1\1\0\2\1\5\0\1\1\2\0\1\1"+
    "\12\0\2\1\1\0\2\1\10\0\1\1\11\0\2\1"+
    "\11\0\1\1\1\0\1\1\6\0\2\1\1\0\1\11"+
    "\3\0\2\1\3\0\1\1\4\0\2\1\10\0\1\1"+
    "\1\0\1\1\2\0\1\1\2\0\1\1\4\0\1\11"+
    "\5\0\1\1\1\0\2\1\1\0\1\1\3\0\2\1"+
    "\2\0\1\1\2\0\1\1\10\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[503];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char[] zzBuffer = new char[0];

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    private int commentStart;
    private int commentDepth;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _HaskellLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _HaskellLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3366) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer.toString().toCharArray();
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return TokenPackage.getBLOCK_COMMENT();
          }
        case 129: break;
        case 2: 
          { return TokenType.BAD_CHARACTER;
          }
        case 130: break;
        case 3: 
          { return TokenType.WHITE_SPACE;
          }
        case 131: break;
        case 4: 
          { return TokenPackage.getNEW_LINE();
          }
        case 132: break;
        case 5: 
          { return HaskellLexerTokens.INTEGER;
          }
        case 133: break;
        case 6: 
          { return HaskellLexerTokens.BACKQUOTE;
          }
        case 134: break;
        case 7: 
          { return HaskellLexerTokens.VARSYM;
          }
        case 135: break;
        case 8: 
          { return HaskellLexerTokens.VARID;
          }
        case 136: break;
        case 9: 
          { return HaskellLexerTokens.CONID;
          }
        case 137: break;
        case 10: 
          { return HaskellLexerTokens.UNDERSCORE;
          }
        case 138: break;
        case 11: 
          { return HaskellLexerTokens.COLON;
          }
        case 139: break;
        case 12: 
          { return HaskellLexerTokens.SIMPLEQUOTE;
          }
        case 140: break;
        case 13: 
          { return HaskellLexerTokens.STAR;
          }
        case 141: break;
        case 14: 
          { yybegin(LAMBDA);
                        return HaskellLexerTokens.LAM;
          }
        case 142: break;
        case 15: 
          { return HaskellLexerTokens.CBRACK;
          }
        case 143: break;
        case 16: 
          { return HaskellLexerTokens.AT;
          }
        case 144: break;
        case 17: 
          { return HaskellLexerTokens.MINUS;
          }
        case 145: break;
        case 18: 
          { return HaskellLexerTokens.OCURLY;
          }
        case 146: break;
        case 19: 
          { return HaskellLexerTokens.CCURLY;
          }
        case 147: break;
        case 20: 
          { return HaskellLexerTokens.OBRACK;
          }
        case 148: break;
        case 21: 
          { return HaskellLexerTokens.OPAREN;
          }
        case 149: break;
        case 22: 
          { return HaskellLexerTokens.CPAREN;
          }
        case 150: break;
        case 23: 
          { return HaskellLexerTokens.VBAR;
          }
        case 151: break;
        case 24: 
          { return HaskellLexerTokens.SEMI;
          }
        case 152: break;
        case 25: 
          { return HaskellLexerTokens.DOT;
          }
        case 153: break;
        case 26: 
          { return HaskellLexerTokens.COMMA;
          }
        case 154: break;
        case 27: 
          { return HaskellLexerTokens.EQUAL;
          }
        case 155: break;
        case 28: 
          { return HaskellLexerTokens.RARROW;
          }
        case 156: break;
        case 29: 
          { return HaskellLexerTokens.TILDE;
          }
        case 157: break;
        case 30: 
          { return HaskellLexerTokens.BANG;
          }
        case 158: break;
        case 31: 
          { 
          }
        case 159: break;
        case 32: 
          { yypushback(1); yybegin(YYINITIAL);
          }
        case 160: break;
        case 33: 
          { return HaskellLexerTokens.STRING;
          }
        case 161: break;
        case 34: 
          { return HaskellLexerTokens.OF;
          }
        case 162: break;
        case 35: 
          { return HaskellLexerTokens.CONSYM;
          }
        case 163: break;
        case 36: 
          { return HaskellLexerTokens.DCOLON;
          }
        case 164: break;
        case 37: 
          { return HaskellLexerTokens.CPABRACK;
          }
        case 165: break;
        case 38: 
          { return HaskellLexerTokens.TYQUOTE;
          }
        case 166: break;
        case 39: 
          { return HaskellLexerTokens.PARENESCAPE;
          }
        case 167: break;
        case 40: 
          { return HaskellLexerTokens.IF;
          }
        case 168: break;
        case 41: 
          { return HaskellLexerTokens.IN;
          }
        case 169: break;
        case 42: 
          { return HaskellLexerTokens.DO;
          }
        case 170: break;
        case 43: 
          { return HaskellLexerTokens.AS;
          }
        case 171: break;
        case 44: 
          { return TokenPackage.getEND_OF_LINE_COMMENT();
          }
        case 172: break;
        case 45: 
          { yybegin(BLOCK_COMMENT);
    commentDepth = 0;
    commentStart = getTokenStart();
          }
        case 173: break;
        case 46: 
          { return HaskellLexerTokens.OPABRACK;
          }
        case 174: break;
        case 47: 
          { return HaskellLexerTokens.OPENEXPQUOTE;
          }
        case 175: break;
        case 48: 
          { return HaskellLexerTokens.OUBXPAREN;
          }
        case 176: break;
        case 49: 
          { return HaskellLexerTokens.CLOSEQUOTE;
          }
        case 177: break;
        case 50: 
          { return HaskellLexerTokens.CPARENBAR;
          }
        case 178: break;
        case 51: 
          { return HaskellLexerTokens.CUBXPAREN;
          }
        case 179: break;
        case 52: 
          { return HaskellLexerTokens.DOTDOT;
          }
        case 180: break;
        case 53: 
          { return HaskellLexerTokens.DARROW;
          }
        case 181: break;
        case 54: 
          { return HaskellLexerTokens.LARROW;
          }
        case 182: break;
        case 55: 
          { return HaskellLexerTokens.DUPIPVARID;
          }
        case 183: break;
        case 56: 
          { if (commentDepth > 0) {
            commentDepth--;
        }
        else {
             int state = yystate();
             yybegin(YYINITIAL);
             zzStartRead = commentStart;
             return TokenPackage.getBLOCK_COMMENT();
        }
          }
        case 184: break;
        case 57: 
          { commentDepth++;
          }
        case 185: break;
        case 58: 
          { return HaskellLexerTokens.LET;
          }
        case 186: break;
        case 59: 
          { return HaskellLexerTokens.QVARID;
          }
        case 187: break;
        case 60: 
          { return HaskellLexerTokens.QCONID;
          }
        case 188: break;
        case 61: 
          { return HaskellLexerTokens.CHAR;
          }
        case 189: break;
        case 62: 
          { return HaskellLexerTokens.PARENTYESCAPE;
          }
        case 190: break;
        case 63: 
          { return HaskellLexerTokens.OPENDECQUOTE;
          }
        case 191: break;
        case 64: 
          { return HaskellLexerTokens.OPENTEXPQUOTE;
          }
        case 192: break;
        case 65: 
          { return HaskellLexerTokens.OPENTYPQUOTE;
          }
        case 193: break;
        case 66: 
          { return HaskellLexerTokens.OPENPATQUOTE;
          }
        case 194: break;
        case 67: 
          { return HaskellLexerTokens.CLOSETEXPQUOTE;
          }
        case 195: break;
        case 68: 
          { return CPPTokens.IF;
          }
        case 196: break;
        case 69: 
          { return HaskellLexerTokens.CLOSE_PRAG;
          }
        case 197: break;
        case 70: 
          { return HaskellLexerTokens.SAFE;
          }
        case 198: break;
        case 71: 
          { return HaskellLexerTokens.CASE;
          }
        case 199: break;
        case 72: 
          { return HaskellLexerTokens.CAPICONV;
          }
        case 200: break;
        case 73: 
          { return HaskellLexerTokens.DATA;
          }
        case 201: break;
        case 74: 
          { return HaskellLexerTokens.ROLE;
          }
        case 202: break;
        case 75: 
          { return HaskellLexerTokens.ELSE;
          }
        case 203: break;
        case 76: 
          { return HaskellLexerTokens.TYPE;
          }
        case 204: break;
        case 77: 
          { return HaskellLexerTokens.THEN;
          }
        case 205: break;
        case 78: 
          { return HaskellLexerTokens.PRIMCALLCONV;
          }
        case 206: break;
        case 79: 
          { yybegin(YYINITIAL);
                   return HaskellLexerTokens.LCASE;
          }
        case 207: break;
        case 80: 
          { return HaskellLexerTokens.CLASS;
          }
        case 208: break;
        case 81: 
          { return HaskellLexerTokens.CCALLCONV;
          }
        case 209: break;
        case 82: 
          { return HaskellLexerTokens.INFIX;
          }
        case 210: break;
        case 83: 
          { return CPPTokens.ELSE;
          }
        case 211: break;
        case 84: 
          { return HaskellLexerTokens.WHERE;
          }
        case 212: break;
        case 85: 
          { return HaskellLexerTokens.MODULE;
          }
        case 213: break;
        case 86: 
          { return HaskellLexerTokens.IMPORT;
          }
        case 214: break;
        case 87: 
          { return HaskellLexerTokens.INFIXL;
          }
        case 215: break;
        case 88: 
          { return HaskellLexerTokens.INFIXR;
          }
        case 216: break;
        case 89: 
          { return HaskellLexerTokens.FORALL;
          }
        case 217: break;
        case 90: 
          { return HaskellLexerTokens.FAMILY;
          }
        case 218: break;
        case 91: 
          { return HaskellLexerTokens.EXPORT;
          }
        case 219: break;
        case 92: 
          { return TokenPackage.getPRAGMA();
          }
        case 220: break;
        case 93: 
          { return CPPTokens.ENDIF;
          }
        case 221: break;
        case 94: 
          { return HaskellLexerTokens.UNSAFE;
          }
        case 222: break;
        case 95: 
          { return HaskellLexerTokens.HIDING;
          }
        case 223: break;
        case 96: 
          { return HaskellLexerTokens.STDCALLCONV;
          }
        case 224: break;
        case 97: 
          { return HaskellLexerTokens.DEFAULT;
          }
        case 225: break;
        case 98: 
          { return HaskellLexerTokens.FOREIGN;
          }
        case 226: break;
        case 99: 
          { return HaskellLexerTokens.NEWTYPE;
          }
        case 227: break;
        case 100: 
          { return HaskellLexerTokens.SCC_PRAG;
          }
        case 228: break;
        case 101: 
          { return HaskellLexerTokens.ANN_PRAG;
          }
        case 229: break;
        case 102: 
          { return HaskellLexerTokens.INSTANCE;
          }
        case 230: break;
        case 103: 
          { return HaskellLexerTokens.DERIVING;
          }
        case 231: break;
        case 104: 
          { return HaskellLexerTokens.CORE_PRAG;
          }
        case 232: break;
        case 105: 
          { return HaskellLexerTokens.CTYPE;
          }
        case 233: break;
        case 106: 
          { return HaskellLexerTokens.RULES_PRAG;
          }
        case 234: break;
        case 107: 
          { return HaskellLexerTokens.QUALIFIED;
          }
        case 235: break;
        case 108: 
          { yybegin(TEX); return TokenPackage.getBLOCK_COMMENT();
          }
        case 236: break;
        case 109: 
          { return HaskellLexerTokens.UNPACK_PRAG;
          }
        case 237: break;
        case 110: 
          { return HaskellLexerTokens.SOURCE_PRAG;
          }
        case 238: break;
        case 111: 
          { return HaskellLexerTokens.INLINE_PRAG;
          }
        case 239: break;
        case 112: 
          { yypushback(1);
                        return HaskellLexerTokens.OPARENBAR;
          }
        case 240: break;
        case 113: 
          { return HaskellLexerTokens.JAVASCRIPTCALLCONV;
          }
        case 241: break;
        case 114: 
          { return HaskellLexerTokens.MINIMAL_PRAG;
          }
        case 242: break;
        case 115: 
          { return HaskellLexerTokens.WARNING_PRAG;
          }
        case 243: break;
        case 116: 
          { return HaskellLexerTokens.NOUNPACK_PRAG;
          }
        case 244: break;
        case 117: 
          { return HaskellLexerTokens.OVERLAPS;
          }
        case 245: break;
        case 118: 
          { yybegin(YYINITIAL); return TokenPackage.getBLOCK_COMMENT();
          }
        case 246: break;
        case 119: 
          { return HaskellLexerTokens.VECT_PRAG;
          }
        case 247: break;
        case 120: 
          { return HaskellLexerTokens.GENERATED_PRAG;
          }
        case 248: break;
        case 121: 
          { return HaskellLexerTokens.DEPRECATED_PRAG;
          }
        case 249: break;
        case 122: 
          { return HaskellLexerTokens.SPEC_PRAG;
          }
        case 250: break;
        case 123: 
          { return HaskellLexerTokens.INCOHERENT;
          }
        case 251: break;
        case 124: 
          { return HaskellLexerTokens.NOVECT_PRAG;
          }
        case 252: break;
        case 125: 
          { return HaskellLexerTokens.OVERLAPPING;
          }
        case 253: break;
        case 126: 
          { return HaskellLexerTokens.OVERLAPPABLE;
          }
        case 254: break;
        case 127: 
          { return HaskellLexerTokens.VECT_SCALAR_PRAG;
          }
        case 255: break;
        case 128: 
          { return HaskellLexerTokens.SPEC_INLINE_PRAG;
          }
        case 256: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case BLOCK_COMMENT: {
              int state = yystate();
        yybegin(YYINITIAL);
        zzStartRead = commentStart;
        return TokenPackage.getBLOCK_COMMENT();
            }
            case 504: break;
            default:
            return null;
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
