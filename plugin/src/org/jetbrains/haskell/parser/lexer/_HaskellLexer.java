/* The following code was generated by JFlex 1.5.1 */

package org.jetbrains.haskell.parser.lexer;

import java.util.*;
import com.intellij.lexer.*;
import com.intellij.psi.*;
import org.jetbrains.haskell.parser.token.*;
import com.intellij.psi.tree.IElementType;
import org.jetbrains.grammar.HaskellLexerTokens;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.1
 * from the specification file <tt>/home/atsky/work/haskell-idea-plugin/plugin/src/org/jetbrains/haskell/parser/lexer/Haskell.flex</tt>
 */
class _HaskellLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int BLOCK_COMMENT = 2;
  public static final int TEX = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\3\0\1\5\1\0\1\1\3\0\1\1\1\3\1\101\1\2\1\2"+
    "\22\0\1\24\1\117\1\10\1\106\1\7\1\7\1\33\1\23\1\103"+
    "\1\104\1\7\1\7\1\111\1\71\1\110\1\7\1\133\1\62\1\62"+
    "\1\62\1\62\3\20\2\4\1\17\1\107\1\113\1\112\1\114\1\7"+
    "\1\31\1\52\1\55\1\53\1\22\1\50\1\56\1\65\1\45\1\61"+
    "\1\15\1\54\1\42\1\64\1\40\1\44\1\66\1\51\1\60\1\43"+
    "\1\46\1\41\1\57\1\132\1\47\1\63\1\15\1\102\1\27\1\30"+
    "\1\32\1\16\1\6\1\37\1\72\1\21\1\26\1\73\1\35\1\74"+
    "\1\126\1\75\1\131\1\13\1\121\1\25\1\76\1\67\1\125\1\130"+
    "\1\36\1\120\1\122\1\123\1\34\1\127\1\70\1\124\1\13\1\77"+
    "\1\105\1\100\1\116\6\0\1\101\33\0\11\7\1\13\2\7\1\0"+
    "\4\7\2\0\1\7\1\13\3\7\1\0\1\13\1\7\3\0\1\7"+
    "\27\11\1\7\7\11\30\13\1\7\10\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\2\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\2\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\2\11\1\13\1\11\1\13\1\11\3\13"+
    "\2\11\1\13\1\11\1\13\2\11\1\13\3\11\2\13\4\11\1\13"+
    "\2\11\1\13\3\11\3\13\2\11\1\13\2\11\1\13\1\11\1\13"+
    "\1\11\1\13\2\11\1\13\1\11\2\13\1\11\1\13\2\11\1\13"+
    "\3\11\1\13\1\11\1\13\2\11\2\13\1\0\1\11\3\13\4\0"+
    "\1\11\1\0\1\13\1\11\1\0\1\13\1\11\1\0\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\2\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\2\13\1\11\1\0\1\13\1\11\1\13\3\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\7\13\2\11\1\13"+
    "\2\11\2\13\1\11\1\13\4\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\105\13\1\0\44\13\7\0\2\13\4\7\14\0"+
    "\16\7\5\13\7\7\1\0\1\7\1\0\21\7\105\0\1\13\52\0"+
    "\1\11\1\13\1\11\1\13\1\0\1\7\1\11\1\13\2\0\4\13"+
    "\1\7\5\0\2\7\1\11\1\7\3\11\1\0\1\11\1\0\2\11"+
    "\1\13\21\11\1\0\11\11\43\13\1\11\2\13\3\11\3\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\5\13\1\11\1\13\1\7\1\11\1\13\2\11\2\13"+
    "\63\11\60\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\7\7\0\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\2\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\2\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\11\0\46\11\3\0\6\7\1\0\47\13"+
    "\1\0\2\7\4\0\1\7\56\0\1\7\1\0\1\7\2\0\1\7"+
    "\2\0\1\7\54\0\2\7\21\0\12\7\13\0\1\7\2\0\2\7"+
    "\112\0\4\7\146\0\1\7\11\0\1\7\12\0\1\7\23\0\2\7"+
    "\1\0\16\7\350\0\4\7\66\0\17\7\37\0\1\7\u0105\0\2\7"+
    "\12\0\1\7\201\0\2\7\6\0\2\7\364\0\2\7\176\0\1\7"+
    "\202\0\10\7\204\0\1\7\371\0\1\7\172\0\1\7\112\0\1\7"+
    "\17\0\1\7\12\0\2\7\245\0\27\7\2\0\6\7\24\0\1\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\107\0\1\7\70\0\10\7"+
    "\1\0\6\7\1\0\15\7\157\0\6\7\116\0\2\7\46\11\1\0"+
    "\1\11\5\0\1\11\55\0\1\7\u0264\0\11\7\47\0\12\7\146\0"+
    "\1\7\u026c\0\2\7\54\0\2\7\116\0\3\7\107\0\2\7\235\0"+
    "\3\7\1\0\4\7\44\0\13\7\u0135\0\1\7\3\0\2\7\230\0"+
    "\42\7\36\0\2\7\200\0\7\7\1\0\6\7\254\0\21\7\11\0"+
    "\11\7\177\0\4\7\73\0\5\7\76\0\2\7\100\0\10\7\13\0"+
    "\1\7\54\0\300\13\100\0\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\11\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\11\13\10\11\6\13\2\0\6\11\2\0\10\13\10\11\10\13"+
    "\10\11\6\13\2\0\6\11\2\0\10\13\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\10\13\10\11\16\13\2\0\10\13\10\0"+
    "\10\13\10\0\10\13\10\0\5\13\1\0\2\13\4\11\1\0\1\7"+
    "\1\13\3\7\3\13\1\0\2\13\4\11\1\0\3\7\4\13\2\0"+
    "\2\13\4\11\1\0\3\7\10\13\5\11\3\7\2\0\3\13\1\0"+
    "\2\13\4\11\1\0\2\7\21\0\30\7\1\101\1\101\6\0\57\7"+
    "\22\0\1\13\10\0\5\7\1\13\12\0\5\7\1\0\15\13\3\0"+
    "\33\7\105\0\2\7\1\11\4\7\1\11\2\7\1\13\3\11\2\13"+
    "\3\11\1\13\1\7\1\11\3\7\5\11\6\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\4\11\1\7\1\13\4\11\1\13\4\0\1\13"+
    "\2\7\2\13\2\11\5\7\1\11\4\13\4\7\1\13\1\7\20\0"+
    "\20\11\20\13\3\0\1\11\1\13\13\0\2\7\1\115\155\7\1\7"+
    "\u01f3\7\14\0\47\7\31\0\13\7\121\0\32\7\32\12\32\14\26\0"+
    "\u0200\7\1\0\165\7\36\0\u03b9\7\3\0\12\7\246\0\57\11\1\0"+
    "\57\13\1\0\1\11\1\13\3\11\2\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\4\11\1\13\1\11\2\13\1\11\10\13\3\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\2\13\6\7\1\11"+
    "\1\13\1\11\1\13\3\0\1\11\1\13\5\0\4\7\1\0\2\7"+
    "\46\13\1\0\1\13\5\0\1\13\102\0\1\7\217\0\57\7\1\0"+
    "\14\7\104\0\32\7\1\0\131\7\14\0\326\7\32\0\14\7\5\0"+
    "\4\7\3\0\31\7\17\0\1\7\5\0\2\7\5\0\3\7\133\0"+
    "\2\7\3\0\1\7\132\0\1\7\224\0\2\7\4\0\12\7\40\0"+
    "\44\7\34\0\37\7\13\0\36\7\10\0\1\7\17\0\40\7\12\0"+
    "\47\7\17\0\77\7\1\0\u0100\7\u19c0\0\100\7\u5690\0\67\7\67\0"+
    "\2\7\u010d\0\3\7\60\0\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\5\0\1\7\12\0\1\7\1\0\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\132\0"+
    "\6\7\10\0\27\7\11\0\2\7\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\3\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\12\13\1\11\1\13\1\11\1\13\2\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\0\2\7\1\11\1\13\1\11"+
    "\1\13\1\0\1\11\1\13\1\11\1\13\14\0\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\115\0\3\13"+
    "\55\0\4\7\12\0\4\7\72\0\4\7\126\0\2\7\50\0\3\7"+
    "\63\0\2\7\57\0\1\7\141\0\15\7\20\0\2\7\174\0\4\7"+
    "\27\0\3\7\144\0\2\7\20\0\2\7\371\0\1\7\u4f14\0\7\13"+
    "\14\0\5\13\21\0\1\7\210\0\20\7\u017c\0\2\7\274\0\2\7"+
    "\22\0\12\7\26\0\43\7\1\0\23\7\1\0\4\7\225\0\17\7"+
    "\12\0\7\7\32\11\6\7\32\13\13\7\172\0\7\7\1\0\7\7"+
    "\15\0\2\7\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\2\1\10\1\7\1\11\1\7\1\12\1\13\1\11"+
    "\1\14\2\11\1\15\1\16\1\17\4\11\1\20\5\11"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\7\1\27"+
    "\1\30\1\31\1\32\1\7\1\33\1\34\1\35\11\11"+
    "\1\5\3\36\2\1\1\0\1\37\2\0\1\7\1\40"+
    "\1\41\3\11\1\0\1\42\1\0\3\11\1\43\2\11"+
    "\1\0\4\11\1\44\1\45\1\46\1\47\4\11\1\50"+
    "\1\51\1\11\1\52\1\53\1\54\1\55\1\56\1\7"+
    "\1\57\1\60\1\61\1\62\17\11\2\5\1\63\1\64"+
    "\1\1\20\0\1\65\1\66\2\7\4\11\1\67\17\0"+
    "\1\70\5\11\1\0\3\11\1\71\10\11\1\0\1\72"+
    "\4\11\1\73\13\11\13\0\1\11\1\74\1\75\1\11"+
    "\15\0\1\11\1\76\3\11\1\0\3\11\1\77\1\11"+
    "\1\100\6\11\3\0\1\101\3\11\1\102\1\103\2\11"+
    "\1\104\1\105\5\11\1\0\1\106\1\107\4\11\1\0"+
    "\4\11\1\110\1\11\1\111\3\11\16\0\1\11\1\112"+
    "\1\113\1\11\1\114\2\11\1\115\2\11\1\0\1\116"+
    "\3\11\1\0\1\117\1\120\1\11\1\121\1\122\1\123"+
    "\1\124\3\11\20\0\1\125\1\11\1\126\1\11\1\127"+
    "\2\11\1\0\1\130\1\11\1\131\1\0\1\132\2\11"+
    "\1\133\5\0\1\134\2\0\1\135\11\0\1\136\1\137"+
    "\2\11\1\0\1\140\1\0\1\141\1\11\7\0\1\142"+
    "\10\0\2\11\2\0\1\11\7\0\1\143\1\0\1\144"+
    "\5\0\1\145\1\11\1\0\1\146\1\11\3\0\1\147"+
    "\1\150\3\0\1\151\4\0\1\152\1\0\1\11\7\0"+
    "\1\153\1\0\1\154\1\0\1\11\1\0\1\155\2\0"+
    "\1\156\4\0\1\157\1\160\5\0\1\161\1\0\1\162"+
    "\1\163\1\0\1\164\3\0\1\165\1\166\2\0\1\167"+
    "\2\0\1\170\10\0\1\171\1\172";

  private static int [] zzUnpackAction() {
    int [] result = new int[498];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\134\0\270\0\u0114\0\u0170\0\u0114\0\u01cc\0\u0114"+
    "\0\u0228\0\u0284\0\u02e0\0\u033c\0\u0398\0\u03f4\0\u0398\0\u0450"+
    "\0\u04ac\0\u0508\0\u0564\0\u05c0\0\u061c\0\u0114\0\u0228\0\u0678"+
    "\0\u06d4\0\u0730\0\u078c\0\u07e8\0\u0844\0\u08a0\0\u08fc\0\u0958"+
    "\0\u09b4\0\u0a10\0\u0114\0\u0a6c\0\u0ac8\0\u0114\0\u0b24\0\u0b80"+
    "\0\u0114\0\u0bdc\0\u0114\0\u0c38\0\u0c94\0\u0228\0\u0228\0\u0228"+
    "\0\u0cf0\0\u0d4c\0\u0da8\0\u0e04\0\u0e60\0\u0ebc\0\u0f18\0\u0f74"+
    "\0\u0fd0\0\u102c\0\u0114\0\u1088\0\u10e4\0\u1140\0\u119c\0\u0284"+
    "\0\u0114\0\u11f8\0\u1254\0\u12b0\0\u0228\0\u0114\0\u130c\0\u1368"+
    "\0\u13c4\0\u1420\0\u0114\0\u147c\0\u14d8\0\u1534\0\u1590\0\u0398"+
    "\0\u15ec\0\u1648\0\u16a4\0\u1700\0\u175c\0\u17b8\0\u1814\0\u0398"+
    "\0\u0398\0\u1870\0\u0398\0\u18cc\0\u1928\0\u1984\0\u19e0\0\u0398"+
    "\0\u1a3c\0\u1a98\0\u1af4\0\u0114\0\u0114\0\u0114\0\u0114\0\u1b50"+
    "\0\u0114\0\u0228\0\u0228\0\u0228\0\u1bac\0\u1c08\0\u1c64\0\u1cc0"+
    "\0\u1d1c\0\u1d78\0\u1dd4\0\u1e30\0\u1e8c\0\u1ee8\0\u1f44\0\u1fa0"+
    "\0\u1ffc\0\u2058\0\u20b4\0\u2110\0\u216c\0\u0114\0\u0114\0\u21c8"+
    "\0\u2224\0\u2280\0\u22dc\0\u2338\0\u2394\0\u23f0\0\u244c\0\u24a8"+
    "\0\u2504\0\u2560\0\u25bc\0\u2618\0\u2674\0\u26d0\0\u272c\0\u2788"+
    "\0\u27e4\0\u2840\0\u289c\0\u28f8\0\u2954\0\u29b0\0\u2a0c\0\u2a68"+
    "\0\u0114\0\u2ac4\0\u2b20\0\u2b7c\0\u2bd8\0\u2c34\0\u2c90\0\u2cec"+
    "\0\u2d48\0\u2da4\0\u2e00\0\u2e5c\0\u2eb8\0\u2f14\0\u2f70\0\u2fcc"+
    "\0\u0398\0\u3028\0\u3084\0\u30e0\0\u313c\0\u3198\0\u31f4\0\u3250"+
    "\0\u32ac\0\u3308\0\u0398\0\u3364\0\u33c0\0\u341c\0\u3478\0\u34d4"+
    "\0\u3530\0\u358c\0\u35e8\0\u3644\0\u0114\0\u36a0\0\u36fc\0\u3758"+
    "\0\u37b4\0\u0398\0\u3810\0\u386c\0\u38c8\0\u3924\0\u3980\0\u39dc"+
    "\0\u3a38\0\u3a94\0\u3af0\0\u3b4c\0\u3ba8\0\u3c04\0\u3c60\0\u3cbc"+
    "\0\u3d18\0\u3d74\0\u3dd0\0\u3e2c\0\u3e88\0\u3ee4\0\u3f40\0\u3f9c"+
    "\0\u3ff8\0\u0398\0\u0398\0\u4054\0\u40b0\0\u410c\0\u4168\0\u41c4"+
    "\0\u4220\0\u427c\0\u42d8\0\u4334\0\u4390\0\u43ec\0\u4448\0\u44a4"+
    "\0\u4500\0\u455c\0\u0398\0\u45b8\0\u4614\0\u4670\0\u46cc\0\u4728"+
    "\0\u4784\0\u47e0\0\u0398\0\u483c\0\u0398\0\u4898\0\u48f4\0\u4950"+
    "\0\u49ac\0\u4a08\0\u4a64\0\u4ac0\0\u4b1c\0\u4b78\0\u0398\0\u4bd4"+
    "\0\u4c30\0\u4c8c\0\u0398\0\u0398\0\u4ce8\0\u4d44\0\u0398\0\u0398"+
    "\0\u4da0\0\u4dfc\0\u4e58\0\u4eb4\0\u4f10\0\u4f6c\0\u0398\0\u0398"+
    "\0\u4fc8\0\u5024\0\u5080\0\u50dc\0\u5138\0\u5194\0\u51f0\0\u524c"+
    "\0\u52a8\0\u0398\0\u5304\0\u5360\0\u53bc\0\u5418\0\u5474\0\u54d0"+
    "\0\u552c\0\u5588\0\u55e4\0\u5640\0\u569c\0\u56f8\0\u5754\0\u57b0"+
    "\0\u580c\0\u5868\0\u58c4\0\u5920\0\u597c\0\u59d8\0\u0398\0\u0398"+
    "\0\u5a34\0\u0398\0\u5a90\0\u5aec\0\u0398\0\u5b48\0\u5ba4\0\u5c00"+
    "\0\u0398\0\u5c5c\0\u5cb8\0\u5d14\0\u5d70\0\u0398\0\u0398\0\u5dcc"+
    "\0\u0398\0\u0398\0\u0398\0\u0398\0\u5e28\0\u5e84\0\u5ee0\0\u5f3c"+
    "\0\u5f98\0\u5ff4\0\u6050\0\u60ac\0\u6108\0\u6164\0\u61c0\0\u621c"+
    "\0\u6278\0\u62d4\0\u6330\0\u638c\0\u63e8\0\u6444\0\u64a0\0\u4ac0"+
    "\0\u64fc\0\u0398\0\u6558\0\u0398\0\u65b4\0\u6610\0\u666c\0\u0398"+
    "\0\u66c8\0\u0398\0\u6724\0\u0398\0\u6780\0\u67dc\0\u0398\0\u6838"+
    "\0\u6894\0\u68f0\0\u694c\0\u69a8\0\u4ac0\0\u6a04\0\u6a60\0\u4ac0"+
    "\0\u6abc\0\u6b18\0\u6b74\0\u6bd0\0\u6c2c\0\u6c88\0\u6ce4\0\u6d40"+
    "\0\u6d9c\0\u0398\0\u0398\0\u6df8\0\u6e54\0\u6eb0\0\u0398\0\u6f0c"+
    "\0\u0398\0\u6f68\0\u6fc4\0\u7020\0\u707c\0\u70d8\0\u7134\0\u7190"+
    "\0\u71ec\0\u4ac0\0\u7248\0\u72a4\0\u7300\0\u735c\0\u73b8\0\u7414"+
    "\0\u7470\0\u74cc\0\u7528\0\u7584\0\u75e0\0\u763c\0\u7698\0\u76f4"+
    "\0\u7750\0\u77ac\0\u7808\0\u7864\0\u78c0\0\u791c\0\u4ac0\0\u7978"+
    "\0\u4ac0\0\u79d4\0\u7a30\0\u7a8c\0\u7ae8\0\u7b44\0\u0398\0\u7ba0"+
    "\0\u7bfc\0\u0114\0\u7c58\0\u7cb4\0\u7d10\0\u7d6c\0\u4ac0\0\u4ac0"+
    "\0\u7dc8\0\u7e24\0\u7e80\0\u4ac0\0\u7edc\0\u7f38\0\u7f94\0\u7ff0"+
    "\0\u0398\0\u804c\0\u80a8\0\u8104\0\u8160\0\u81bc\0\u8218\0\u8274"+
    "\0\u82d0\0\u832c\0\u4ac0\0\u8388\0\u4ac0\0\u83e4\0\u8440\0\u849c"+
    "\0\u4ac0\0\u84f8\0\u8554\0\u4ac0\0\u85b0\0\u860c\0\u8668\0\u86c4"+
    "\0\u0114\0\u0398\0\u8720\0\u877c\0\u87d8\0\u8834\0\u8890\0\u88ec"+
    "\0\u8948\0\u4ac0\0\u4ac0\0\u89a4\0\u8a00\0\u8a5c\0\u8ab8\0\u8b14"+
    "\0\u4ac0\0\u4ac0\0\u8b70\0\u8bcc\0\u4ac0\0\u8c28\0\u8c84\0\u4ac0"+
    "\0\u8ce0\0\u8d3c\0\u8d98\0\u8df4\0\u8e50\0\u8eac\0\u8f08\0\u8f64"+
    "\0\u4ac0\0\u4ac0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[498];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\2\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\13\1\17\1\20\1\7\1\21"+
    "\1\13\1\22\1\5\1\23\1\24\1\25\1\26\1\27"+
    "\2\11\1\15\1\30\1\31\1\32\22\13\1\7\4\13"+
    "\1\33\1\15\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\0\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\11\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\15\1\65\1\66"+
    "\1\67\1\70\1\71\1\13\1\72\71\73\1\74\5\73"+
    "\1\75\1\73\1\0\32\73\27\76\1\77\104\76\135\0"+
    "\2\5\21\0\1\5\113\0\2\7\12\0\1\7\41\0"+
    "\1\7\50\0\1\7\7\0\1\11\2\0\1\11\1\0"+
    "\1\11\2\0\1\11\7\0\1\11\1\0\3\11\35\0"+
    "\1\11\13\0\2\11\1\0\1\11\1\0\6\11\14\0"+
    "\3\100\1\101\4\100\1\101\16\100\1\102\104\100\4\0"+
    "\2\13\3\0\6\13\1\0\4\13\1\0\2\13\5\0"+
    "\35\13\1\0\5\13\11\0\1\103\7\0\14\13\4\0"+
    "\2\13\1\0\1\11\1\0\1\13\1\14\1\13\1\14"+
    "\2\13\1\11\4\13\1\0\2\13\1\11\1\0\3\11"+
    "\35\13\1\11\5\13\6\0\2\11\1\0\1\104\1\0"+
    "\6\11\14\13\4\0\2\15\3\0\6\15\1\0\4\15"+
    "\1\0\2\15\5\0\35\15\1\0\5\15\21\0\14\15"+
    "\4\0\2\15\1\0\1\11\1\0\1\15\1\16\1\15"+
    "\1\16\2\15\1\11\4\15\1\0\2\15\1\11\1\0"+
    "\3\11\35\15\1\11\5\15\6\0\2\11\1\0\1\11"+
    "\1\0\6\11\14\15\7\0\1\11\2\0\1\11\1\0"+
    "\1\11\2\0\1\105\7\0\1\11\1\106\3\11\35\0"+
    "\1\11\13\0\2\11\1\0\1\11\1\0\6\11\20\0"+
    "\2\15\3\0\6\15\1\0\1\15\1\107\2\15\1\0"+
    "\2\15\5\0\3\15\1\110\31\15\1\0\5\15\21\0"+
    "\1\15\1\111\12\15\3\112\1\0\17\112\1\113\3\112"+
    "\1\114\104\112\4\0\2\15\3\0\6\15\1\0\4\15"+
    "\1\0\1\15\1\115\5\0\33\15\1\116\1\15\1\0"+
    "\5\15\21\0\14\15\4\0\2\15\3\0\6\15\1\0"+
    "\4\15\1\0\2\15\5\0\3\15\1\117\27\15\1\120"+
    "\1\15\1\0\1\15\1\121\3\15\21\0\4\15\1\122"+
    "\7\15\7\0\1\11\2\0\1\11\1\0\1\11\2\0"+
    "\1\11\7\0\1\11\1\0\3\11\35\0\1\11\1\0"+
    "\1\123\11\0\2\11\1\0\1\11\1\0\6\11\20\0"+
    "\2\15\3\0\6\15\1\0\4\15\1\0\2\15\5\0"+
    "\3\15\1\124\27\15\1\125\1\15\1\0\5\15\21\0"+
    "\14\15\4\0\2\15\3\0\6\15\1\0\4\15\1\0"+
    "\2\15\5\0\33\15\1\126\1\15\1\0\1\15\1\127"+
    "\3\15\21\0\14\15\4\0\2\15\3\0\6\15\1\0"+
    "\4\15\1\0\2\15\5\0\35\15\1\0\5\15\21\0"+
    "\1\130\13\15\4\0\2\15\3\0\6\15\1\0\4\15"+
    "\1\0\2\15\5\0\1\15\1\131\33\15\1\0\5\15"+
    "\21\0\14\15\7\0\1\11\2\0\1\11\1\0\1\11"+
    "\2\0\1\11\7\0\1\11\1\0\3\11\35\0\1\132"+
    "\13\0\2\11\1\0\1\11\1\0\2\11\1\56\3\11"+
    "\20\0\2\15\3\0\6\15\1\0\4\15\1\0\2\15"+
    "\5\0\35\15\1\0\5\15\21\0\4\15\1\133\7\15"+
    "\4\0\2\15\3\0\6\15\1\0\4\15\1\0\2\15"+
    "\5\0\34\15\1\134\1\0\5\15\21\0\1\15\1\135"+
    "\12\15\4\0\2\15\3\0\6\15\1\0\4\15\1\0"+
    "\2\15\5\0\2\15\1\136\32\15\1\0\5\15\21\0"+
    "\14\15\4\0\2\15\3\0\6\15\1\0\4\15\1\0"+
    "\1\137\1\15\5\0\1\15\1\140\33\15\1\0\4\15"+
    "\1\141\21\0\14\15\4\0\2\15\3\0\6\15\1\0"+
    "\4\15\1\0\2\15\5\0\35\15\1\0\1\15\1\142"+
    "\3\15\21\0\14\15\71\0\1\143\61\0\1\144\221\0"+
    "\1\145\1\146\34\0\1\11\2\0\1\11\1\0\1\11"+
    "\2\0\1\11\7\0\1\11\1\0\3\11\35\0\1\11"+
    "\12\0\1\147\2\11\1\0\1\11\1\0\6\11\23\0"+
    "\1\11\2\0\1\11\1\0\1\11\2\0\1\11\7\0"+
    "\1\11\1\0\3\11\35\0\1\150\12\0\1\151\2\11"+
    "\1\0\1\11\1\0\6\11\23\0\1\11\2\0\1\11"+
    "\1\0\1\11\2\0\1\11\7\0\1\11\1\0\3\11"+
    "\35\0\1\11\13\0\2\11\1\0\1\152\1\0\6\11"+
    "\23\0\1\11\2\0\1\11\1\0\1\11\2\0\1\11"+
    "\7\0\1\11\1\0\3\11\35\0\1\11\13\0\2\11"+
    "\1\0\1\11\1\0\2\11\1\153\3\11\23\0\1\11"+
    "\2\0\1\11\1\0\1\11\2\0\1\11\7\0\1\11"+
    "\1\0\3\11\35\0\1\154\13\0\2\11\1\0\1\11"+
    "\1\0\6\11\20\0\2\15\3\0\6\15\1\0\4\15"+
    "\1\0\2\15\5\0\3\15\1\155\31\15\1\0\5\15"+
    "\21\0\2\15\1\156\11\15\4\0\2\15\3\0\6\15"+
    "\1\0\1\15\1\157\2\15\1\0\2\15\5\0\3\15"+
    "\1\160\31\15\1\0\1\15\1\161\3\15\21\0\14\15"+
    "\4\0\2\15\3\0\6\15\1\0\4\15\1\0\2\15"+
    "\5\0\35\15\1\0\5\15\21\0\4\15\1\162\1\15"+
    "\1\163\5\15\4\0\2\15\3\0\6\15\1\0\4\15"+
    "\1\0\2\15\5\0\35\15\1\0\4\15\1\164\21\0"+
    "\1\165\13\15\4\0\2\15\3\0\6\15\1\0\4\15"+
    "\1\0\2\15\5\0\2\15\1\166\1\167\31\15\1\0"+
    "\5\15\21\0\14\15\4\0\2\15\3\0\6\15\1\0"+
    "\4\15\1\0\2\15\5\0\35\15\1\0\3\15\1\170"+
    "\1\15\21\0\14\15\4\0\2\15\3\0\6\15\1\0"+
    "\4\15\1\0\2\15\5\0\35\15\1\0\5\15\21\0"+
    "\6\15\1\171\5\15\4\0\2\15\3\0\6\15\1\0"+
    "\4\15\1\0\2\15\5\0\35\15\1\0\5\15\21\0"+
    "\3\15\1\172\10\15\4\0\2\15\3\0\6\15\1\0"+
    "\4\15\1\0\2\15\5\0\3\15\1\173\31\15\1\0"+
    "\5\15\21\0\14\15\4\0\2\7\12\0\1\7\23\0"+
    "\1\174\2\0\1\175\12\0\1\7\4\0\1\174\1\175"+
    "\42\0\1\7\100\0\1\176\124\0\1\177\42\0\27\76"+
    "\1\0\104\76\27\0\1\200\42\0\1\201\42\0\3\202"+
    "\1\100\3\0\1\100\7\0\1\100\1\0\1\203\1\100"+
    "\1\202\2\0\1\100\2\0\1\204\5\100\1\205\1\206"+
    "\1\207\1\210\1\0\1\211\2\0\1\212\1\0\1\213"+
    "\1\214\1\0\1\215\1\216\1\211\1\206\1\0\1\100"+
    "\2\0\1\206\1\0\1\217\1\220\1\0\1\100\3\0"+
    "\1\100\23\0\1\100\10\0\1\100\11\0\2\221\2\222"+
    "\1\221\1\222\2\0\1\222\1\221\2\0\2\222\5\0"+
    "\4\222\22\221\1\0\4\221\2\222\1\0\5\222\21\0"+
    "\12\222\1\221\10\0\1\11\1\0\1\221\1\223\1\222"+
    "\1\224\1\221\1\222\1\11\1\0\1\222\1\221\2\0"+
    "\2\222\1\11\1\0\3\11\4\222\22\221\1\0\4\221"+
    "\2\222\1\11\5\222\6\0\2\11\1\0\1\11\1\0"+
    "\6\11\12\222\1\221\5\0\2\15\3\0\6\15\1\0"+
    "\4\15\1\0\2\15\5\0\3\15\1\225\31\15\1\0"+
    "\5\15\21\0\14\15\4\0\2\15\3\0\6\15\1\0"+
    "\4\15\1\0\2\15\5\0\35\15\1\0\5\15\21\0"+
    "\1\226\4\15\1\227\6\15\4\0\2\15\3\0\6\15"+
    "\1\0\4\15\1\0\2\15\5\0\3\15\1\230\31\15"+
    "\1\0\5\15\21\0\14\15\23\0\1\231\114\0\1\232"+
    "\3\0\1\112\7\0\1\232\1\0\1\233\1\112\3\0"+
    "\1\112\2\0\1\234\5\112\1\235\1\236\1\237\1\240"+
    "\1\0\1\241\2\0\1\242\1\0\1\243\1\244\1\0"+
    "\1\245\1\246\1\241\1\236\1\0\1\232\2\0\1\236"+
    "\1\0\1\247\1\250\1\0\1\112\3\0\1\112\23\0"+
    "\1\112\10\0\1\232\4\0\2\15\3\0\6\15\1\0"+
    "\4\15\1\0\2\15\5\0\33\15\1\251\1\15\1\0"+
    "\5\15\21\0\14\15\4\0\2\15\3\0\6\15\1\0"+
    "\4\15\1\0\1\15\1\252\5\0\35\15\1\0\5\15"+
    "\21\0\14\15\4\0\2\15\3\0\6\15\1\0\4\15"+
    "\1\0\2\15\5\0\35\15\1\0\5\15\21\0\2\15"+
    "\1\253\11\15\4\0\2\15\3\0\6\15\1\0\4\15"+
    "\1\0\2\15\5\0\1\15\1\254\1\255\32\15\1\0"+
    "\5\15\21\0\14\15\4\0\2\15\3\0\6\15\1\0"+
    "\4\15\1\0\2\15\5\0\35\15\1\0\4\15\1\256"+
    "\21\0\14\15\76\0\1\257\41\0\2\15\3\0\6\15"+
    "\1\0\4\15\1\0\1\260\1\15\5\0\35\15\1\0"+
    "\5\15\21\0\14\15\4\0\2\15\3\0\6\15\1\0"+
    "\4\15\1\0\2\15\5\0\2\15\1\261\32\15\1\0"+
    "\5\15\21\0\14\15\4\0\2\15\3\0\6\15\1\0"+
    "\4\15\1\0\2\15\5\0\35\15\1\0\5\15\21\0"+
    "\1\15\1\262\12\15\4\0\2\15\3\0\6\15\1\0"+
    "\1\15\1\263\2\15\1\0\2\15\5\0\35\15\1\0"+
    "\5\15\21\0\14\15\3\132\1\0\130\132\4\0\2\15"+
    "\3\0\6\15\1\0\4\15\1\0\2\15\5\0\35\15"+
    "\1\0\5\15\21\0\5\15\1\264\6\15\4\0\2\15"+
    "\3\0\6\15\1\0\4\15\1\0\2\15\5\0\35\15"+
    "\1\0\5\15\21\0\1\265\13\15\4\0\2\15\3\0"+
    "\6\15\1\0\4\15\1\0\2\15\5\0\33\15\1\266"+
    "\1\15\1\0\5\15\21\0\14\15\4\0\2\15\3\0"+
    "\6\15\1\0\4\15\1\0\2\15\5\0\35\15\1\0"+
    "\5\15\21\0\5\15\1\267\6\15\4\0\2\15\3\0"+
    "\6\15\1\0\4\15\1\0\2\15\5\0\1\15\1\270"+
    "\33\15\1\0\5\15\21\0\1\271\1\15\1\272\11\15"+
    "\4\0\2\15\3\0\6\15\1\0\4\15\1\0\2\15"+
    "\5\0\35\15\1\0\5\15\21\0\7\15\1\273\4\15"+
    "\106\0\1\274\34\0\1\11\2\0\1\11\1\0\1\11"+
    "\2\0\1\11\7\0\1\11\1\0\3\11\35\0\1\11"+
    "\6\0\1\275\4\0\2\11\1\0\1\11\1\0\6\11"+
    "\20\0\2\15\3\0\6\15\1\0\4\15\1\0\2\15"+
    "\5\0\1\15\1\276\33\15\1\0\5\15\21\0\14\15"+
    "\4\0\2\15\3\0\6\15\1\0\4\15\1\0\1\15"+
    "\1\277\5\0\35\15\1\0\5\15\21\0\14\15\4\0"+
    "\2\15\3\0\6\15\1\0\4\15\1\0\2\15\5\0"+
    "\3\15\1\300\31\15\1\0\5\15\21\0\14\15\4\0"+
    "\2\15\3\0\6\15\1\0\4\15\1\0\2\15\5\0"+
    "\35\15\1\0\1\301\4\15\21\0\14\15\4\0\2\15"+
    "\3\0\6\15\1\0\4\15\1\0\2\15\5\0\35\15"+
    "\1\0\5\15\21\0\2\15\1\302\11\15\4\0\2\15"+
    "\3\0\6\15\1\0\4\15\1\0\2\15\5\0\35\15"+
    "\1\0\5\15\21\0\5\15\1\303\6\15\4\0\2\15"+
    "\3\0\6\15\1\0\4\15\1\0\2\15\5\0\35\15"+
    "\1\0\1\15\1\304\3\15\21\0\14\15\4\0\2\15"+
    "\3\0\6\15\1\0\4\15\1\0\2\15\5\0\35\15"+
    "\1\0\5\15\21\0\1\305\13\15\4\0\2\15\3\0"+
    "\6\15\1\0\4\15\1\0\2\15\5\0\35\15\1\0"+
    "\3\15\1\306\1\15\21\0\14\15\4\0\2\15\3\0"+
    "\6\15\1\0\4\15\1\0\2\15\5\0\33\15\1\307"+
    "\1\15\1\0\3\15\1\310\1\15\21\0\14\15\4\0"+
    "\2\15\3\0\6\15\1\0\4\15\1\0\2\15\5\0"+
    "\35\15\1\0\5\15\21\0\2\15\1\311\11\15\4\0"+
    "\2\15\3\0\6\15\1\0\4\15\1\0\1\15\1\312"+
    "\5\0\35\15\1\0\5\15\21\0\14\15\4\0\2\15"+
    "\3\0\6\15\1\0\4\15\1\0\2\15\5\0\35\15"+
    "\1\0\1\15\1\313\3\15\21\0\14\15\4\0\2\15"+
    "\3\0\6\15\1\0\4\15\1\0\2\15\5\0\3\15"+
    "\1\314\31\15\1\0\5\15\21\0\14\15\4\0\2\15"+
    "\3\0\6\15\1\0\4\15\1\0\2\15\5\0\1\315"+
    "\34\15\1\0\5\15\21\0\14\15\20\0\1\174\41\0"+
    "\1\174\50\0\1\174\4\0\1\175\13\0\3\175\3\0"+
    "\1\175\6\0\1\175\1\0\1\175\10\0\1\175\1\0"+
    "\2\175\1\0\2\175\3\0\1\175\7\0\2\175\37\0"+
    "\1\175\27\0\1\200\177\0\1\316\41\0\3\202\20\0"+
    "\1\202\2\0\1\100\146\0\1\317\5\0\1\320\2\0"+
    "\1\321\75\0\2\100\3\0\1\100\4\0\4\100\5\0"+
    "\22\100\1\0\4\100\13\0\1\100\27\0\1\100\42\0"+
    "\1\320\10\0\1\322\124\0\1\100\146\0\1\100\116\0"+
    "\1\323\2\0\1\100\1\0\1\324\12\0\1\100\1\0"+
    "\1\325\2\0\1\100\113\0\1\100\125\0\1\326\2\0"+
    "\1\327\1\211\1\0\1\330\15\0\1\100\122\0\1\322"+
    "\132\0\1\325\5\0\1\100\116\0\1\100\4\0\1\320"+
    "\126\0\1\100\12\0\1\100\75\0\1\100\41\0\1\100"+
    "\50\0\1\100\4\0\1\100\13\0\3\100\3\0\1\100"+
    "\6\0\1\100\1\0\1\100\10\0\1\100\1\0\2\100"+
    "\1\0\2\100\3\0\1\100\7\0\2\100\37\0\1\100"+
    "\4\0\2\221\3\0\6\221\1\0\4\221\1\0\2\221"+
    "\5\0\35\221\1\0\5\221\11\0\1\103\7\0\14\221"+
    "\4\0\2\222\3\0\6\222\1\0\4\222\1\0\2\222"+
    "\5\0\35\222\1\0\5\222\21\0\14\222\4\0\2\221"+
    "\1\0\1\11\1\0\1\221\1\223\1\221\1\223\2\221"+
    "\1\11\4\221\1\0\2\221\1\11\1\0\3\11\35\221"+
    "\1\11\5\221\6\0\2\11\1\0\1\104\1\0\6\11"+
    "\14\221\4\0\2\222\1\0\1\11\1\0\1\222\1\224"+
    "\1\222\1\224\2\222\1\11\4\222\1\0\2\222\1\11"+
    "\1\0\3\11\35\222\1\11\5\222\6\0\2\11\1\0"+
    "\1\11\1\0\6\11\14\222\4\0\2\15\3\0\6\15"+
    "\1\0\4\15\1\0\2\15\5\0\35\15\1\0\5\15"+
    "\21\0\1\15\1\331\12\15\4\0\2\15\3\0\6\15"+
    "\1\0\4\15\1\0\2\15\5\0\35\15\1\0\1\15"+
    "\1\332\3\15\21\0\14\15\4\0\2\15\3\0\6\15"+
    "\1\0\4\15\1\0\2\15\5\0\35\15\1\0\3\15"+
    "\1\333\1\15\21\0\14\15\4\0\2\15\3\0\6\15"+
    "\1\0\4\15\1\0\2\15\5\0\35\15\1\0\5\15"+
    "\21\0\1\334\13\15\4\0\1\232\13\0\1\232\2\0"+
    "\1\231\36\0\1\232\50\0\1\232\42\0\1\335\5\0"+
    "\1\336\2\0\1\337\75\0\2\112\3\0\1\112\4\0"+
    "\4\112\5\0\22\112\1\0\4\112\13\0\1\112\27\0"+
    "\1\112\42\0\1\336\10\0\1\340\124\0\1\112\146\0"+
    "\1\112\116\0\1\341\2\0\1\342\1\0\1\343\12\0"+
    "\1\112\1\0\1\344\2\0\1\112\113\0\1\112\125\0"+
    "\1\345\2\0\1\346\1\241\1\0\1\347\15\0\1\112"+
    "\122\0\1\340\132\0\1\344\5\0\1\112\116\0\1\112"+
    "\4\0\1\336\126\0\1\112\12\0\1\112\75\0\1\350"+
    "\41\0\1\350\50\0\1\350\4\0\1\351\13\0\3\351"+
    "\3\0\1\351\6\0\1\351\1\0\1\351\10\0\1\351"+
    "\1\0\2\351\1\0\2\351\3\0\1\351\7\0\2\351"+
    "\37\0\1\351\4\0\2\15\3\0\6\15\1\0\4\15"+
    "\1\0\2\15\5\0\35\15\1\0\5\15\21\0\3\15"+
    "\1\352\10\15\4\0\2\15\3\0\6\15\1\0\4\15"+
    "\1\0\2\15\5\0\3\15\1\353\31\15\1\0\5\15"+
    "\21\0\14\15\4\0\2\15\3\0\6\15\1\0\4\15"+
    "\1\0\2\15\5\0\3\15\1\354\31\15\1\0\5\15"+
    "\21\0\14\15\4\0\2\15\3\0\6\15\1\0\4\15"+
    "\1\0\2\15\5\0\35\15\1\0\3\15\1\355\1\15"+
    "\21\0\14\15\4\0\2\15\3\0\6\15\1\0\4\15"+
    "\1\0\2\15\5\0\3\15\1\356\31\15\1\0\5\15"+
    "\21\0\14\15\26\0\1\357\111\0\2\15\3\0\6\15"+
    "\1\0\4\15\1\0\2\15\5\0\35\15\1\0\3\15"+
    "\1\360\1\15\21\0\14\15\4\0\2\15\3\0\6\15"+
    "\1\0\4\15\1\0\2\15\5\0\3\15\1\361\31\15"+
    "\1\0\1\15\1\362\3\15\21\0\14\15\4\0\2\15"+
    "\3\0\6\15\1\0\4\15\1\0\2\15\5\0\35\15"+
    "\1\0\1\15\1\363\3\15\21\0\14\15\4\0\2\15"+
    "\3\0\6\15\1\0\4\15\1\0\2\15\5\0\33\15"+
    "\1\364\1\15\1\0\5\15\21\0\14\15\4\0\2\15"+
    "\3\0\6\15\1\0\4\15\1\0\2\15\5\0\35\15"+
    "\1\0\1\15\1\365\3\15\21\0\14\15\4\0\2\15"+
    "\3\0\6\15\1\0\4\15\1\0\2\15\5\0\35\15"+
    "\1\0\5\15\21\0\3\15\1\366\10\15\4\0\2\15"+
    "\3\0\6\15\1\0\4\15\1\0\2\15\5\0\33\15"+
    "\1\367\1\15\1\0\5\15\21\0\14\15\4\0\2\15"+
    "\3\0\6\15\1\0\4\15\1\0\2\15\5\0\35\15"+
    "\1\0\3\15\1\370\1\15\21\0\14\15\4\0\2\15"+
    "\3\0\6\15\1\0\4\15\1\0\2\15\5\0\35\15"+
    "\1\0\5\15\21\0\2\15\1\371\11\15\4\0\2\15"+
    "\3\0\6\15\1\0\4\15\1\0\2\15\5\0\35\15"+
    "\1\0\1\15\1\372\3\15\21\0\14\15\4\0\2\15"+
    "\3\0\6\15\1\0\4\15\1\0\2\15\5\0\35\15"+
    "\1\0\5\15\21\0\2\15\1\373\11\15\2\374\2\0"+
    "\20\374\1\375\54\374\1\0\4\374\1\376\25\374\4\0"+
    "\2\15\3\0\6\15\1\0\4\15\1\0\2\15\5\0"+
    "\35\15\1\0\1\15\1\377\3\15\21\0\14\15\4\0"+
    "\2\15\3\0\6\15\1\0\1\15\1\u0100\2\15\1\0"+
    "\2\15\5\0\35\15\1\0\5\15\21\0\14\15\4\0"+
    "\2\15\3\0\6\15\1\0\4\15\1\0\2\15\5\0"+
    "\35\15\1\0\5\15\21\0\1\u0101\13\15\4\0\2\15"+
    "\3\0\6\15\1\0\4\15\1\0\2\15\5\0\35\15"+
    "\1\0\1\15\1\u0102\3\15\21\0\14\15\4\0\2\15"+
    "\3\0\6\15\1\0\4\15\1\0\2\15\5\0\35\15"+
    "\1\0\1\15\1\u0103\3\15\21\0\14\15\4\0\2\15"+
    "\3\0\6\15\1\0\4\15\1\0\2\15\5\0\35\15"+
    "\1\0\4\15\1\u0104\21\0\14\15\4\0\2\15\3\0"+
    "\6\15\1\0\4\15\1\0\2\15\5\0\3\15\1\u0105"+
    "\31\15\1\0\5\15\21\0\14\15\4\0\2\15\3\0"+
    "\6\15\1\0\4\15\1\0\2\15\5\0\35\15\1\0"+
    "\4\15\1\u0106\21\0\14\15\4\0\2\15\3\0\6\15"+
    "\1\0\1\15\1\u0107\2\15\1\0\2\15\5\0\35\15"+
    "\1\0\5\15\21\0\14\15\4\0\2\15\3\0\6\15"+
    "\1\0\4\15\1\0\1\u0108\1\15\5\0\35\15\1\0"+
    "\5\15\21\0\14\15\4\0\2\15\3\0\6\15\1\0"+
    "\4\15\1\0\2\15\5\0\35\15\1\0\5\15\21\0"+
    "\2\15\1\u0109\11\15\4\0\2\15\3\0\6\15\1\0"+
    "\4\15\1\0\2\15\5\0\35\15\1\0\3\15\1\u010a"+
    "\1\15\21\0\14\15\4\0\2\15\3\0\6\15\1\0"+
    "\4\15\1\0\2\15\5\0\2\15\1\u010b\32\15\1\0"+
    "\5\15\21\0\14\15\4\0\2\15\3\0\6\15\1\0"+
    "\4\15\1\0\2\15\5\0\35\15\1\0\5\15\21\0"+
    "\1\15\1\u010c\12\15\4\0\2\15\3\0\6\15\1\0"+
    "\4\15\1\0\2\15\5\0\3\15\1\u010d\31\15\1\0"+
    "\5\15\21\0\14\15\74\0\1\u010e\107\0\1\100\125\0"+
    "\1\100\153\0\1\100\125\0\1\100\134\0\1\100\125\0"+
    "\1\100\124\0\1\100\144\0\1\100\135\0\1\100\127\0"+
    "\1\100\5\0\1\100\62\0\2\15\3\0\6\15\1\0"+
    "\4\15\1\0\2\15\5\0\35\15\1\0\5\15\21\0"+
    "\1\15\1\u010f\12\15\4\0\2\15\3\0\6\15\1\0"+
    "\4\15\1\0\2\15\5\0\35\15\1\0\5\15\21\0"+
    "\1\u0110\13\15\50\0\1\112\125\0\1\112\153\0\1\112"+
    "\125\0\1\112\134\0\1\112\101\0\1\231\21\0\1\112"+
    "\135\0\1\112\124\0\1\112\144\0\1\112\135\0\1\112"+
    "\127\0\1\112\5\0\1\112\76\0\1\350\2\0\1\231"+
    "\36\0\1\350\50\0\1\350\4\0\1\351\13\0\3\351"+
    "\1\231\2\0\1\351\6\0\1\351\1\0\1\351\10\0"+
    "\1\351\1\0\2\351\1\0\2\351\3\0\1\351\7\0"+
    "\2\351\37\0\1\351\4\0\2\15\3\0\6\15\1\0"+
    "\4\15\1\0\2\15\5\0\35\15\1\0\5\15\21\0"+
    "\1\15\1\u0111\12\15\4\0\2\15\3\0\6\15\1\0"+
    "\4\15\1\0\2\15\5\0\35\15\1\0\5\15\21\0"+
    "\3\15\1\u0112\10\15\4\0\2\15\3\0\6\15\1\0"+
    "\4\15\1\0\2\15\5\0\1\u0113\34\15\1\0\5\15"+
    "\21\0\14\15\4\0\2\15\3\0\6\15\1\0\4\15"+
    "\1\0\1\u0114\1\15\5\0\35\15\1\0\5\15\21\0"+
    "\14\15\77\0\1\u0115\40\0\2\15\3\0\6\15\1\0"+
    "\4\15\1\0\2\15\5\0\35\15\1\0\5\15\21\0"+
    "\1\15\1\u0116\12\15\4\0\2\15\3\0\6\15\1\0"+
    "\4\15\1\0\2\15\5\0\35\15\1\0\5\15\21\0"+
    "\1\15\1\u0117\12\15\4\0\2\15\3\0\6\15\1\0"+
    "\4\15\1\0\2\15\5\0\35\15\1\0\3\15\1\u0118"+
    "\1\15\21\0\14\15\4\0\2\15\3\0\6\15\1\0"+
    "\4\15\1\0\2\15\5\0\2\15\1\u0119\32\15\1\0"+
    "\5\15\21\0\14\15\4\0\2\15\3\0\6\15\1\0"+
    "\4\15\1\0\2\15\5\0\35\15\1\0\5\15\21\0"+
    "\5\15\1\u011a\6\15\4\0\2\15\3\0\6\15\1\0"+
    "\4\15\1\0\2\15\5\0\2\15\1\u011b\32\15\1\0"+
    "\5\15\21\0\14\15\4\0\2\15\3\0\6\15\1\0"+
    "\4\15\1\0\2\15\5\0\34\15\1\u011c\1\0\5\15"+
    "\21\0\14\15\4\0\2\15\3\0\6\15\1\0\4\15"+
    "\1\0\2\15\5\0\3\15\1\u011d\31\15\1\0\5\15"+
    "\21\0\14\15\4\0\2\15\3\0\6\15\1\0\4\15"+
    "\1\0\2\15\5\0\2\15\1\u011e\32\15\1\0\5\15"+
    "\21\0\14\15\4\0\2\15\3\0\6\15\1\0\4\15"+
    "\1\0\2\15\5\0\35\15\1\0\5\15\21\0\4\15"+
    "\1\u011f\7\15\2\374\2\0\75\374\1\0\4\374\1\376"+
    "\27\374\2\0\16\374\1\u0120\15\374\1\u0121\1\u0122\1\374"+
    "\1\u0123\1\u0124\5\374\1\u0125\1\u0126\3\374\1\u0127\1\u0128"+
    "\1\u0129\2\374\1\u012a\1\u012b\13\374\1\0\4\374\1\376"+
    "\23\374\1\u012c\3\374\2\0\65\374\1\u012d\7\374\1\0"+
    "\4\374\1\376\25\374\4\0\2\15\3\0\6\15\1\0"+
    "\4\15\1\0\2\15\5\0\3\15\1\u012e\31\15\1\0"+
    "\5\15\21\0\14\15\4\0\2\15\3\0\6\15\1\0"+
    "\4\15\1\0\2\15\5\0\35\15\1\0\1\15\1\u012f"+
    "\3\15\21\0\14\15\4\0\2\15\3\0\6\15\1\0"+
    "\4\15\1\0\2\15\5\0\35\15\1\0\5\15\21\0"+
    "\1\15\1\u0130\12\15\4\0\2\15\3\0\6\15\1\0"+
    "\4\15\1\0\2\15\5\0\1\15\1\u0131\33\15\1\0"+
    "\5\15\21\0\14\15\4\0\2\15\3\0\6\15\1\0"+
    "\4\15\1\0\2\15\5\0\35\15\1\0\2\15\1\u0132"+
    "\2\15\21\0\14\15\4\0\2\15\3\0\6\15\1\0"+
    "\4\15\1\0\2\15\5\0\35\15\1\0\1\15\1\u0133"+
    "\3\15\21\0\14\15\4\0\2\15\3\0\6\15\1\0"+
    "\4\15\1\0\2\15\5\0\35\15\1\0\4\15\1\u0134"+
    "\21\0\14\15\4\0\2\15\3\0\6\15\1\0\4\15"+
    "\1\0\2\15\5\0\35\15\1\0\1\15\1\u0135\3\15"+
    "\21\0\14\15\4\0\2\15\3\0\6\15\1\0\4\15"+
    "\1\0\2\15\5\0\35\15\1\0\3\15\1\u0136\1\15"+
    "\21\0\14\15\4\0\2\15\3\0\6\15\1\0\4\15"+
    "\1\0\2\15\5\0\35\15\1\0\5\15\21\0\1\u0137"+
    "\13\15\75\0\1\u0138\42\0\2\15\3\0\6\15\1\0"+
    "\4\15\1\0\2\15\5\0\35\15\1\0\1\15\1\u0139"+
    "\3\15\21\0\14\15\4\0\2\15\3\0\6\15\1\0"+
    "\4\15\1\0\2\15\5\0\35\15\1\0\5\15\21\0"+
    "\1\15\1\u013a\12\15\4\0\2\15\3\0\6\15\1\0"+
    "\4\15\1\0\2\15\5\0\35\15\1\0\3\15\1\u013b"+
    "\1\15\21\0\14\15\4\0\2\15\3\0\6\15\1\0"+
    "\4\15\1\0\2\15\5\0\35\15\1\0\3\15\1\u013c"+
    "\1\15\21\0\14\15\21\0\1\u013d\116\0\2\15\3\0"+
    "\6\15\1\0\4\15\1\0\2\15\5\0\35\15\1\0"+
    "\5\15\21\0\4\15\1\u013e\7\15\4\0\2\15\3\0"+
    "\6\15\1\0\4\15\1\0\2\15\5\0\35\15\1\0"+
    "\5\15\21\0\1\15\1\u013f\12\15\4\0\2\15\3\0"+
    "\6\15\1\0\4\15\1\0\2\15\5\0\35\15\1\0"+
    "\2\15\1\u0140\2\15\21\0\14\15\4\0\2\15\3\0"+
    "\6\15\1\0\4\15\1\0\2\15\5\0\35\15\1\0"+
    "\5\15\21\0\2\15\1\u0141\11\15\4\0\2\15\3\0"+
    "\6\15\1\0\4\15\1\0\2\15\5\0\35\15\1\0"+
    "\5\15\21\0\2\15\1\u0142\11\15\4\0\2\15\3\0"+
    "\6\15\1\0\4\15\1\0\2\15\5\0\2\15\1\u0143"+
    "\32\15\1\0\5\15\21\0\1\15\1\u0144\12\15\4\0"+
    "\2\15\3\0\6\15\1\0\4\15\1\0\2\15\5\0"+
    "\35\15\1\0\4\15\1\u0145\21\0\14\15\4\0\2\15"+
    "\3\0\6\15\1\0\4\15\1\0\2\15\5\0\2\15"+
    "\1\u0146\32\15\1\0\5\15\21\0\14\15\4\0\2\15"+
    "\3\0\6\15\1\0\4\15\1\0\2\15\5\0\35\15"+
    "\1\0\5\15\21\0\5\15\1\u0147\6\15\2\374\2\0"+
    "\44\374\1\u0148\30\374\1\0\4\374\1\376\27\374\2\0"+
    "\40\374\1\u0149\34\374\1\0\4\374\1\376\27\374\2\0"+
    "\34\374\1\u014a\40\374\1\0\4\374\1\376\27\374\2\0"+
    "\40\374\1\u014b\6\374\1\u014c\12\374\1\u014d\12\374\1\0"+
    "\4\374\1\376\27\374\2\0\53\374\1\u014e\21\374\1\0"+
    "\4\374\1\376\27\374\2\0\34\374\1\u014f\40\374\1\0"+
    "\4\374\1\376\27\374\2\0\40\374\1\u0150\1\374\1\u0151"+
    "\32\374\1\0\4\374\1\376\27\374\2\0\44\374\1\u0152"+
    "\30\374\1\0\4\374\1\376\27\374\2\0\35\374\1\u0153"+
    "\37\374\1\0\4\374\1\376\27\374\2\0\34\374\1\u0154"+
    "\40\374\1\0\4\374\1\376\27\374\2\0\55\374\1\u0155"+
    "\17\374\1\0\4\374\1\376\27\374\2\0\44\374\1\u0156"+
    "\30\374\1\0\4\374\1\376\27\374\2\0\46\374\1\u0157"+
    "\26\374\1\0\4\374\1\376\27\374\2\0\74\374\1\u0158"+
    "\1\0\4\374\1\376\25\374\4\0\2\15\3\0\6\15"+
    "\1\0\4\15\1\0\2\15\5\0\35\15\1\0\5\15"+
    "\21\0\1\15\1\u0159\12\15\4\0\2\15\3\0\6\15"+
    "\1\0\4\15\1\0\2\15\5\0\35\15\1\0\1\15"+
    "\1\u015a\3\15\21\0\14\15\4\0\2\15\3\0\6\15"+
    "\1\0\4\15\1\0\2\15\5\0\2\15\1\u015b\32\15"+
    "\1\0\5\15\21\0\14\15\4\0\2\15\3\0\6\15"+
    "\1\0\4\15\1\0\2\15\5\0\35\15\1\0\2\15"+
    "\1\u015c\2\15\21\0\14\15\4\0\2\15\3\0\6\15"+
    "\1\0\4\15\1\0\2\15\5\0\1\15\1\u015d\33\15"+
    "\1\0\5\15\21\0\14\15\4\0\2\15\3\0\6\15"+
    "\1\0\1\15\1\u015e\2\15\1\0\2\15\5\0\35\15"+
    "\1\0\5\15\21\0\14\15\76\0\1\u015f\41\0\2\15"+
    "\3\0\6\15\1\0\4\15\1\0\2\15\5\0\35\15"+
    "\1\0\5\15\21\0\2\15\1\u0160\11\15\4\0\2\15"+
    "\3\0\6\15\1\0\4\15\1\0\2\15\5\0\35\15"+
    "\1\0\4\15\1\u0161\21\0\14\15\4\0\2\15\3\0"+
    "\6\15\1\0\1\15\1\u0162\2\15\1\0\2\15\5\0"+
    "\35\15\1\0\5\15\21\0\14\15\67\0\1\u0163\50\0"+
    "\2\15\3\0\6\15\1\0\4\15\1\0\2\15\5\0"+
    "\35\15\1\0\4\15\1\u0164\21\0\14\15\4\0\2\15"+
    "\3\0\6\15\1\0\1\15\1\u0165\2\15\1\0\2\15"+
    "\5\0\35\15\1\0\5\15\21\0\14\15\4\0\2\15"+
    "\3\0\6\15\1\0\4\15\1\0\2\15\5\0\35\15"+
    "\1\0\5\15\21\0\3\15\1\u0166\10\15\4\0\2\15"+
    "\3\0\6\15\1\0\4\15\1\0\2\15\5\0\35\15"+
    "\1\0\1\15\1\u0167\3\15\21\0\14\15\2\374\2\0"+
    "\62\374\1\u0168\12\374\1\0\4\374\1\376\27\374\2\0"+
    "\35\374\1\u0169\15\374\1\u016a\21\374\1\0\4\374\1\376"+
    "\27\374\2\0\62\374\1\u016b\12\374\1\0\4\374\1\376"+
    "\27\374\2\0\35\374\1\u016c\37\374\1\0\4\374\1\376"+
    "\27\374\2\0\47\374\1\u016d\25\374\1\0\4\374\1\376"+
    "\27\374\2\0\44\374\1\u016e\30\374\1\0\4\374\1\376"+
    "\27\374\2\0\44\374\1\u016f\30\374\1\0\4\374\1\376"+
    "\27\374\2\0\34\374\1\u0170\40\374\1\0\4\374\1\376"+
    "\27\374\2\0\54\374\1\u0171\20\374\1\0\4\374\1\376"+
    "\27\374\2\0\57\374\1\u0172\15\374\1\0\4\374\1\376"+
    "\27\374\2\0\47\374\1\u0173\25\374\1\0\4\374\1\376"+
    "\27\374\2\0\36\374\1\u0174\36\374\1\0\4\374\1\376"+
    "\27\374\2\0\36\374\1\u0175\10\374\1\u0176\25\374\1\0"+
    "\4\374\1\376\27\374\2\0\34\374\1\u0177\40\374\1\0"+
    "\4\374\1\376\27\374\2\0\34\374\1\u0178\40\374\1\0"+
    "\4\374\1\376\27\374\2\0\54\374\1\u0179\20\374\1\0"+
    "\4\374\1\376\25\374\4\0\2\15\3\0\6\15\1\0"+
    "\4\15\1\0\2\15\5\0\35\15\1\0\5\15\21\0"+
    "\1\15\1\u017a\12\15\4\0\2\15\3\0\6\15\1\0"+
    "\4\15\1\0\2\15\5\0\35\15\1\0\4\15\1\u017b"+
    "\21\0\14\15\4\0\2\15\3\0\6\15\1\0\4\15"+
    "\1\0\2\15\5\0\35\15\1\0\3\15\1\u017c\1\15"+
    "\21\0\14\15\4\0\2\15\3\0\6\15\1\0\4\15"+
    "\1\0\2\15\5\0\2\15\1\u017d\32\15\1\0\5\15"+
    "\21\0\14\15\77\0\1\u017e\40\0\2\15\3\0\6\15"+
    "\1\0\4\15\1\0\2\15\5\0\35\15\1\0\2\15"+
    "\1\u017f\2\15\21\0\14\15\26\0\1\u0180\111\0\2\15"+
    "\3\0\6\15\1\0\4\15\1\0\2\15\5\0\35\15"+
    "\1\0\1\15\1\u0181\3\15\21\0\14\15\4\0\2\15"+
    "\3\0\6\15\1\0\4\15\1\0\2\15\5\0\35\15"+
    "\1\0\5\15\21\0\5\15\1\u0182\6\15\2\374\2\0"+
    "\54\374\1\u0183\20\374\1\0\4\374\1\376\27\374\2\0"+
    "\34\374\1\u0184\40\374\1\0\4\374\1\376\27\374\2\0"+
    "\44\374\1\u0185\30\374\1\0\4\374\1\376\27\374\2\0"+
    "\46\374\1\u0186\26\374\1\0\4\374\1\376\27\374\2\0"+
    "\54\374\1\u0187\20\374\1\0\4\374\1\376\27\374\2\0"+
    "\47\374\1\u0188\25\374\1\0\4\374\1\376\27\374\2\0"+
    "\54\374\1\u0189\20\374\1\0\4\374\1\376\27\374\2\0"+
    "\44\374\1\u018a\30\374\1\0\4\374\1\376\27\374\2\0"+
    "\62\374\1\u018b\12\374\1\0\4\374\1\376\27\374\2\0"+
    "\42\374\1\u018c\32\374\1\0\4\374\1\376\27\374\2\0"+
    "\44\374\1\u018d\30\374\1\0\4\374\1\376\27\374\2\0"+
    "\55\374\1\u018e\17\374\1\0\4\374\1\376\27\374\2\0"+
    "\40\374\1\u018f\34\374\1\0\4\374\1\376\27\374\2\0"+
    "\55\374\1\u0190\17\374\1\0\4\374\1\376\27\374\2\0"+
    "\44\374\1\u0191\30\374\1\0\4\374\1\376\27\374\2\0"+
    "\34\374\1\u0192\40\374\1\0\4\374\1\376\25\374\4\0"+
    "\2\15\3\0\6\15\1\0\4\15\1\0\2\15\5\0"+
    "\35\15\1\0\1\15\1\u0193\3\15\21\0\14\15\4\0"+
    "\2\15\3\0\6\15\1\0\4\15\1\0\2\15\5\0"+
    "\35\15\1\0\3\15\1\u0194\1\15\21\0\14\15\21\0"+
    "\1\u0195\205\0\1\u0196\44\0\2\15\3\0\6\15\1\0"+
    "\4\15\1\0\2\15\5\0\35\15\1\0\5\15\21\0"+
    "\2\15\1\u0197\11\15\2\374\2\0\44\374\1\u0198\30\374"+
    "\1\0\4\374\1\376\27\374\2\0\62\374\1\u0199\12\374"+
    "\1\0\4\374\1\376\27\374\2\0\47\374\1\u019a\25\374"+
    "\1\0\4\374\1\376\27\374\2\0\47\374\1\u019b\25\374"+
    "\1\0\4\374\1\376\27\374\2\0\47\374\1\u019c\25\374"+
    "\1\0\4\374\1\376\27\374\2\0\55\374\1\u019d\17\374"+
    "\1\0\4\374\1\376\27\374\2\0\36\374\1\u019e\36\374"+
    "\1\0\4\374\1\376\27\374\2\0\44\374\1\u019f\30\374"+
    "\1\0\4\374\1\376\27\374\2\0\40\374\1\u01a0\34\374"+
    "\1\0\4\374\1\376\27\374\2\0\37\374\1\u01a1\35\374"+
    "\1\0\4\374\1\376\27\374\2\0\34\374\1\u01a2\40\374"+
    "\1\0\4\374\1\376\27\374\2\0\41\374\1\u01a3\33\374"+
    "\1\0\4\374\1\376\27\374\2\0\60\374\1\u01a4\14\374"+
    "\1\0\4\374\1\376\27\374\2\0\54\374\1\u01a5\20\374"+
    "\1\0\4\374\1\376\27\374\2\0\55\374\1\u01a6\17\374"+
    "\1\0\4\374\1\376\25\374\4\0\2\15\3\0\6\15"+
    "\1\0\4\15\1\0\1\15\1\u01a7\5\0\35\15\1\0"+
    "\5\15\21\0\14\15\4\0\2\15\3\0\6\15\1\0"+
    "\4\15\1\0\2\15\5\0\35\15\1\0\5\15\21\0"+
    "\5\15\1\u01a8\6\15\67\0\1\u01a9\144\0\1\u01aa\37\0"+
    "\2\15\3\0\6\15\1\0\4\15\1\0\2\15\5\0"+
    "\35\15\1\0\3\15\1\u01ab\1\15\21\0\14\15\2\374"+
    "\2\0\47\374\1\u01ac\25\374\1\0\4\374\1\376\27\374"+
    "\2\0\46\374\1\u01ad\26\374\1\0\4\374\1\376\27\374"+
    "\2\0\42\374\1\u01ae\32\374\1\0\4\374\1\376\27\374"+
    "\2\0\50\374\1\u01af\24\374\1\0\4\374\1\376\27\374"+
    "\2\0\44\374\1\u01b0\30\374\1\0\4\374\1\376\27\374"+
    "\2\0\46\374\1\u01b1\26\374\1\0\4\374\1\376\27\374"+
    "\2\0\46\374\1\u01b2\26\374\1\0\4\374\1\376\27\374"+
    "\2\0\54\374\1\u01b3\20\374\1\0\4\374\1\376\27\374"+
    "\2\0\44\374\1\u01b4\30\374\1\0\4\374\1\376\27\374"+
    "\2\0\44\374\1\u01b5\30\374\1\0\4\374\1\376\27\374"+
    "\2\0\46\374\1\u01b6\26\374\1\0\4\374\1\376\27\374"+
    "\2\0\46\374\1\u01b7\26\374\1\0\4\374\1\376\27\374"+
    "\2\0\34\374\1\u01b8\40\374\1\0\4\374\1\376\25\374"+
    "\4\0\2\15\3\0\6\15\1\0\4\15\1\0\2\15"+
    "\5\0\35\15\1\0\5\15\21\0\2\15\1\u01b9\11\15"+
    "\26\0\1\u01ba\111\0\2\15\3\0\6\15\1\0\4\15"+
    "\1\0\2\15\5\0\35\15\1\0\1\u01bb\4\15\21\0"+
    "\14\15\2\374\2\0\46\374\1\u01bc\26\374\1\0\4\374"+
    "\1\376\27\374\2\0\47\374\1\u01bd\25\374\1\0\4\374"+
    "\1\376\27\374\2\0\40\374\1\u01be\34\374\1\0\4\374"+
    "\1\376\27\374\2\0\36\374\1\u01bf\36\374\1\0\4\374"+
    "\1\376\27\374\2\0\62\374\1\u01c0\12\374\1\0\4\374"+
    "\1\376\27\374\2\0\55\374\1\u01c1\17\374\1\0\4\374"+
    "\1\376\27\374\2\0\54\374\1\u01c2\20\374\1\0\4\374"+
    "\1\376\27\374\2\0\36\374\1\u01c3\36\374\1\0\4\374"+
    "\1\376\27\374\2\0\42\374\1\u01c4\32\374\1\0\4\374"+
    "\1\376\27\374\2\0\61\374\1\u01c5\13\374\1\0\4\374"+
    "\1\376\25\374\73\0\1\u01c6\44\0\2\15\3\0\6\15"+
    "\1\0\4\15\1\0\2\15\5\0\35\15\1\0\5\15"+
    "\21\0\1\15\1\u01c7\12\15\2\374\2\0\42\374\1\u01c8"+
    "\32\374\1\0\4\374\1\376\27\374\2\0\50\374\1\u01c9"+
    "\24\374\1\0\4\374\1\376\27\374\2\0\54\374\1\u01ca"+
    "\20\374\1\0\4\374\1\376\27\374\2\0\55\374\1\u01cb"+
    "\17\374\1\0\4\374\1\376\27\374\2\0\37\374\1\u01cc"+
    "\22\374\1\u01cd\12\374\1\0\4\374\1\376\27\374\2\0"+
    "\37\374\1\u01ce\35\374\1\0\4\374\1\376\27\374\2\0"+
    "\44\374\1\u01cf\30\374\1\0\4\374\1\376\27\374\2\0"+
    "\44\374\1\u01d0\30\374\1\0\4\374\1\376\25\374\100\0"+
    "\1\u01d1\37\0\2\15\3\0\6\15\1\0\4\15\1\0"+
    "\2\15\5\0\35\15\1\0\1\15\1\u01d2\3\15\21\0"+
    "\14\15\2\374\2\0\44\374\1\u01d3\30\374\1\0\4\374"+
    "\1\376\27\374\2\0\55\374\1\u01d4\17\374\1\0\4\374"+
    "\1\376\27\374\2\0\37\374\1\u01d5\35\374\1\0\4\374"+
    "\1\376\27\374\2\0\46\374\1\u01d6\6\374\1\u01d7\17\374"+
    "\1\0\4\374\1\376\27\374\2\0\44\374\1\u01d8\30\374"+
    "\1\0\4\374\1\376\27\374\2\0\34\374\1\u01d9\40\374"+
    "\1\0\4\374\1\376\27\374\2\0\16\374\1\u01da\56\374"+
    "\1\0\4\374\1\376\27\374\2\0\16\374\1\u01db\56\374"+
    "\1\0\4\374\1\376\27\374\2\0\37\374\1\u01dc\35\374"+
    "\1\0\4\374\1\376\27\374\2\0\44\374\1\u01dd\30\374"+
    "\1\0\4\374\1\376\27\374\2\0\51\374\1\u01de\23\374"+
    "\1\0\4\374\1\376\27\374\2\0\34\374\1\u01df\40\374"+
    "\1\0\4\374\1\376\27\374\2\0\12\374\1\u01e0\62\374"+
    "\1\0\4\374\1\376\27\374\2\0\42\374\1\u01e1\32\374"+
    "\1\0\4\374\1\376\27\374\2\0\44\374\1\u01e2\30\374"+
    "\1\0\4\374\1\376\27\374\2\0\12\374\1\u01e3\62\374"+
    "\1\0\4\374\1\376\27\374\2\0\36\374\1\u01e4\36\374"+
    "\1\0\4\374\1\376\27\374\2\0\61\374\1\u01e5\13\374"+
    "\1\0\4\374\1\376\27\374\2\0\37\374\1\u01e6\35\374"+
    "\1\0\4\374\1\376\27\374\2\0\55\374\1\u01e7\17\374"+
    "\1\0\4\374\1\376\27\374\2\0\44\374\1\u01e8\30\374"+
    "\1\0\4\374\1\376\27\374\2\0\47\374\1\u01e9\25\374"+
    "\1\0\4\374\1\376\27\374\2\0\34\374\1\u01ea\40\374"+
    "\1\0\4\374\1\376\27\374\2\0\46\374\1\u01eb\26\374"+
    "\1\0\4\374\1\376\27\374\2\0\36\374\1\u01ec\36\374"+
    "\1\0\4\374\1\376\27\374\2\0\36\374\1\u01ed\36\374"+
    "\1\0\4\374\1\376\27\374\2\0\55\374\1\u01ee\17\374"+
    "\1\0\4\374\1\376\27\374\2\0\46\374\1\u01ef\26\374"+
    "\1\0\4\374\1\376\27\374\2\0\34\374\1\u01f0\40\374"+
    "\1\0\4\374\1\376\27\374\2\0\54\374\1\u01f1\20\374"+
    "\1\0\4\374\1\376\27\374\2\0\44\374\1\u01f2\30\374"+
    "\1\0\4\374\1\376\25\374";

  private static int [] zzUnpackTrans() {
    int [] result = new int[36800];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\1\1\11\1\1\1\11\1\1\1\11\15\1"+
    "\1\11\14\1\1\11\2\1\1\11\2\1\1\11\1\1"+
    "\1\11\17\1\1\11\4\1\1\0\1\11\2\0\2\1"+
    "\1\11\3\1\1\0\1\11\1\0\6\1\1\0\20\1"+
    "\4\11\1\1\1\11\24\1\2\11\1\1\20\0\10\1"+
    "\1\11\17\0\6\1\1\0\14\1\1\0\1\11\20\1"+
    "\13\0\4\1\15\0\5\1\1\0\14\1\3\0\17\1"+
    "\1\0\6\1\1\0\12\1\16\0\12\1\1\0\4\1"+
    "\1\0\12\1\20\0\7\1\1\0\3\1\1\0\4\1"+
    "\5\0\1\1\2\0\1\1\11\0\4\1\1\0\1\1"+
    "\1\0\2\1\7\0\1\1\10\0\2\1\2\0\1\1"+
    "\7\0\1\1\1\0\1\1\5\0\2\1\1\0\1\11"+
    "\1\1\3\0\2\1\3\0\1\1\4\0\1\1\1\0"+
    "\1\1\7\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\2\0\1\1\4\0\1\11\1\1\5\0\1\1"+
    "\1\0\2\1\1\0\1\1\3\0\2\1\2\0\1\1"+
    "\2\0\1\1\10\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[498];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char[] zzBuffer = new char[0];

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    private int commentStart;
    private int commentDepth;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _HaskellLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _HaskellLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3366) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer.toString().toCharArray();
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return TokenPackage.getBLOCK_COMMENT();
          }
        case 123: break;
        case 2: 
          { return TokenType.BAD_CHARACTER;
          }
        case 124: break;
        case 3: 
          { return TokenType.WHITE_SPACE;
          }
        case 125: break;
        case 4: 
          { return TokenPackage.getNEW_LINE();
          }
        case 126: break;
        case 5: 
          { return HaskellLexerTokens.INTEGER;
          }
        case 127: break;
        case 6: 
          { return HaskellLexerTokens.BACKQUOTE;
          }
        case 128: break;
        case 7: 
          { return HaskellLexerTokens.VARSYM;
          }
        case 129: break;
        case 8: 
          { return HaskellLexerTokens.CONID;
          }
        case 130: break;
        case 9: 
          { return HaskellLexerTokens.VARID;
          }
        case 131: break;
        case 10: 
          { return HaskellLexerTokens.UNDERSCORE;
          }
        case 132: break;
        case 11: 
          { return HaskellLexerTokens.COLON;
          }
        case 133: break;
        case 12: 
          { return TokenPackage.getTH_VAR_QUOTE();
          }
        case 134: break;
        case 13: 
          { return HaskellLexerTokens.LAM;
          }
        case 135: break;
        case 14: 
          { return HaskellLexerTokens.CBRACK;
          }
        case 136: break;
        case 15: 
          { return HaskellLexerTokens.AT;
          }
        case 137: break;
        case 16: 
          { return HaskellLexerTokens.MINUS;
          }
        case 138: break;
        case 17: 
          { return HaskellLexerTokens.OCURLY;
          }
        case 139: break;
        case 18: 
          { return HaskellLexerTokens.CCURLY;
          }
        case 140: break;
        case 19: 
          { return HaskellLexerTokens.OBRACK;
          }
        case 141: break;
        case 20: 
          { return HaskellLexerTokens.OPAREN;
          }
        case 142: break;
        case 21: 
          { return HaskellLexerTokens.CPAREN;
          }
        case 143: break;
        case 22: 
          { return HaskellLexerTokens.VBAR;
          }
        case 144: break;
        case 23: 
          { return HaskellLexerTokens.SEMI;
          }
        case 145: break;
        case 24: 
          { return HaskellLexerTokens.DOT;
          }
        case 146: break;
        case 25: 
          { return HaskellLexerTokens.COMMA;
          }
        case 147: break;
        case 26: 
          { return HaskellLexerTokens.EQUAL;
          }
        case 148: break;
        case 27: 
          { return HaskellLexerTokens.RARROW;
          }
        case 149: break;
        case 28: 
          { return HaskellLexerTokens.TILDE;
          }
        case 150: break;
        case 29: 
          { return HaskellLexerTokens.BANG;
          }
        case 151: break;
        case 30: 
          { 
          }
        case 152: break;
        case 31: 
          { return HaskellLexerTokens.STRING;
          }
        case 153: break;
        case 32: 
          { return HaskellLexerTokens.DCOLON;
          }
        case 154: break;
        case 33: 
          { return HaskellLexerTokens.CPABRACK;
          }
        case 155: break;
        case 34: 
          { return TokenPackage.getTH_TY_QUOTE();
          }
        case 156: break;
        case 35: 
          { return HaskellLexerTokens.DO;
          }
        case 157: break;
        case 36: 
          { return HaskellLexerTokens.AS;
          }
        case 158: break;
        case 37: 
          { return HaskellLexerTokens.OF;
          }
        case 159: break;
        case 38: 
          { return TokenPackage.getEND_OF_LINE_COMMENT();
          }
        case 160: break;
        case 39: 
          { return HaskellLexerTokens.BY;
          }
        case 161: break;
        case 40: 
          { return HaskellLexerTokens.IF;
          }
        case 162: break;
        case 41: 
          { return HaskellLexerTokens.IN;
          }
        case 163: break;
        case 42: 
          { yybegin(BLOCK_COMMENT);
    commentDepth = 0;
    commentStart = getTokenStart();
          }
        case 164: break;
        case 43: 
          { return HaskellLexerTokens.OPABRACK;
          }
        case 165: break;
        case 44: 
          { return HaskellLexerTokens.OPARENBAR;
          }
        case 166: break;
        case 45: 
          { return HaskellLexerTokens.OUBXPAREN;
          }
        case 167: break;
        case 46: 
          { return HaskellLexerTokens.CPARENBAR;
          }
        case 168: break;
        case 47: 
          { return HaskellLexerTokens.CUBXPAREN;
          }
        case 169: break;
        case 48: 
          { return HaskellLexerTokens.DOTDOT;
          }
        case 170: break;
        case 49: 
          { return HaskellLexerTokens.DARROW;
          }
        case 171: break;
        case 50: 
          { return HaskellLexerTokens.LARROW;
          }
        case 172: break;
        case 51: 
          { if (commentDepth > 0) {
            commentDepth--;
        }
        else {
             int state = yystate();
             yybegin(YYINITIAL);
             zzStartRead = commentStart;
             return TokenPackage.getBLOCK_COMMENT();
        }
          }
        case 173: break;
        case 52: 
          { commentDepth++;
          }
        case 174: break;
        case 53: 
          { return HaskellLexerTokens.QCONID;
          }
        case 175: break;
        case 54: 
          { return HaskellLexerTokens.QVARID;
          }
        case 176: break;
        case 55: 
          { return HaskellLexerTokens.CHAR;
          }
        case 177: break;
        case 56: 
          { return HaskellLexerTokens.MDO;
          }
        case 178: break;
        case 57: 
          { return HaskellLexerTokens.REC;
          }
        case 179: break;
        case 58: 
          { return HaskellLexerTokens.CLOSE_PRAG;
          }
        case 180: break;
        case 59: 
          { return HaskellLexerTokens.LET;
          }
        case 181: break;
        case 60: 
          { return HaskellLexerTokens.CASE;
          }
        case 182: break;
        case 61: 
          { return HaskellLexerTokens.CAPICONV;
          }
        case 183: break;
        case 62: 
          { return HaskellLexerTokens.DATA;
          }
        case 184: break;
        case 63: 
          { return HaskellLexerTokens.ROLE;
          }
        case 185: break;
        case 64: 
          { return HaskellLexerTokens.ELSE;
          }
        case 186: break;
        case 65: 
          { return HaskellLexerTokens.SAFE;
          }
        case 187: break;
        case 66: 
          { return HaskellLexerTokens.TYPE;
          }
        case 188: break;
        case 67: 
          { return HaskellLexerTokens.THEN;
          }
        case 189: break;
        case 68: 
          { return HaskellLexerTokens.PROC;
          }
        case 190: break;
        case 69: 
          { return HaskellLexerTokens.PRIMCALLCONV;
          }
        case 191: break;
        case 70: 
          { return HaskellLexerTokens.CCALLCONV;
          }
        case 192: break;
        case 71: 
          { return HaskellLexerTokens.CLASS;
          }
        case 193: break;
        case 72: 
          { return HaskellLexerTokens.GROUP;
          }
        case 194: break;
        case 73: 
          { return HaskellLexerTokens.INFIX;
          }
        case 195: break;
        case 74: 
          { return HaskellLexerTokens.LCASE;
          }
        case 196: break;
        case 75: 
          { return HaskellLexerTokens.LABEL;
          }
        case 197: break;
        case 76: 
          { return HaskellLexerTokens.USING;
          }
        case 198: break;
        case 77: 
          { return HaskellLexerTokens.WHERE;
          }
        case 199: break;
        case 78: 
          { return HaskellLexerTokens.MODULE;
          }
        case 200: break;
        case 79: 
          { return HaskellLexerTokens.FAMILY;
          }
        case 201: break;
        case 80: 
          { return HaskellLexerTokens.FORALL;
          }
        case 202: break;
        case 81: 
          { return HaskellLexerTokens.EXPORT;
          }
        case 203: break;
        case 82: 
          { return HaskellLexerTokens.IMPORT;
          }
        case 204: break;
        case 83: 
          { return HaskellLexerTokens.INFIXR;
          }
        case 205: break;
        case 84: 
          { return HaskellLexerTokens.INFIXL;
          }
        case 206: break;
        case 85: 
          { return TokenPackage.getPRAGMA();
          }
        case 207: break;
        case 86: 
          { return HaskellLexerTokens.UNSAFE;
          }
        case 208: break;
        case 87: 
          { return HaskellLexerTokens.HIDING;
          }
        case 209: break;
        case 88: 
          { return HaskellLexerTokens.DEFAULT;
          }
        case 210: break;
        case 89: 
          { return HaskellLexerTokens.DYNAMIC;
          }
        case 211: break;
        case 90: 
          { return HaskellLexerTokens.FOREIGN;
          }
        case 212: break;
        case 91: 
          { return HaskellLexerTokens.NEWTYPE;
          }
        case 213: break;
        case 92: 
          { return HaskellLexerTokens.SCC_PRAG;
          }
        case 214: break;
        case 93: 
          { return HaskellLexerTokens.ANN_PRAG;
          }
        case 215: break;
        case 94: 
          { return HaskellLexerTokens.STDCALLCONV;
          }
        case 216: break;
        case 95: 
          { return HaskellLexerTokens.PATTERN;
          }
        case 217: break;
        case 96: 
          { return HaskellLexerTokens.DERIVING;
          }
        case 218: break;
        case 97: 
          { return HaskellLexerTokens.INSTANCE;
          }
        case 219: break;
        case 98: 
          { return HaskellLexerTokens.CORE_PRAG;
          }
        case 220: break;
        case 99: 
          { return HaskellLexerTokens.CTYPE;
          }
        case 221: break;
        case 100: 
          { return HaskellLexerTokens.RULES_PRAG;
          }
        case 222: break;
        case 101: 
          { return HaskellLexerTokens.QUALIFIED;
          }
        case 223: break;
        case 102: 
          { yybegin(TEX); return TokenPackage.getBLOCK_COMMENT();
          }
        case 224: break;
        case 103: 
          { return HaskellLexerTokens.UNPACK_PRAG;
          }
        case 225: break;
        case 104: 
          { return HaskellLexerTokens.SOURCE_PRAG;
          }
        case 226: break;
        case 105: 
          { return HaskellLexerTokens.INLINE_PRAG;
          }
        case 227: break;
        case 106: 
          { return HaskellLexerTokens.JAVASCRIPTCALLCONV;
          }
        case 228: break;
        case 107: 
          { return HaskellLexerTokens.MINIMAL_PRAG;
          }
        case 229: break;
        case 108: 
          { return HaskellLexerTokens.WARNING_PRAG;
          }
        case 230: break;
        case 109: 
          { return HaskellLexerTokens.NOUNPACK_PRAG;
          }
        case 231: break;
        case 110: 
          { return HaskellLexerTokens.OVERLAPS;
          }
        case 232: break;
        case 111: 
          { yybegin(YYINITIAL); return TokenPackage.getBLOCK_COMMENT();
          }
        case 233: break;
        case 112: 
          { return HaskellLexerTokens.INTERRUPTIBLE;
          }
        case 234: break;
        case 113: 
          { return HaskellLexerTokens.VECT_PRAG;
          }
        case 235: break;
        case 114: 
          { return HaskellLexerTokens.GENERATED_PRAG;
          }
        case 236: break;
        case 115: 
          { return HaskellLexerTokens.DEPRECATED_PRAG;
          }
        case 237: break;
        case 116: 
          { return HaskellLexerTokens.SPEC_PRAG;
          }
        case 238: break;
        case 117: 
          { return HaskellLexerTokens.INCOHERENT;
          }
        case 239: break;
        case 118: 
          { return HaskellLexerTokens.NOVECT_PRAG;
          }
        case 240: break;
        case 119: 
          { return HaskellLexerTokens.OVERLAPPING;
          }
        case 241: break;
        case 120: 
          { return HaskellLexerTokens.OVERLAPPABLE;
          }
        case 242: break;
        case 121: 
          { return HaskellLexerTokens.VECT_SCALAR_PRAG;
          }
        case 243: break;
        case 122: 
          { return HaskellLexerTokens.SPEC_INLINE_PRAG;
          }
        case 244: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case BLOCK_COMMENT: {
              int state = yystate();
        yybegin(YYINITIAL);
        zzStartRead = commentStart;
        return TokenPackage.getBLOCK_COMMENT();
            }
            case 499: break;
            default:
            return null;
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
