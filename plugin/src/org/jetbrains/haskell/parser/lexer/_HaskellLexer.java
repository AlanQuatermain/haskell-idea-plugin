/* The following code was generated by JFlex 1.5.1 */

package org.jetbrains.haskell.parser.lexer;

import java.util.*;
import com.intellij.lexer.*;
import com.intellij.psi.*;
import org.jetbrains.haskell.parser.token.*;
import com.intellij.psi.tree.IElementType;
import org.jetbrains.haskell.parser.cpp.CPPTokens;
import org.jetbrains.grammar.HaskellLexerTokens;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.1
 * from the specification file <tt>/Users/atsky/work/haskell-idea-plugin/plugin/src/org/jetbrains/haskell/parser/lexer/Haskell.flex</tt>
 */
class _HaskellLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int BLOCK_COMMENT = 2;
  public static final int TEX = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\3\0\1\5\1\0\1\1\3\0\1\1\1\3\1\12\1\11\1\11"+
    "\22\0\1\2\1\123\1\10\1\112\1\7\1\7\1\13\1\34\1\107"+
    "\1\110\1\37\1\7\1\115\1\100\1\114\1\7\1\133\1\72\1\72"+
    "\1\72\1\72\3\31\2\4\1\30\1\113\1\117\1\116\1\120\1\134"+
    "\1\42\1\62\1\65\1\63\1\33\1\60\1\66\1\75\1\55\1\71"+
    "\1\26\1\64\1\52\1\74\1\50\1\54\1\76\1\61\1\70\1\53"+
    "\1\56\1\51\1\67\1\132\1\57\1\73\1\26\1\106\1\40\1\41"+
    "\1\43\1\27\1\6\1\47\1\17\1\32\1\36\1\101\1\45\1\102"+
    "\1\126\1\35\2\24\1\21\1\16\1\103\1\20\1\127\1\131\1\46"+
    "\1\14\1\124\1\125\1\44\1\130\1\77\1\15\1\24\1\104\1\111"+
    "\1\105\1\122\6\0\1\12\33\0\11\7\1\24\2\7\1\0\4\7"+
    "\2\0\1\7\1\24\3\7\1\0\1\24\1\7\3\0\1\7\27\22"+
    "\1\7\7\22\30\24\1\7\10\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\2\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\2\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\2\22\1\24\1\22\1\24\1\22\3\24\2\22"+
    "\1\24\1\22\1\24\2\22\1\24\3\22\2\24\4\22\1\24\2\22"+
    "\1\24\3\22\3\24\2\22\1\24\2\22\1\24\1\22\1\24\1\22"+
    "\1\24\2\22\1\24\1\22\2\24\1\22\1\24\2\22\1\24\3\22"+
    "\1\24\1\22\1\24\2\22\2\24\1\0\1\22\3\24\4\0\1\22"+
    "\1\0\1\24\1\22\1\0\1\24\1\22\1\0\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\2\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\2\24\1\22\1\0\1\24\1\22\1\24\3\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\7\24\2\22\1\24\2\22"+
    "\2\24\1\22\1\24\4\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\105\24\1\0\44\24\7\0\2\24\4\7\14\0\16\7"+
    "\5\24\7\7\1\0\1\7\1\0\21\7\105\0\1\24\52\0\1\22"+
    "\1\24\1\22\1\24\1\0\1\7\1\22\1\24\2\0\4\24\1\7"+
    "\5\0\2\7\1\22\1\7\3\22\1\0\1\22\1\0\2\22\1\24"+
    "\21\22\1\0\11\22\43\24\1\22\2\24\3\22\3\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\5\24\1\22\1\24\1\7\1\22\1\24\2\22\2\24\63\22"+
    "\60\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\7\7\0\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\2\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\2\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\11\0\46\22\3\0\6\7\1\0\47\24\1\0"+
    "\2\7\4\0\1\7\56\0\1\7\1\0\1\7\2\0\1\7\2\0"+
    "\1\7\54\0\2\7\21\0\12\7\13\0\1\7\2\0\2\7\112\0"+
    "\4\7\146\0\1\7\11\0\1\7\12\0\1\7\23\0\2\7\1\0"+
    "\16\7\350\0\4\7\66\0\17\7\37\0\1\7\u0105\0\2\7\12\0"+
    "\1\7\201\0\2\7\6\0\2\7\364\0\2\7\176\0\1\7\202\0"+
    "\10\7\204\0\1\7\371\0\1\7\172\0\1\7\112\0\1\7\17\0"+
    "\1\7\12\0\2\7\245\0\27\7\2\0\6\7\24\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\107\0\1\7\70\0\10\7\1\0"+
    "\6\7\1\0\15\7\157\0\6\7\116\0\2\7\46\22\1\0\1\22"+
    "\5\0\1\22\55\0\1\7\u0264\0\11\7\47\0\12\7\146\0\1\7"+
    "\u026c\0\2\7\54\0\2\7\116\0\3\7\107\0\2\7\235\0\3\7"+
    "\1\0\4\7\44\0\13\7\u0135\0\1\7\3\0\2\7\230\0\42\7"+
    "\36\0\2\7\200\0\7\7\1\0\6\7\254\0\21\7\11\0\11\7"+
    "\177\0\4\7\73\0\5\7\76\0\2\7\100\0\10\7\13\0\1\7"+
    "\54\0\300\24\100\0\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\11\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\11\24\10\22\6\24\2\0\6\22\2\0\10\24\10\22\10\24\10\22"+
    "\6\24\2\0\6\22\2\0\10\24\1\0\1\22\1\0\1\22\1\0"+
    "\1\22\1\0\1\22\10\24\10\22\16\24\2\0\10\24\10\0\10\24"+
    "\10\0\10\24\10\0\5\24\1\0\2\24\4\22\1\0\1\7\1\24"+
    "\3\7\3\24\1\0\2\24\4\22\1\0\3\7\4\24\2\0\2\24"+
    "\4\22\1\0\3\7\10\24\5\22\3\7\2\0\3\24\1\0\2\24"+
    "\4\22\1\0\2\7\21\0\30\7\1\12\1\12\6\0\57\7\22\0"+
    "\1\24\10\0\5\7\1\24\12\0\5\7\1\0\15\24\3\0\33\7"+
    "\105\0\2\7\1\22\4\7\1\22\2\7\1\24\3\22\2\24\3\22"+
    "\1\24\1\7\1\22\3\7\5\22\6\7\1\22\1\7\1\22\1\7"+
    "\1\22\1\7\4\22\1\7\1\24\4\22\1\24\4\0\1\24\2\7"+
    "\2\24\2\22\5\7\1\22\4\24\4\7\1\24\1\7\20\0\20\22"+
    "\20\24\3\0\1\22\1\24\13\0\2\7\1\121\155\7\1\7\u01f3\7"+
    "\14\0\47\7\31\0\13\7\121\0\32\7\32\23\32\25\26\0\u0200\7"+
    "\1\0\165\7\36\0\u03b9\7\3\0\12\7\246\0\57\22\1\0\57\24"+
    "\1\0\1\22\1\24\3\22\2\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\4\22\1\24\1\22\2\24\1\22\10\24\3\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\2\24\6\7\1\22\1\24"+
    "\1\22\1\24\3\0\1\22\1\24\5\0\4\7\1\0\2\7\46\24"+
    "\1\0\1\24\5\0\1\24\102\0\1\7\217\0\57\7\1\0\14\7"+
    "\104\0\32\7\1\0\131\7\14\0\326\7\32\0\14\7\5\0\4\7"+
    "\3\0\31\7\17\0\1\7\5\0\2\7\5\0\3\7\133\0\2\7"+
    "\3\0\1\7\132\0\1\7\224\0\2\7\4\0\12\7\40\0\44\7"+
    "\34\0\37\7\13\0\36\7\10\0\1\7\17\0\40\7\12\0\47\7"+
    "\17\0\77\7\1\0\u0100\7\u19c0\0\100\7\u5690\0\67\7\67\0\2\7"+
    "\u010d\0\3\7\60\0\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\5\0"+
    "\1\7\12\0\1\7\1\0\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\132\0\6\7"+
    "\10\0\27\7\11\0\2\7\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\3\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\12\24"+
    "\1\22\1\24\1\22\1\24\2\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\0\2\7\1\22\1\24\1\22\1\24"+
    "\1\0\1\22\1\24\1\22\1\24\14\0\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\115\0\3\24\55\0"+
    "\4\7\12\0\4\7\72\0\4\7\126\0\2\7\50\0\3\7\63\0"+
    "\2\7\57\0\1\7\141\0\15\7\20\0\2\7\174\0\4\7\27\0"+
    "\3\7\144\0\2\7\20\0\2\7\371\0\1\7\u4f14\0\7\24\14\0"+
    "\5\24\21\0\1\7\210\0\20\7\u017c\0\2\7\274\0\2\7\22\0"+
    "\12\7\26\0\43\7\1\0\23\7\1\0\4\7\225\0\17\7\12\0"+
    "\7\7\32\22\6\7\32\24\13\7\172\0\7\7\1\0\7\7\15\0"+
    "\2\7\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\2\4\10\1\11\2\7\1\12\1\13\1\10\1\14"+
    "\2\10\1\15\1\16\1\17\1\20\3\10\1\21\2\10"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\7\1\30"+
    "\1\31\1\32\1\33\1\7\1\34\1\35\1\36\4\10"+
    "\1\5\1\7\3\37\2\1\1\5\1\0\1\40\1\0"+
    "\2\10\1\41\1\10\1\11\1\0\1\7\1\42\1\43"+
    "\2\10\1\0\1\44\1\0\1\10\1\45\1\46\1\47"+
    "\2\10\1\0\3\10\1\50\1\51\2\10\1\52\1\53"+
    "\1\0\1\54\1\55\1\0\1\7\1\0\1\56\1\57"+
    "\1\60\1\61\5\10\2\5\1\62\1\7\1\63\1\64"+
    "\1\0\1\1\1\5\17\0\1\10\1\65\1\66\1\67"+
    "\2\7\2\10\1\70\17\0\6\10\1\0\5\10\2\0"+
    "\1\71\1\72\2\0\5\10\13\0\1\10\1\66\1\67"+
    "\1\10\1\73\15\0\3\10\1\74\2\10\1\0\2\10"+
    "\1\75\1\76\1\10\6\0\1\77\1\100\3\10\1\0"+
    "\1\10\1\101\2\10\1\102\2\10\1\0\3\10\17\0"+
    "\1\103\1\0\1\10\1\104\1\10\1\0\1\105\1\106"+
    "\1\10\1\107\1\110\2\10\1\0\1\111\1\112\1\10"+
    "\20\0\1\113\3\0\1\114\1\115\1\10\1\0\1\10"+
    "\1\116\1\10\1\0\1\117\5\0\1\120\2\0\1\121"+
    "\12\0\1\10\1\0\1\122\1\123\10\0\1\124\11\0"+
    "\1\10\11\0\1\125\1\0\1\126\6\0\1\127\1\0"+
    "\1\130\3\0\1\131\1\132\3\0\1\133\4\0\1\134"+
    "\10\0\1\135\1\0\1\136\2\0\1\137\2\0\1\140"+
    "\4\0\1\141\5\0\1\142\1\0\1\143\1\144\1\0"+
    "\1\145\3\0\1\146\1\147\2\0\1\150\2\0\1\151"+
    "\10\0\1\152\1\153";

  private static int [] zzUnpackAction() {
    int [] result = new int[435];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\135\0\272\0\u0117\0\u0174\0\u0117\0\u01d1\0\u0117"+
    "\0\u022e\0\u028b\0\u02e8\0\u0345\0\u03a2\0\u03ff\0\u045c\0\u04b9"+
    "\0\u0516\0\u02e8\0\u0573\0\u05d0\0\u062d\0\u068a\0\u06e7\0\u022e"+
    "\0\u0744\0\u0117\0\u022e\0\u07a1\0\u07fe\0\u085b\0\u08b8\0\u0915"+
    "\0\u0972\0\u09cf\0\u0117\0\u0a2c\0\u0a89\0\u0117\0\u0ae6\0\u0b43"+
    "\0\u0117\0\u0ba0\0\u0117\0\u0bfd\0\u0c5a\0\u022e\0\u022e\0\u022e"+
    "\0\u0cb7\0\u0d14\0\u0d71\0\u0dce\0\u0e2b\0\u0e88\0\u0117\0\u0ee5"+
    "\0\u0f42\0\u0f9f\0\u0ffc\0\u1059\0\u028b\0\u0117\0\u10b6\0\u1113"+
    "\0\u1170\0\u02e8\0\u11cd\0\u122a\0\u1287\0\u12e4\0\u022e\0\u0117"+
    "\0\u1341\0\u139e\0\u13fb\0\u0117\0\u1458\0\u14b5\0\u02e8\0\u1512"+
    "\0\u02e8\0\u156f\0\u15cc\0\u1629\0\u1686\0\u16e3\0\u1740\0\u02e8"+
    "\0\u179d\0\u17fa\0\u1857\0\u18b4\0\u0117\0\u1911\0\u0117\0\u0117"+
    "\0\u196e\0\u19cb\0\u1a28\0\u0117\0\u022e\0\u022e\0\u022e\0\u1a85"+
    "\0\u1ae2\0\u1b3f\0\u1b9c\0\u1bf9\0\u1c56\0\u1cb3\0\u1d10\0\u1d6d"+
    "\0\u0117\0\u0117\0\u1dca\0\u1e27\0\u0117\0\u1e84\0\u1ee1\0\u1f3e"+
    "\0\u1f9b\0\u1ff8\0\u2055\0\u20b2\0\u210f\0\u216c\0\u21c9\0\u2226"+
    "\0\u2283\0\u22e0\0\u233d\0\u239a\0\u23f7\0\u02e8\0\u2454\0\u24b1"+
    "\0\u250e\0\u256b\0\u25c8\0\u2625\0\u0117\0\u2682\0\u26df\0\u273c"+
    "\0\u2799\0\u27f6\0\u2853\0\u28b0\0\u290d\0\u296a\0\u29c7\0\u2a24"+
    "\0\u2a81\0\u2ade\0\u2b3b\0\u2b98\0\u2bf5\0\u2c52\0\u2caf\0\u2d0c"+
    "\0\u2d69\0\u2dc6\0\u2e23\0\u2e80\0\u2edd\0\u2f3a\0\u2f97\0\u2ff4"+
    "\0\u3051\0\u30ae\0\u310b\0\u0117\0\u3168\0\u31c5\0\u3222\0\u327f"+
    "\0\u32dc\0\u3339\0\u3396\0\u33f3\0\u3450\0\u34ad\0\u350a\0\u3567"+
    "\0\u35c4\0\u3621\0\u367e\0\u36db\0\u3738\0\u3795\0\u37f2\0\u384f"+
    "\0\u38ac\0\u3909\0\u02e8\0\u3966\0\u39c3\0\u3a20\0\u3a7d\0\u3ada"+
    "\0\u3b37\0\u3b94\0\u3bf1\0\u3c4e\0\u3cab\0\u3d08\0\u3d65\0\u3dc2"+
    "\0\u3e1f\0\u3e7c\0\u3ed9\0\u02e8\0\u3f36\0\u3f93\0\u3ff0\0\u404d"+
    "\0\u40aa\0\u02e8\0\u02e8\0\u4107\0\u4164\0\u41c1\0\u421e\0\u427b"+
    "\0\u42d8\0\u4335\0\u02e8\0\u02e8\0\u4392\0\u43ef\0\u444c\0\u44a9"+
    "\0\u4506\0\u02e8\0\u4563\0\u45c0\0\u461d\0\u467a\0\u46d7\0\u4734"+
    "\0\u4791\0\u47ee\0\u484b\0\u48a8\0\u4905\0\u4962\0\u49bf\0\u4a1c"+
    "\0\u4a79\0\u4ad6\0\u4b33\0\u4b90\0\u4bed\0\u4c4a\0\u4ca7\0\u4d04"+
    "\0\u4d61\0\u4dbe\0\u4e1b\0\u4e78\0\u4ed5\0\u02e8\0\u4f32\0\u4f8f"+
    "\0\u02e8\0\u02e8\0\u4fec\0\u02e8\0\u02e8\0\u5049\0\u50a6\0\u5103"+
    "\0\u02e8\0\u02e8\0\u5160\0\u51bd\0\u521a\0\u5277\0\u52d4\0\u5331"+
    "\0\u538e\0\u53eb\0\u5448\0\u54a5\0\u5502\0\u555f\0\u55bc\0\u5619"+
    "\0\u5676\0\u56d3\0\u5730\0\u4164\0\u578d\0\u57ea\0\u5847\0\u58a4"+
    "\0\u02e8\0\u5901\0\u595e\0\u59bb\0\u02e8\0\u5a18\0\u5a75\0\u02e8"+
    "\0\u5ad2\0\u5b2f\0\u5b8c\0\u5be9\0\u5c46\0\u4164\0\u5ca3\0\u5d00"+
    "\0\u4164\0\u5d5d\0\u5dba\0\u5e17\0\u5e74\0\u5ed1\0\u5f2e\0\u5f8b"+
    "\0\u5fe8\0\u6045\0\u60a2\0\u60ff\0\u615c\0\u02e8\0\u02e8\0\u61b9"+
    "\0\u6216\0\u6273\0\u62d0\0\u632d\0\u638a\0\u63e7\0\u6444\0\u4164"+
    "\0\u64a1\0\u64fe\0\u655b\0\u65b8\0\u6615\0\u6672\0\u66cf\0\u672c"+
    "\0\u6789\0\u67e6\0\u6843\0\u68a0\0\u68fd\0\u695a\0\u69b7\0\u6a14"+
    "\0\u6a71\0\u6ace\0\u6b2b\0\u4164\0\u6b88\0\u4164\0\u6be5\0\u6c42"+
    "\0\u6c9f\0\u6cfc\0\u6d59\0\u6db6\0\u02e8\0\u6e13\0\u0117\0\u6e70"+
    "\0\u6ecd\0\u6f2a\0\u4164\0\u4164\0\u6f87\0\u6fe4\0\u7041\0\u4164"+
    "\0\u709e\0\u70fb\0\u7158\0\u71b5\0\u578d\0\u7212\0\u726f\0\u72cc"+
    "\0\u7329\0\u7386\0\u73e3\0\u7440\0\u749d\0\u4164\0\u74fa\0\u4164"+
    "\0\u7557\0\u75b4\0\u4164\0\u7611\0\u766e\0\u4164\0\u76cb\0\u7728"+
    "\0\u7785\0\u77e2\0\u0117\0\u783f\0\u789c\0\u78f9\0\u7956\0\u79b3"+
    "\0\u7a10\0\u7a6d\0\u4164\0\u4164\0\u7aca\0\u7b27\0\u7b84\0\u7be1"+
    "\0\u7c3e\0\u4164\0\u4164\0\u7c9b\0\u7cf8\0\u4164\0\u7d55\0\u7db2"+
    "\0\u4164\0\u7e0f\0\u7e6c\0\u7ec9\0\u7f26\0\u7f83\0\u7fe0\0\u803d"+
    "\0\u809a\0\u4164\0\u4164";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[435];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\2\7\1\10\1\11\1\12\1\5"+
    "\1\0\1\11\2\13\1\14\1\13\1\15\1\16\1\17"+
    "\1\20\1\13\1\21\1\17\1\22\1\23\1\7\1\24"+
    "\1\17\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\11\1\13\1\34\1\35\1\36\22\17\1\7\4\17"+
    "\1\13\1\37\1\40\1\13\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\11\1\56\1\57\1\60\1\61\1\13\1\62"+
    "\1\13\1\63\1\64\1\17\1\65\1\66\12\67\1\0"+
    "\65\67\1\70\3\67\1\71\30\67\40\72\1\73\74\72"+
    "\136\0\2\5\6\0\1\5\127\0\2\7\23\0\1\7"+
    "\40\0\1\7\17\0\1\74\20\0\1\7\10\0\1\11"+
    "\3\0\1\11\7\0\1\11\1\0\1\11\2\0\1\11"+
    "\6\0\2\11\1\0\2\11\34\0\1\11\10\0\2\11"+
    "\1\0\1\11\1\0\6\11\10\0\1\11\3\75\1\76"+
    "\4\75\1\76\27\75\1\77\74\75\4\0\2\13\6\0"+
    "\14\13\1\0\6\13\5\0\34\13\1\0\3\13\6\0"+
    "\1\100\11\0\10\13\5\0\2\13\6\0\4\13\1\101"+
    "\7\13\1\0\6\13\5\0\34\13\1\0\3\13\6\0"+
    "\1\100\11\0\10\13\5\0\2\13\6\0\14\13\1\0"+
    "\6\13\5\0\1\13\1\102\32\13\1\0\3\13\6\0"+
    "\1\100\11\0\10\13\5\0\2\13\6\0\14\13\1\0"+
    "\6\13\5\0\34\13\1\0\1\103\2\13\6\0\1\100"+
    "\11\0\10\13\5\0\2\17\6\0\14\17\1\0\6\17"+
    "\5\0\34\17\1\0\3\17\6\0\1\104\1\0\1\105"+
    "\7\0\10\17\5\0\2\17\1\0\1\11\3\0\1\11"+
    "\7\17\1\20\1\17\1\20\2\17\1\11\6\17\2\11"+
    "\1\0\2\11\34\17\1\11\3\17\5\0\2\11\1\0"+
    "\1\106\1\0\6\11\10\17\1\11\4\0\2\13\1\0"+
    "\1\11\3\0\1\11\7\13\1\21\1\13\1\21\2\13"+
    "\1\11\6\13\2\11\1\0\2\11\34\13\1\11\3\13"+
    "\5\0\2\11\1\0\1\11\1\0\6\11\10\13\1\11"+
    "\7\0\1\11\3\0\1\11\7\0\1\11\1\0\1\11"+
    "\2\0\1\107\6\0\2\11\1\110\2\11\34\0\1\11"+
    "\10\0\2\11\1\0\1\11\1\0\6\11\10\0\1\11"+
    "\4\0\2\13\6\0\5\13\1\111\6\13\1\0\6\13"+
    "\5\0\3\13\1\112\30\13\1\0\3\13\6\0\1\100"+
    "\11\0\10\13\1\0\3\113\1\0\30\113\1\114\3\113"+
    "\1\115\74\113\4\0\2\13\6\0\2\13\1\116\11\13"+
    "\1\0\6\13\5\0\1\13\1\117\32\13\1\0\2\13"+
    "\1\120\6\0\1\100\11\0\10\13\5\0\2\13\6\0"+
    "\4\13\1\121\7\13\1\0\6\13\5\0\3\13\1\122"+
    "\30\13\1\0\1\123\2\13\6\0\1\100\11\0\10\13"+
    "\10\0\1\11\3\0\1\11\7\0\1\11\1\0\1\11"+
    "\2\0\1\11\6\0\2\11\1\0\2\11\34\0\1\11"+
    "\1\124\7\0\2\11\1\0\1\11\1\0\6\11\10\0"+
    "\1\11\4\0\2\13\6\0\4\13\1\125\7\13\1\0"+
    "\6\13\5\0\3\13\1\126\30\13\1\0\3\13\6\0"+
    "\1\100\11\0\10\13\5\0\2\13\6\0\4\13\1\127"+
    "\7\13\1\0\6\13\5\0\34\13\1\0\3\13\6\0"+
    "\1\100\11\0\10\13\5\0\2\13\6\0\1\130\13\13"+
    "\1\0\6\13\5\0\34\13\1\0\3\13\6\0\1\100"+
    "\11\0\10\13\10\0\1\11\3\0\1\11\7\0\1\11"+
    "\1\0\1\11\2\0\1\11\6\0\2\11\1\0\2\11"+
    "\34\0\1\131\10\0\2\11\1\0\1\11\1\0\2\11"+
    "\1\56\3\11\10\0\1\11\4\0\2\13\6\0\5\13"+
    "\1\132\6\13\1\0\6\13\5\0\34\13\1\0\3\13"+
    "\6\0\1\100\11\0\10\13\5\0\2\13\6\0\14\13"+
    "\1\0\6\13\5\0\34\13\1\0\1\133\2\13\6\0"+
    "\1\100\11\0\10\13\101\0\1\134\64\0\1\135\215\0"+
    "\1\136\1\137\31\0\1\11\3\0\1\11\7\0\1\11"+
    "\1\0\1\11\2\0\1\11\6\0\2\11\1\0\2\11"+
    "\34\0\1\11\7\0\1\140\2\11\1\0\1\11\1\0"+
    "\6\11\10\0\1\11\7\0\1\11\3\0\1\11\7\0"+
    "\1\11\1\0\1\11\2\0\1\11\4\0\1\141\1\0"+
    "\2\11\1\0\2\11\34\0\1\142\1\143\6\0\1\144"+
    "\2\11\1\0\1\11\1\0\6\11\10\0\1\11\7\0"+
    "\1\11\3\0\1\11\7\0\1\11\1\0\1\11\2\0"+
    "\1\11\6\0\2\11\1\0\2\11\34\0\1\11\10\0"+
    "\2\11\1\0\1\145\1\0\6\11\10\0\1\11\7\0"+
    "\1\11\3\0\1\11\7\0\1\11\1\0\1\11\2\0"+
    "\1\11\6\0\2\11\1\0\2\11\34\0\1\11\10\0"+
    "\2\11\1\0\1\11\1\0\2\11\1\146\3\11\10\0"+
    "\1\11\7\0\1\11\3\0\1\11\7\0\1\11\1\0"+
    "\1\11\2\0\1\11\6\0\2\11\1\0\2\11\34\0"+
    "\1\147\10\0\2\11\1\0\1\11\1\0\6\11\10\0"+
    "\1\11\4\0\2\13\6\0\1\13\1\150\12\13\1\0"+
    "\6\13\5\0\34\13\1\0\3\13\6\0\1\100\11\0"+
    "\2\13\1\151\5\13\5\0\2\13\6\0\14\13\1\0"+
    "\4\13\1\152\1\13\5\0\34\13\1\0\3\13\6\0"+
    "\1\100\11\0\10\13\5\0\2\13\6\0\14\13\1\0"+
    "\6\13\5\0\34\13\1\0\3\13\6\0\1\100\11\0"+
    "\2\13\1\153\5\13\5\0\2\13\6\0\14\13\1\0"+
    "\6\13\5\0\34\13\1\0\3\13\6\0\1\100\11\0"+
    "\1\13\1\154\6\13\5\0\2\7\12\0\1\155\10\0"+
    "\1\7\22\0\1\155\2\0\1\156\12\0\1\7\4\0"+
    "\1\156\12\0\1\74\20\0\1\7\10\0\1\11\3\0"+
    "\1\11\6\157\1\0\1\11\1\157\1\160\1\0\1\157"+
    "\1\11\1\0\1\157\2\0\2\157\2\11\1\0\2\11"+
    "\4\157\27\0\1\157\1\11\3\157\5\0\2\11\1\0"+
    "\1\11\1\0\6\11\6\157\2\0\1\11\105\0\1\161"+
    "\127\0\1\162\34\0\40\72\1\0\74\72\17\0\1\163"+
    "\20\0\1\164\206\0\1\165\23\0\3\166\1\75\3\0"+
    "\1\75\1\166\1\0\1\75\3\0\1\75\1\167\10\0"+
    "\1\75\1\0\1\170\1\75\3\0\1\75\2\0\1\171"+
    "\4\75\1\172\1\173\1\174\1\175\1\0\1\176\2\0"+
    "\1\177\1\0\1\200\1\201\1\0\1\202\1\203\1\176"+
    "\1\173\1\0\1\75\2\0\1\173\1\0\1\204\3\0"+
    "\1\75\20\0\1\75\6\0\1\75\113\0\1\100\26\0"+
    "\2\13\6\0\14\13\1\0\5\13\1\205\5\0\34\13"+
    "\1\0\3\13\6\0\1\100\11\0\10\13\5\0\2\13"+
    "\6\0\14\13\1\0\6\13\5\0\34\13\1\0\3\13"+
    "\6\0\1\100\11\0\1\206\7\13\113\0\1\104\36\0"+
    "\6\207\2\210\2\207\1\210\1\207\2\0\1\207\1\210"+
    "\1\0\2\207\5\0\4\207\22\210\1\0\4\210\1\207"+
    "\1\0\3\207\20\0\6\207\1\210\11\0\1\11\3\0"+
    "\1\11\6\207\1\210\1\211\1\207\1\212\1\210\1\207"+
    "\1\11\1\0\1\207\1\210\1\0\2\207\2\11\1\0"+
    "\2\11\4\207\22\210\1\0\4\210\1\207\1\11\3\207"+
    "\5\0\2\11\1\0\1\11\1\0\6\11\6\207\1\210"+
    "\1\0\1\11\4\0\2\13\6\0\14\13\1\0\6\13"+
    "\5\0\3\13\1\213\30\13\1\0\3\13\6\0\1\100"+
    "\11\0\10\13\5\0\2\13\6\0\1\214\13\13\1\0"+
    "\6\13\5\0\34\13\1\0\3\13\6\0\1\100\11\0"+
    "\10\13\35\0\1\215\104\0\1\216\3\0\1\113\2\0"+
    "\1\113\3\0\1\113\1\217\10\0\1\216\1\0\1\220"+
    "\1\113\3\0\1\113\2\0\1\221\4\113\1\222\1\223"+
    "\1\224\1\225\1\0\1\226\2\0\1\227\1\0\1\230"+
    "\1\231\1\0\1\232\1\233\1\226\1\223\1\0\1\216"+
    "\2\0\1\223\1\0\1\234\3\0\1\113\20\0\1\113"+
    "\6\0\1\216\5\0\2\13\6\0\14\13\1\0\6\13"+
    "\5\0\34\13\1\0\3\13\6\0\1\100\11\0\3\13"+
    "\1\235\4\13\5\0\2\13\6\0\1\236\13\13\1\0"+
    "\6\13\5\0\1\13\1\237\32\13\1\0\3\13\6\0"+
    "\1\100\11\0\10\13\5\0\2\13\6\0\14\13\1\0"+
    "\6\13\5\0\34\13\1\0\3\13\6\0\1\100\11\0"+
    "\1\240\7\13\5\0\2\13\6\0\14\13\1\0\6\13"+
    "\5\0\1\13\1\241\1\242\31\13\1\0\3\13\6\0"+
    "\1\100\11\0\10\13\104\0\1\243\35\0\2\13\6\0"+
    "\14\13\1\0\6\13\5\0\2\13\1\244\31\13\1\0"+
    "\3\13\6\0\1\100\11\0\10\13\5\0\2\13\6\0"+
    "\2\13\1\245\11\13\1\0\6\13\5\0\34\13\1\0"+
    "\3\13\6\0\1\100\11\0\10\13\5\0\2\13\6\0"+
    "\5\13\1\246\6\13\1\0\6\13\5\0\34\13\1\0"+
    "\3\13\6\0\1\100\11\0\10\13\1\0\3\131\1\0"+
    "\131\131\4\0\2\13\6\0\1\247\13\13\1\0\6\13"+
    "\5\0\34\13\1\0\3\13\6\0\1\100\11\0\10\13"+
    "\5\0\2\13\6\0\14\13\1\0\6\13\5\0\34\13"+
    "\1\0\3\13\6\0\1\100\11\0\4\13\1\250\3\13"+
    "\113\0\1\251\22\0\3\252\1\0\5\252\2\0\122\252"+
    "\45\0\1\253\76\0\1\11\3\0\1\11\7\0\1\11"+
    "\1\0\1\11\2\0\1\11\6\0\2\11\1\0\2\11"+
    "\34\0\1\11\4\0\1\254\3\0\2\11\1\0\1\11"+
    "\1\0\6\11\10\0\1\11\21\0\1\255\61\0\1\256"+
    "\35\0\2\13\6\0\14\13\1\0\6\13\5\0\34\13"+
    "\1\0\3\13\6\0\1\100\11\0\3\13\1\257\4\13"+
    "\5\0\2\13\6\0\14\13\1\0\6\13\5\0\34\13"+
    "\1\0\1\260\2\13\6\0\1\100\11\0\10\13\5\0"+
    "\2\13\6\0\14\13\1\0\5\13\1\261\5\0\34\13"+
    "\1\0\3\13\6\0\1\100\11\0\10\13\5\0\2\13"+
    "\6\0\14\13\1\0\6\13\5\0\34\13\1\0\1\262"+
    "\2\13\6\0\1\100\11\0\10\13\5\0\2\13\6\0"+
    "\14\13\1\0\6\13\5\0\3\13\1\263\30\13\1\0"+
    "\3\13\6\0\1\100\11\0\10\13\32\0\1\155\40\0"+
    "\1\155\40\0\1\155\5\0\1\156\12\0\1\156\11\0"+
    "\3\156\2\0\1\156\6\0\1\156\1\0\1\156\10\0"+
    "\1\156\1\0\2\156\1\0\2\156\3\0\1\156\6\0"+
    "\1\156\31\0\1\156\5\0\2\157\6\0\14\157\1\0"+
    "\6\157\5\0\34\157\1\0\3\157\20\0\10\157\5\0"+
    "\2\157\1\0\1\11\3\0\1\11\7\157\1\160\1\157"+
    "\1\160\2\157\1\11\6\157\2\11\1\0\2\11\34\157"+
    "\1\11\3\157\5\0\2\11\1\0\1\11\1\0\6\11"+
    "\10\157\1\11\101\0\1\264\73\0\1\164\75\0\3\166"+
    "\5\0\1\166\26\0\1\75\125\0\1\75\40\0\1\75"+
    "\40\0\1\75\53\0\1\265\5\0\1\266\2\0\1\267"+
    "\77\0\2\75\3\0\1\75\4\0\4\75\4\0\22\75"+
    "\1\0\4\75\7\0\1\75\23\0\1\75\53\0\1\266"+
    "\10\0\1\270\125\0\1\75\147\0\1\75\117\0\1\271"+
    "\2\0\1\75\1\0\1\272\12\0\1\75\1\0\1\273"+
    "\2\0\1\75\114\0\1\75\126\0\1\274\2\0\1\275"+
    "\1\176\1\0\1\276\15\0\1\75\123\0\1\270\133\0"+
    "\1\273\5\0\1\75\117\0\1\75\4\0\1\266\127\0"+
    "\1\75\12\0\1\75\52\0\1\75\12\0\1\75\11\0"+
    "\3\75\2\0\1\75\6\0\1\75\1\0\1\75\10\0"+
    "\1\75\1\0\2\75\1\0\2\75\3\0\1\75\6\0"+
    "\1\75\31\0\1\75\5\0\2\13\6\0\14\13\1\0"+
    "\6\13\5\0\34\13\1\0\3\13\6\0\1\100\11\0"+
    "\1\13\1\277\6\13\5\0\2\207\6\0\14\207\1\0"+
    "\6\207\5\0\34\207\1\0\3\207\6\0\1\300\11\0"+
    "\10\207\5\0\2\210\6\0\14\210\1\0\6\210\5\0"+
    "\34\210\1\0\3\210\6\0\1\301\1\0\1\105\7\0"+
    "\10\210\5\0\2\210\1\0\1\11\3\0\1\11\7\210"+
    "\1\211\1\210\1\211\2\210\1\11\6\210\2\11\1\0"+
    "\2\11\34\210\1\11\3\210\5\0\2\11\1\0\1\106"+
    "\1\0\6\11\10\210\1\11\4\0\2\207\1\0\1\11"+
    "\3\0\1\11\7\207\1\212\1\207\1\212\2\207\1\11"+
    "\6\207\2\11\1\0\2\11\34\207\1\11\3\207\5\0"+
    "\2\11\1\0\1\11\1\0\6\11\10\207\1\11\4\0"+
    "\2\13\6\0\1\302\13\13\1\0\6\13\5\0\34\13"+
    "\1\0\3\13\6\0\1\100\11\0\10\13\5\0\2\13"+
    "\6\0\14\13\1\0\6\13\5\0\34\13\1\0\1\303"+
    "\2\13\6\0\1\100\11\0\10\13\5\0\1\216\24\0"+
    "\1\216\2\0\1\215\35\0\1\216\40\0\1\216\32\0"+
    "\1\304\40\0\1\304\40\0\1\304\53\0\1\305\5\0"+
    "\1\306\2\0\1\307\77\0\2\113\3\0\1\113\4\0"+
    "\4\113\4\0\22\113\1\0\4\113\7\0\1\113\23\0"+
    "\1\113\53\0\1\306\10\0\1\310\125\0\1\113\147\0"+
    "\1\113\117\0\1\311\2\0\1\312\1\0\1\313\12\0"+
    "\1\113\1\0\1\314\2\0\1\113\114\0\1\113\126\0"+
    "\1\315\2\0\1\316\1\226\1\0\1\317\15\0\1\113"+
    "\123\0\1\310\133\0\1\314\5\0\1\113\117\0\1\113"+
    "\4\0\1\306\127\0\1\113\12\0\1\113\52\0\1\320"+
    "\12\0\1\320\11\0\3\320\2\0\1\320\6\0\1\320"+
    "\1\0\1\320\10\0\1\320\1\0\2\320\1\0\2\320"+
    "\3\0\1\320\6\0\1\320\31\0\1\320\5\0\2\13"+
    "\6\0\4\13\1\321\7\13\1\0\6\13\5\0\34\13"+
    "\1\0\3\13\6\0\1\100\11\0\10\13\5\0\2\13"+
    "\6\0\14\13\1\0\6\13\5\0\34\13\1\0\3\13"+
    "\6\0\1\100\11\0\1\322\7\13\5\0\2\13\6\0"+
    "\14\13\1\0\4\13\1\323\1\13\5\0\34\13\1\0"+
    "\3\13\6\0\1\100\11\0\10\13\5\0\2\13\6\0"+
    "\14\13\1\0\6\13\5\0\3\13\1\324\30\13\1\0"+
    "\3\13\6\0\1\100\11\0\10\13\5\0\2\13\6\0"+
    "\14\13\1\0\6\13\5\0\3\13\1\325\30\13\1\0"+
    "\3\13\6\0\1\100\11\0\10\13\5\0\2\13\6\0"+
    "\14\13\1\0\4\13\1\326\1\13\5\0\34\13\1\0"+
    "\3\13\6\0\1\100\11\0\10\13\37\0\1\327\102\0"+
    "\2\13\6\0\14\13\1\0\6\13\5\0\3\13\1\330"+
    "\30\13\1\0\3\13\6\0\1\100\11\0\10\13\5\0"+
    "\2\13\6\0\14\13\1\0\4\13\1\331\1\13\5\0"+
    "\34\13\1\0\3\13\6\0\1\100\11\0\10\13\5\0"+
    "\2\13\6\0\14\13\1\0\6\13\5\0\34\13\1\0"+
    "\1\332\2\13\6\0\1\100\11\0\10\13\5\0\2\13"+
    "\6\0\14\13\1\0\6\13\5\0\34\13\1\0\1\333"+
    "\2\13\6\0\1\100\11\0\10\13\5\0\2\13\6\0"+
    "\14\13\1\0\6\13\5\0\34\13\1\0\3\13\6\0"+
    "\1\100\11\0\1\334\7\13\1\0\2\335\1\336\1\0"+
    "\5\335\2\0\77\335\1\337\22\335\13\0\1\340\121\0"+
    "\3\253\1\0\131\253\14\0\1\341\156\0\1\342\102\0"+
    "\2\13\6\0\14\13\1\0\6\13\5\0\34\13\1\0"+
    "\1\343\2\13\6\0\1\100\11\0\10\13\5\0\2\13"+
    "\6\0\14\13\1\0\6\13\5\0\34\13\1\0\2\13"+
    "\1\344\6\0\1\100\11\0\10\13\5\0\2\13\6\0"+
    "\14\13\1\0\4\13\1\345\1\13\5\0\34\13\1\0"+
    "\3\13\6\0\1\100\11\0\10\13\5\0\2\13\6\0"+
    "\14\13\1\0\6\13\5\0\2\13\1\346\31\13\1\0"+
    "\3\13\6\0\1\100\11\0\10\13\5\0\2\13\6\0"+
    "\5\13\1\347\6\13\1\0\6\13\5\0\34\13\1\0"+
    "\3\13\6\0\1\100\11\0\10\13\103\0\1\350\112\0"+
    "\1\75\126\0\1\75\154\0\1\75\126\0\1\75\135\0"+
    "\1\75\126\0\1\75\125\0\1\75\145\0\1\75\136\0"+
    "\1\75\130\0\1\75\5\0\1\75\53\0\2\13\6\0"+
    "\5\13\1\351\6\13\1\0\6\13\5\0\34\13\1\0"+
    "\3\13\6\0\1\100\11\0\10\13\113\0\1\300\134\0"+
    "\1\301\26\0\2\13\6\0\1\352\13\13\1\0\6\13"+
    "\5\0\34\13\1\0\3\13\6\0\1\100\11\0\10\13"+
    "\32\0\1\304\2\0\1\215\35\0\1\304\40\0\1\304"+
    "\61\0\1\113\126\0\1\113\154\0\1\113\126\0\1\113"+
    "\135\0\1\113\103\0\1\215\20\0\1\113\136\0\1\113"+
    "\125\0\1\113\145\0\1\113\136\0\1\113\130\0\1\113"+
    "\5\0\1\113\53\0\1\320\12\0\1\320\11\0\3\320"+
    "\1\215\1\0\1\320\6\0\1\320\1\0\1\320\10\0"+
    "\1\320\1\0\2\320\1\0\2\320\3\0\1\320\6\0"+
    "\1\320\31\0\1\320\5\0\2\13\6\0\14\13\1\0"+
    "\6\13\5\0\2\13\1\353\31\13\1\0\3\13\6\0"+
    "\1\100\11\0\10\13\5\0\2\13\6\0\14\13\1\0"+
    "\6\13\5\0\3\13\1\354\30\13\1\0\3\13\6\0"+
    "\1\100\11\0\10\13\5\0\2\13\6\0\14\13\1\0"+
    "\6\13\5\0\33\13\1\355\1\0\3\13\6\0\1\100"+
    "\11\0\10\13\5\0\2\13\6\0\14\13\1\0\6\13"+
    "\5\0\34\13\1\0\3\13\6\0\1\100\11\0\1\13"+
    "\1\356\6\13\5\0\2\13\6\0\14\13\1\0\6\13"+
    "\5\0\1\357\33\13\1\0\3\13\6\0\1\100\11\0"+
    "\10\13\105\0\1\360\34\0\2\13\6\0\5\13\1\361"+
    "\6\13\1\0\6\13\5\0\34\13\1\0\3\13\6\0"+
    "\1\100\11\0\10\13\5\0\2\13\6\0\5\13\1\362"+
    "\6\13\1\0\6\13\5\0\34\13\1\0\3\13\6\0"+
    "\1\100\11\0\10\13\5\0\2\13\6\0\1\13\1\363"+
    "\12\13\1\0\6\13\5\0\34\13\1\0\3\13\6\0"+
    "\1\100\11\0\10\13\1\0\3\335\1\0\5\335\2\0"+
    "\77\335\1\337\25\335\1\0\5\335\2\0\20\335\1\364"+
    "\14\335\1\365\1\366\1\335\1\367\1\370\5\335\1\371"+
    "\1\372\3\335\1\373\1\374\1\375\2\335\1\376\1\377"+
    "\14\335\1\337\17\335\1\u0100\5\335\1\0\5\335\2\0"+
    "\65\335\1\u0101\11\335\1\337\22\335\13\0\1\u0102\222\0"+
    "\1\u0103\70\0\1\u0104\103\0\2\13\6\0\14\13\1\0"+
    "\6\13\5\0\34\13\1\0\2\13\1\u0105\6\0\1\100"+
    "\11\0\10\13\5\0\2\13\6\0\14\13\1\0\6\13"+
    "\5\0\34\13\1\0\1\u0106\2\13\6\0\1\100\11\0"+
    "\10\13\5\0\2\13\6\0\14\13\1\0\4\13\1\u0107"+
    "\1\13\5\0\34\13\1\0\3\13\6\0\1\100\11\0"+
    "\10\13\36\0\1\u0108\103\0\2\13\6\0\14\13\1\0"+
    "\6\13\5\0\34\13\1\0\1\u0109\2\13\6\0\1\100"+
    "\11\0\10\13\5\0\2\13\6\0\14\13\1\0\6\13"+
    "\5\0\34\13\1\0\3\13\6\0\1\100\11\0\1\u010a"+
    "\7\13\5\0\2\13\6\0\14\13\1\0\6\13\5\0"+
    "\34\13\1\0\2\13\1\u010b\6\0\1\100\11\0\10\13"+
    "\5\0\2\13\6\0\5\13\1\u010c\6\13\1\0\6\13"+
    "\5\0\2\13\1\u010d\31\13\1\0\3\13\6\0\1\100"+
    "\11\0\10\13\5\0\2\13\6\0\5\13\1\u010e\6\13"+
    "\1\0\6\13\5\0\34\13\1\0\3\13\6\0\1\100"+
    "\11\0\10\13\5\0\2\13\6\0\14\13\1\0\4\13"+
    "\1\u010f\1\13\5\0\34\13\1\0\3\13\6\0\1\100"+
    "\11\0\10\13\33\0\1\u0110\106\0\2\13\6\0\5\13"+
    "\1\u0111\6\13\1\0\6\13\5\0\34\13\1\0\3\13"+
    "\6\0\1\100\11\0\10\13\5\0\2\13\6\0\1\13"+
    "\1\u0112\12\13\1\0\6\13\5\0\34\13\1\0\3\13"+
    "\6\0\1\100\11\0\10\13\5\0\2\13\6\0\14\13"+
    "\1\0\6\13\5\0\34\13\1\0\3\13\6\0\1\100"+
    "\11\0\3\13\1\u0113\4\13\1\0\3\335\1\0\5\335"+
    "\2\0\45\335\1\u0114\31\335\1\337\25\335\1\0\5\335"+
    "\2\0\41\335\1\u0115\35\335\1\337\25\335\1\0\5\335"+
    "\2\0\35\335\1\u0116\41\335\1\337\25\335\1\0\5\335"+
    "\2\0\41\335\1\u0117\6\335\1\u0118\12\335\1\u0119\13\335"+
    "\1\337\25\335\1\0\5\335\2\0\54\335\1\u011a\22\335"+
    "\1\337\25\335\1\0\5\335\2\0\35\335\1\u011b\41\335"+
    "\1\337\25\335\1\0\5\335\2\0\41\335\1\u011c\1\335"+
    "\1\u011d\33\335\1\337\25\335\1\0\5\335\2\0\45\335"+
    "\1\u011e\31\335\1\337\25\335\1\0\5\335\2\0\36\335"+
    "\1\u011f\40\335\1\337\25\335\1\0\5\335\2\0\35\335"+
    "\1\u0120\41\335\1\337\25\335\1\0\5\335\2\0\56\335"+
    "\1\u0121\20\335\1\337\25\335\1\0\5\335\2\0\45\335"+
    "\1\u0122\31\335\1\337\25\335\1\0\5\335\2\0\47\335"+
    "\1\u0123\27\335\1\337\25\335\1\0\5\335\2\0\72\335"+
    "\1\u0124\4\335\1\337\22\335\14\u0125\1\u0126\1\u0127\117\u0125"+
    "\3\u0103\1\0\131\u0103\45\0\1\u0128\73\0\2\13\6\0"+
    "\14\13\1\0\6\13\5\0\34\13\1\0\1\13\1\u0129"+
    "\1\13\6\0\1\100\11\0\10\13\5\0\2\13\6\0"+
    "\14\13\1\0\6\13\5\0\1\13\1\u012a\32\13\1\0"+
    "\3\13\6\0\1\100\11\0\10\13\104\0\1\u012b\35\0"+
    "\2\13\6\0\14\13\1\0\1\13\1\u012c\4\13\5\0"+
    "\34\13\1\0\3\13\6\0\1\100\11\0\10\13\5\0"+
    "\2\13\6\0\14\13\1\0\6\13\5\0\34\13\1\0"+
    "\3\13\6\0\1\100\11\0\1\u012d\7\13\5\0\2\13"+
    "\6\0\14\13\1\0\6\13\5\0\34\13\1\0\2\13"+
    "\1\u012e\6\0\1\100\11\0\10\13\21\0\1\u012f\120\0"+
    "\2\13\6\0\14\13\1\0\6\13\5\0\34\13\1\0"+
    "\1\u0130\2\13\6\0\1\100\11\0\10\13\1\0\3\335"+
    "\1\0\5\335\2\0\63\335\1\u0131\13\335\1\337\25\335"+
    "\1\0\5\335\2\0\36\335\1\u0132\15\335\1\u0133\22\335"+
    "\1\337\25\335\1\0\5\335\2\0\63\335\1\u0134\13\335"+
    "\1\337\25\335\1\0\5\335\2\0\36\335\1\u0135\40\335"+
    "\1\337\25\335\1\0\5\335\2\0\50\335\1\u0136\26\335"+
    "\1\337\25\335\1\0\5\335\2\0\45\335\1\u0137\31\335"+
    "\1\337\25\335\1\0\5\335\2\0\45\335\1\u0138\31\335"+
    "\1\337\25\335\1\0\5\335\2\0\35\335\1\u0139\41\335"+
    "\1\337\25\335\1\0\5\335\2\0\55\335\1\u013a\21\335"+
    "\1\337\25\335\1\0\5\335\2\0\60\335\1\u013b\16\335"+
    "\1\337\25\335\1\0\5\335\2\0\50\335\1\u013c\26\335"+
    "\1\337\25\335\1\0\5\335\2\0\37\335\1\u013d\37\335"+
    "\1\337\25\335\1\0\5\335\2\0\37\335\1\u013e\10\335"+
    "\1\u013f\26\335\1\337\25\335\1\0\5\335\2\0\35\335"+
    "\1\u0140\41\335\1\337\25\335\1\0\5\335\2\0\35\335"+
    "\1\u0141\41\335\1\337\25\335\1\0\5\335\2\0\55\335"+
    "\1\u0142\21\335\1\337\22\335\15\u0125\1\u0127\271\u0125\1\u0127"+
    "\1\u0143\116\u0125\3\u0128\1\0\131\u0128\4\0\2\13\6\0"+
    "\14\13\1\0\4\13\1\u0144\1\13\5\0\34\13\1\0"+
    "\3\13\6\0\1\100\11\0\10\13\105\0\1\u0145\34\0"+
    "\2\13\6\0\14\13\1\0\6\13\5\0\34\13\1\0"+
    "\1\u0146\2\13\6\0\1\100\11\0\10\13\5\0\2\13"+
    "\6\0\14\13\1\0\6\13\5\0\34\13\1\0\1\13"+
    "\1\u0147\1\13\6\0\1\100\11\0\10\13\37\0\1\u0148"+
    "\76\0\3\335\1\0\5\335\2\0\55\335\1\u0149\21\335"+
    "\1\337\25\335\1\0\5\335\2\0\35\335\1\u014a\41\335"+
    "\1\337\25\335\1\0\5\335\2\0\45\335\1\u014b\31\335"+
    "\1\337\25\335\1\0\5\335\2\0\47\335\1\u014c\27\335"+
    "\1\337\25\335\1\0\5\335\2\0\55\335\1\u014d\21\335"+
    "\1\337\25\335\1\0\5\335\2\0\50\335\1\u014e\26\335"+
    "\1\337\25\335\1\0\5\335\2\0\55\335\1\u014f\21\335"+
    "\1\337\25\335\1\0\5\335\2\0\45\335\1\u0150\31\335"+
    "\1\337\25\335\1\0\5\335\2\0\63\335\1\u0151\13\335"+
    "\1\337\25\335\1\0\5\335\2\0\43\335\1\u0152\33\335"+
    "\1\337\25\335\1\0\5\335\2\0\45\335\1\u0153\31\335"+
    "\1\337\25\335\1\0\5\335\2\0\56\335\1\u0154\20\335"+
    "\1\337\25\335\1\0\5\335\2\0\41\335\1\u0155\35\335"+
    "\1\337\25\335\1\0\5\335\2\0\56\335\1\u0156\20\335"+
    "\1\337\25\335\1\0\5\335\2\0\45\335\1\u0157\31\335"+
    "\1\337\25\335\1\0\5\335\2\0\35\335\1\u0158\41\335"+
    "\1\337\22\335\15\u0125\1\u0127\1\u0125\1\u0159\115\u0125\4\0"+
    "\2\13\6\0\14\13\1\0\6\13\5\0\34\13\1\0"+
    "\1\u015a\2\13\6\0\1\100\11\0\10\13\33\0\1\u015b"+
    "\203\0\1\u015c\33\0\3\335\1\0\5\335\2\0\45\335"+
    "\1\u015d\31\335\1\337\25\335\1\0\5\335\2\0\63\335"+
    "\1\u015e\13\335\1\337\25\335\1\0\5\335\2\0\50\335"+
    "\1\u015f\26\335\1\337\25\335\1\0\5\335\2\0\50\335"+
    "\1\u0160\26\335\1\337\25\335\1\0\5\335\2\0\50\335"+
    "\1\u0161\26\335\1\337\25\335\1\0\5\335\2\0\56\335"+
    "\1\u0162\20\335\1\337\25\335\1\0\5\335\2\0\37\335"+
    "\1\u0163\37\335\1\337\25\335\1\0\5\335\2\0\45\335"+
    "\1\u0164\31\335\1\337\25\335\1\0\5\335\2\0\41\335"+
    "\1\u0165\35\335\1\337\25\335\1\0\5\335\2\0\40\335"+
    "\1\u0166\36\335\1\337\25\335\1\0\5\335\2\0\35\335"+
    "\1\u0167\41\335\1\337\25\335\1\0\5\335\2\0\42\335"+
    "\1\u0168\34\335\1\337\25\335\1\0\5\335\2\0\61\335"+
    "\1\u0169\15\335\1\337\25\335\1\0\5\335\2\0\55\335"+
    "\1\u016a\21\335\1\337\25\335\1\0\5\335\2\0\56\335"+
    "\1\u016b\20\335\1\337\22\335\15\u0125\1\u0127\2\u0125\1\u016c"+
    "\114\u0125\4\0\2\13\6\0\14\13\1\0\5\13\1\u016d"+
    "\5\0\34\13\1\0\3\13\6\0\1\100\11\0\10\13"+
    "\21\0\1\u016e\221\0\1\u016f\27\0\3\335\1\0\5\335"+
    "\2\0\50\335\1\u0170\26\335\1\337\25\335\1\0\5\335"+
    "\2\0\47\335\1\u0171\27\335\1\337\25\335\1\0\5\335"+
    "\2\0\43\335\1\u0172\33\335\1\337\25\335\1\0\5\335"+
    "\2\0\51\335\1\u0173\25\335\1\337\25\335\1\0\5\335"+
    "\2\0\45\335\1\u0174\31\335\1\337\25\335\1\0\5\335"+
    "\2\0\47\335\1\u0175\27\335\1\337\25\335\1\0\5\335"+
    "\2\0\47\335\1\u0176\27\335\1\337\25\335\1\0\5\335"+
    "\2\0\55\335\1\u0177\21\335\1\337\25\335\1\0\5\335"+
    "\2\0\45\335\1\u0178\31\335\1\337\25\335\1\0\5\335"+
    "\2\0\45\335\1\u0179\31\335\1\337\25\335\1\0\5\335"+
    "\2\0\47\335\1\u017a\27\335\1\337\25\335\1\0\5\335"+
    "\2\0\47\335\1\u017b\27\335\1\337\25\335\1\0\5\335"+
    "\2\0\35\335\1\u017c\41\335\1\337\22\335\15\u0125\1\u0127"+
    "\3\u0125\1\u017d\113\u0125\36\0\1\u017e\76\0\3\335\1\0"+
    "\5\335\2\0\47\335\1\u017f\27\335\1\337\25\335\1\0"+
    "\5\335\2\0\50\335\1\u0180\26\335\1\337\25\335\1\0"+
    "\5\335\2\0\41\335\1\u0181\35\335\1\337\25\335\1\0"+
    "\5\335\2\0\37\335\1\u0182\37\335\1\337\25\335\1\0"+
    "\5\335\2\0\63\335\1\u0183\13\335\1\337\25\335\1\0"+
    "\5\335\2\0\56\335\1\u0184\20\335\1\337\25\335\1\0"+
    "\5\335\2\0\55\335\1\u0185\21\335\1\337\25\335\1\0"+
    "\5\335\2\0\37\335\1\u0186\37\335\1\337\25\335\1\0"+
    "\5\335\2\0\43\335\1\u0187\33\335\1\337\25\335\1\0"+
    "\5\335\2\0\62\335\1\u0188\14\335\1\337\22\335\101\0"+
    "\1\u0189\33\0\3\335\1\0\5\335\2\0\43\335\1\u018a"+
    "\33\335\1\337\25\335\1\0\5\335\2\0\51\335\1\u018b"+
    "\25\335\1\337\25\335\1\0\5\335\2\0\55\335\1\u018c"+
    "\21\335\1\337\25\335\1\0\5\335\2\0\56\335\1\u018d"+
    "\20\335\1\337\25\335\1\0\5\335\2\0\40\335\1\u018e"+
    "\22\335\1\u018f\13\335\1\337\25\335\1\0\5\335\2\0"+
    "\40\335\1\u0190\36\335\1\337\25\335\1\0\5\335\2\0"+
    "\45\335\1\u0191\31\335\1\337\25\335\1\0\5\335\2\0"+
    "\45\335\1\u0192\31\335\1\337\22\335\105\0\1\u0193\27\0"+
    "\3\335\1\0\5\335\2\0\45\335\1\u0194\31\335\1\337"+
    "\25\335\1\0\5\335\2\0\56\335\1\u0195\20\335\1\337"+
    "\25\335\1\0\5\335\2\0\40\335\1\u0196\36\335\1\337"+
    "\25\335\1\0\5\335\2\0\47\335\1\u0197\6\335\1\u0198"+
    "\20\335\1\337\25\335\1\0\5\335\2\0\45\335\1\u0199"+
    "\31\335\1\337\25\335\1\0\5\335\2\0\35\335\1\u019a"+
    "\41\335\1\337\25\335\1\0\5\335\2\0\20\335\1\u019b"+
    "\56\335\1\337\25\335\1\0\5\335\2\0\20\335\1\u019c"+
    "\56\335\1\337\25\335\1\0\5\335\2\0\40\335\1\u019d"+
    "\36\335\1\337\25\335\1\0\5\335\2\0\45\335\1\u019e"+
    "\31\335\1\337\25\335\1\0\5\335\2\0\52\335\1\u019f"+
    "\24\335\1\337\25\335\1\0\5\335\2\0\35\335\1\u01a0"+
    "\41\335\1\337\25\335\1\0\5\335\2\0\14\335\1\u01a1"+
    "\62\335\1\337\25\335\1\0\5\335\2\0\43\335\1\u01a2"+
    "\33\335\1\337\25\335\1\0\5\335\2\0\45\335\1\u01a3"+
    "\31\335\1\337\25\335\1\0\5\335\2\0\14\335\1\u01a4"+
    "\62\335\1\337\25\335\1\0\5\335\2\0\37\335\1\u01a5"+
    "\37\335\1\337\25\335\1\0\5\335\2\0\62\335\1\u01a6"+
    "\14\335\1\337\25\335\1\0\5\335\2\0\40\335\1\u01a7"+
    "\36\335\1\337\25\335\1\0\5\335\2\0\56\335\1\u01a8"+
    "\20\335\1\337\25\335\1\0\5\335\2\0\45\335\1\u01a9"+
    "\31\335\1\337\25\335\1\0\5\335\2\0\50\335\1\u01aa"+
    "\26\335\1\337\25\335\1\0\5\335\2\0\35\335\1\u01ab"+
    "\41\335\1\337\25\335\1\0\5\335\2\0\47\335\1\u01ac"+
    "\27\335\1\337\25\335\1\0\5\335\2\0\37\335\1\u01ad"+
    "\37\335\1\337\25\335\1\0\5\335\2\0\37\335\1\u01ae"+
    "\37\335\1\337\25\335\1\0\5\335\2\0\56\335\1\u01af"+
    "\20\335\1\337\25\335\1\0\5\335\2\0\47\335\1\u01b0"+
    "\27\335\1\337\25\335\1\0\5\335\2\0\35\335\1\u01b1"+
    "\41\335\1\337\25\335\1\0\5\335\2\0\55\335\1\u01b2"+
    "\21\335\1\337\25\335\1\0\5\335\2\0\45\335\1\u01b3"+
    "\31\335\1\337\22\335";

  private static int [] zzUnpackTrans() {
    int [] result = new int[33015];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\1\1\11\1\1\1\11\1\1\1\11\21\1"+
    "\1\11\10\1\1\11\2\1\1\11\2\1\1\11\1\1"+
    "\1\11\13\1\1\11\5\1\1\0\1\11\1\0\5\1"+
    "\1\0\2\1\1\11\2\1\1\0\1\11\1\0\6\1"+
    "\1\0\10\1\1\11\1\0\2\11\1\0\1\1\1\0"+
    "\1\11\14\1\2\11\1\0\1\1\1\11\17\0\10\1"+
    "\1\11\17\0\6\1\1\0\5\1\2\0\1\1\1\11"+
    "\2\0\5\1\13\0\5\1\15\0\6\1\1\0\5\1"+
    "\6\0\5\1\1\0\7\1\1\0\3\1\17\0\1\1"+
    "\1\0\3\1\1\0\7\1\1\0\3\1\20\0\1\1"+
    "\3\0\3\1\1\0\3\1\1\0\1\1\5\0\1\1"+
    "\2\0\1\1\12\0\1\1\1\0\2\1\10\0\1\1"+
    "\11\0\1\1\11\0\1\1\1\0\1\1\6\0\1\1"+
    "\1\0\1\11\3\0\2\1\3\0\1\1\4\0\1\1"+
    "\10\0\1\1\1\0\1\1\2\0\1\1\2\0\1\1"+
    "\4\0\1\11\5\0\1\1\1\0\2\1\1\0\1\1"+
    "\3\0\2\1\2\0\1\1\2\0\1\1\10\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[435];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char[] zzBuffer = new char[0];

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    private int commentStart;
    private int commentDepth;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _HaskellLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _HaskellLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3364) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer.toString().toCharArray();
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return TokenPackage.getBLOCK_COMMENT();
          }
        case 108: break;
        case 2: 
          { return TokenType.BAD_CHARACTER;
          }
        case 109: break;
        case 3: 
          { return TokenType.WHITE_SPACE;
          }
        case 110: break;
        case 4: 
          { return TokenPackage.getNEW_LINE();
          }
        case 111: break;
        case 5: 
          { return HaskellLexerTokens.INTEGER;
          }
        case 112: break;
        case 6: 
          { return HaskellLexerTokens.BACKQUOTE;
          }
        case 113: break;
        case 7: 
          { return HaskellLexerTokens.VARSYM;
          }
        case 114: break;
        case 8: 
          { return HaskellLexerTokens.VARID;
          }
        case 115: break;
        case 9: 
          { return HaskellLexerTokens.CONID;
          }
        case 116: break;
        case 10: 
          { return HaskellLexerTokens.UNDERSCORE;
          }
        case 117: break;
        case 11: 
          { return HaskellLexerTokens.COLON;
          }
        case 118: break;
        case 12: 
          { return TokenPackage.getTH_VAR_QUOTE();
          }
        case 119: break;
        case 13: 
          { return HaskellLexerTokens.STAR;
          }
        case 120: break;
        case 14: 
          { return HaskellLexerTokens.LAM;
          }
        case 121: break;
        case 15: 
          { return HaskellLexerTokens.CBRACK;
          }
        case 122: break;
        case 16: 
          { return HaskellLexerTokens.AT;
          }
        case 123: break;
        case 17: 
          { return HaskellLexerTokens.MINUS;
          }
        case 124: break;
        case 18: 
          { return HaskellLexerTokens.OCURLY;
          }
        case 125: break;
        case 19: 
          { return HaskellLexerTokens.CCURLY;
          }
        case 126: break;
        case 20: 
          { return HaskellLexerTokens.OBRACK;
          }
        case 127: break;
        case 21: 
          { return HaskellLexerTokens.OPAREN;
          }
        case 128: break;
        case 22: 
          { return HaskellLexerTokens.CPAREN;
          }
        case 129: break;
        case 23: 
          { return HaskellLexerTokens.VBAR;
          }
        case 130: break;
        case 24: 
          { return HaskellLexerTokens.SEMI;
          }
        case 131: break;
        case 25: 
          { return HaskellLexerTokens.DOT;
          }
        case 132: break;
        case 26: 
          { return HaskellLexerTokens.COMMA;
          }
        case 133: break;
        case 27: 
          { return HaskellLexerTokens.EQUAL;
          }
        case 134: break;
        case 28: 
          { return HaskellLexerTokens.RARROW;
          }
        case 135: break;
        case 29: 
          { return HaskellLexerTokens.TILDE;
          }
        case 136: break;
        case 30: 
          { return HaskellLexerTokens.BANG;
          }
        case 137: break;
        case 31: 
          { 
          }
        case 138: break;
        case 32: 
          { return HaskellLexerTokens.STRING;
          }
        case 139: break;
        case 33: 
          { return HaskellLexerTokens.OF;
          }
        case 140: break;
        case 34: 
          { return HaskellLexerTokens.DCOLON;
          }
        case 141: break;
        case 35: 
          { return HaskellLexerTokens.CPABRACK;
          }
        case 142: break;
        case 36: 
          { return TokenPackage.getTH_TY_QUOTE();
          }
        case 143: break;
        case 37: 
          { return HaskellLexerTokens.IF;
          }
        case 144: break;
        case 38: 
          { return HaskellLexerTokens.IN;
          }
        case 145: break;
        case 39: 
          { return HaskellLexerTokens.DO;
          }
        case 146: break;
        case 40: 
          { return HaskellLexerTokens.AS;
          }
        case 147: break;
        case 41: 
          { return TokenPackage.getEND_OF_LINE_COMMENT();
          }
        case 148: break;
        case 42: 
          { yybegin(BLOCK_COMMENT);
    commentDepth = 0;
    commentStart = getTokenStart();
          }
        case 149: break;
        case 43: 
          { return HaskellLexerTokens.OPABRACK;
          }
        case 150: break;
        case 44: 
          { return HaskellLexerTokens.OUBXPAREN;
          }
        case 151: break;
        case 45: 
          { return HaskellLexerTokens.CPARENBAR;
          }
        case 152: break;
        case 46: 
          { return HaskellLexerTokens.CUBXPAREN;
          }
        case 153: break;
        case 47: 
          { return HaskellLexerTokens.DOTDOT;
          }
        case 154: break;
        case 48: 
          { return HaskellLexerTokens.DARROW;
          }
        case 155: break;
        case 49: 
          { return HaskellLexerTokens.LARROW;
          }
        case 156: break;
        case 50: 
          { return HaskellLexerTokens.DUPIPVARID;
          }
        case 157: break;
        case 51: 
          { if (commentDepth > 0) {
            commentDepth--;
        }
        else {
             int state = yystate();
             yybegin(YYINITIAL);
             zzStartRead = commentStart;
             return TokenPackage.getBLOCK_COMMENT();
        }
          }
        case 158: break;
        case 52: 
          { commentDepth++;
          }
        case 159: break;
        case 53: 
          { return HaskellLexerTokens.LET;
          }
        case 160: break;
        case 54: 
          { return HaskellLexerTokens.QVARID;
          }
        case 161: break;
        case 55: 
          { return HaskellLexerTokens.QCONID;
          }
        case 162: break;
        case 56: 
          { return HaskellLexerTokens.CHAR;
          }
        case 163: break;
        case 57: 
          { return CPPTokens.IF;
          }
        case 164: break;
        case 58: 
          { return HaskellLexerTokens.CLOSE_PRAG;
          }
        case 165: break;
        case 59: 
          { return HaskellLexerTokens.CASE;
          }
        case 166: break;
        case 60: 
          { return HaskellLexerTokens.DATA;
          }
        case 167: break;
        case 61: 
          { return HaskellLexerTokens.ROLE;
          }
        case 168: break;
        case 62: 
          { return HaskellLexerTokens.ELSE;
          }
        case 169: break;
        case 63: 
          { return HaskellLexerTokens.TYPE;
          }
        case 170: break;
        case 64: 
          { return HaskellLexerTokens.THEN;
          }
        case 171: break;
        case 65: 
          { return HaskellLexerTokens.CLASS;
          }
        case 172: break;
        case 66: 
          { return HaskellLexerTokens.INFIX;
          }
        case 173: break;
        case 67: 
          { return CPPTokens.ELSE;
          }
        case 174: break;
        case 68: 
          { return HaskellLexerTokens.WHERE;
          }
        case 175: break;
        case 69: 
          { return HaskellLexerTokens.MODULE;
          }
        case 176: break;
        case 70: 
          { return HaskellLexerTokens.IMPORT;
          }
        case 177: break;
        case 71: 
          { return HaskellLexerTokens.INFIXL;
          }
        case 178: break;
        case 72: 
          { return HaskellLexerTokens.INFIXR;
          }
        case 179: break;
        case 73: 
          { return HaskellLexerTokens.FORALL;
          }
        case 180: break;
        case 74: 
          { return HaskellLexerTokens.FAMILY;
          }
        case 181: break;
        case 75: 
          { return TokenPackage.getPRAGMA();
          }
        case 182: break;
        case 76: 
          { return CPPTokens.ENDIF;
          }
        case 183: break;
        case 77: 
          { return HaskellLexerTokens.HIDING;
          }
        case 184: break;
        case 78: 
          { return HaskellLexerTokens.DEFAULT;
          }
        case 185: break;
        case 79: 
          { return HaskellLexerTokens.NEWTYPE;
          }
        case 186: break;
        case 80: 
          { return HaskellLexerTokens.SCC_PRAG;
          }
        case 187: break;
        case 81: 
          { return HaskellLexerTokens.ANN_PRAG;
          }
        case 188: break;
        case 82: 
          { return HaskellLexerTokens.INSTANCE;
          }
        case 189: break;
        case 83: 
          { return HaskellLexerTokens.DERIVING;
          }
        case 190: break;
        case 84: 
          { return HaskellLexerTokens.CORE_PRAG;
          }
        case 191: break;
        case 85: 
          { return HaskellLexerTokens.CTYPE;
          }
        case 192: break;
        case 86: 
          { return HaskellLexerTokens.RULES_PRAG;
          }
        case 193: break;
        case 87: 
          { return HaskellLexerTokens.QUALIFIED;
          }
        case 194: break;
        case 88: 
          { yybegin(TEX); return TokenPackage.getBLOCK_COMMENT();
          }
        case 195: break;
        case 89: 
          { return HaskellLexerTokens.UNPACK_PRAG;
          }
        case 196: break;
        case 90: 
          { return HaskellLexerTokens.SOURCE_PRAG;
          }
        case 197: break;
        case 91: 
          { return HaskellLexerTokens.INLINE_PRAG;
          }
        case 198: break;
        case 92: 
          { yypushback(1);
                        return HaskellLexerTokens.OPARENBAR;
          }
        case 199: break;
        case 93: 
          { return HaskellLexerTokens.MINIMAL_PRAG;
          }
        case 200: break;
        case 94: 
          { return HaskellLexerTokens.WARNING_PRAG;
          }
        case 201: break;
        case 95: 
          { return HaskellLexerTokens.NOUNPACK_PRAG;
          }
        case 202: break;
        case 96: 
          { return HaskellLexerTokens.OVERLAPS;
          }
        case 203: break;
        case 97: 
          { yybegin(YYINITIAL); return TokenPackage.getBLOCK_COMMENT();
          }
        case 204: break;
        case 98: 
          { return HaskellLexerTokens.VECT_PRAG;
          }
        case 205: break;
        case 99: 
          { return HaskellLexerTokens.GENERATED_PRAG;
          }
        case 206: break;
        case 100: 
          { return HaskellLexerTokens.DEPRECATED_PRAG;
          }
        case 207: break;
        case 101: 
          { return HaskellLexerTokens.SPEC_PRAG;
          }
        case 208: break;
        case 102: 
          { return HaskellLexerTokens.INCOHERENT;
          }
        case 209: break;
        case 103: 
          { return HaskellLexerTokens.NOVECT_PRAG;
          }
        case 210: break;
        case 104: 
          { return HaskellLexerTokens.OVERLAPPING;
          }
        case 211: break;
        case 105: 
          { return HaskellLexerTokens.OVERLAPPABLE;
          }
        case 212: break;
        case 106: 
          { return HaskellLexerTokens.VECT_SCALAR_PRAG;
          }
        case 213: break;
        case 107: 
          { return HaskellLexerTokens.SPEC_INLINE_PRAG;
          }
        case 214: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case BLOCK_COMMENT: {
              int state = yystate();
        yybegin(YYINITIAL);
        zzStartRead = commentStart;
        return TokenPackage.getBLOCK_COMMENT();
            }
            case 436: break;
            default:
            return null;
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
