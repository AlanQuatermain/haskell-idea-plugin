/* The following code was generated by JFlex 1.4.3 on 13/12/13 2:17 PM */

package org.jetbrains.haskell.parser;

import com.intellij.lexer.*;
import com.intellij.psi.*;
import org.jetbrains.haskell.parser.token.*;
import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 13/12/13 2:17 PM from the specification file
 * <tt>/home/atsky/Dropbox/haskell-idea-plugin/src/org/jetbrains/haskell/parser/Haskell.flex</tt>
 */
class _HaskellLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int BLOCK_COMMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int TEX = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\3\1\0\1\2\23\0\1\2\1\0\1\5\1\51"+
    "\3\0\1\53\1\23\1\24\2\0\1\30\1\4\1\27\1\0\12\1"+
    "\1\25\1\26\1\0\1\31\1\33\2\0\32\54\1\21\1\6\1\22"+
    "\3\0\1\35\1\7\1\15\1\17\1\10\1\41\1\11\1\42\1\12"+
    "\2\0\1\40\1\43\1\13\1\16\1\45\1\0\1\46\1\36\1\37"+
    "\1\44\1\0\1\50\1\0\1\47\1\0\1\14\1\32\1\20\u2114\0"+
    "\1\34\155\0\1\52\uddff\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\2\1\6"+
    "\1\7\2\2\1\10\3\2\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\12\2\1\25\1\2\1\26\1\1\1\0\2\1\1\27"+
    "\1\0\1\30\2\0\1\2\1\31\1\32\1\2\1\0"+
    "\3\2\1\33\1\2\1\34\1\2\1\0\1\35\16\2"+
    "\2\0\1\36\1\0\1\37\1\1\1\0\1\30\1\0"+
    "\3\2\1\40\1\0\5\2\1\41\2\2\1\42\14\2"+
    "\2\36\2\0\1\43\2\2\1\0\1\2\1\44\1\2"+
    "\1\45\1\46\1\47\1\50\12\2\1\51\1\2\2\0"+
    "\2\2\1\0\1\2\1\52\1\53\4\2\1\54\4\2"+
    "\1\55\2\0\1\2\1\56\1\57\1\2\1\60\1\61"+
    "\1\62\1\2\1\63\1\2\1\64\2\0\4\2\2\0"+
    "\1\65\2\2\1\66\2\0\1\2\1\67\1\0\1\70"+
    "\1\2\1\0\1\71\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[193];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\u010e\0\u013b"+
    "\0\u0168\0\u0195\0\u01c2\0\u01ef\0\u021c\0\u0249\0\u0276\0\u02a3"+
    "\0\u02d0\0\u02d0\0\u02d0\0\u02d0\0\u02d0\0\207\0\u02d0\0\u02fd"+
    "\0\u02d0\0\207\0\207\0\207\0\u032a\0\u0357\0\u0384\0\u03b1"+
    "\0\u03de\0\u040b\0\u0438\0\u0465\0\u0492\0\u04bf\0\207\0\u04ec"+
    "\0\u0519\0\u0546\0\u0573\0\u05a0\0\u05cd\0\u05fa\0\u0168\0\u02d0"+
    "\0\u0627\0\u0654\0\u0681\0\u06ae\0\207\0\u06db\0\u0708\0\u0735"+
    "\0\u0762\0\u078f\0\207\0\u07bc\0\207\0\u07e9\0\u0816\0\207"+
    "\0\u0843\0\u0870\0\u089d\0\u08ca\0\u08f7\0\u0924\0\u0951\0\u097e"+
    "\0\u09ab\0\u09d8\0\u0a05\0\u0a32\0\u0a5f\0\u0a8c\0\u0ab9\0\u0ae6"+
    "\0\207\0\u0b13\0\u02d0\0\u0b40\0\u0b6d\0\u0168\0\u0b9a\0\u0bc7"+
    "\0\u0bf4\0\u0c21\0\u02d0\0\u0c4e\0\u0c7b\0\u0ca8\0\u0cd5\0\u0d02"+
    "\0\u0d2f\0\u02d0\0\u0d5c\0\u0d89\0\207\0\u0db6\0\u0de3\0\u0e10"+
    "\0\u0e3d\0\u0e6a\0\u0e97\0\u0ec4\0\u0ef1\0\u0f1e\0\u0f4b\0\u0f78"+
    "\0\u0fa5\0\u02d0\0\u0ab9\0\u0fd2\0\u0fff\0\207\0\u102c\0\u1059"+
    "\0\u1086\0\u10b3\0\207\0\u10e0\0\207\0\207\0\207\0\207"+
    "\0\u110d\0\u113a\0\u1167\0\u1194\0\u11c1\0\u11ee\0\u121b\0\u1248"+
    "\0\u1275\0\u12a2\0\207\0\u12cf\0\u12fc\0\u1329\0\u1356\0\u1383"+
    "\0\u13b0\0\u13dd\0\207\0\207\0\u140a\0\u1437\0\u1464\0\u1491"+
    "\0\207\0\u14be\0\u14eb\0\u1518\0\u1545\0\207\0\u1572\0\u159f"+
    "\0\u15cc\0\207\0\u0c4e\0\u15f9\0\207\0\207\0\207\0\u1626"+
    "\0\207\0\u1653\0\207\0\u1680\0\u16ad\0\u16da\0\u1707\0\u1734"+
    "\0\u1761\0\u178e\0\u17bb\0\207\0\u17e8\0\u1815\0\207\0\u1842"+
    "\0\u186f\0\u189c\0\207\0\u18c9\0\u02d0\0\u18f6\0\u1923\0\207"+
    "\0\u1950";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[193];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\4"+
    "\1\13\1\4\1\14\1\4\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\4\1\34\1\35\1\4\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\4"+
    "\1\46\1\4\1\47\1\50\1\51\4\52\1\53\50\52"+
    "\6\54\1\55\46\54\2\4\2\0\1\4\2\0\5\4"+
    "\1\0\3\4\5\0\1\4\3\0\24\4\1\0\1\5"+
    "\55\0\1\6\54\0\1\7\52\0\2\4\2\0\1\56"+
    "\2\0\5\4\1\0\3\4\5\0\1\4\3\0\2\4"+
    "\1\34\21\4\5\57\1\60\1\61\46\57\10\0\1\62"+
    "\44\0\2\4\2\0\1\4\2\0\5\4\1\0\3\4"+
    "\5\0\1\4\3\0\7\4\1\63\16\4\2\0\1\4"+
    "\2\0\4\4\1\64\1\0\3\4\5\0\1\4\3\0"+
    "\10\4\1\65\1\4\1\66\11\4\4\0\1\67\50\0"+
    "\2\4\2\0\1\4\2\0\5\4\1\0\1\4\1\70"+
    "\1\4\5\0\1\4\3\0\4\4\1\71\2\4\1\72"+
    "\16\4\2\0\1\4\2\0\5\4\1\0\3\4\5\0"+
    "\1\4\3\0\10\4\1\73\3\4\1\74\11\4\2\0"+
    "\1\4\2\0\5\4\1\0\1\4\1\75\1\4\5\0"+
    "\1\4\3\0\4\4\1\76\17\4\104\0\1\77\25\0"+
    "\2\4\2\0\1\4\2\0\5\4\1\0\3\4\5\0"+
    "\1\4\3\0\5\4\1\100\20\4\2\0\1\4\2\0"+
    "\5\4\1\0\3\4\5\0\1\4\3\0\11\4\1\101"+
    "\4\4\1\102\7\4\2\0\1\4\2\0\1\4\1\103"+
    "\3\4\1\0\3\4\5\0\1\4\3\0\26\4\2\0"+
    "\1\4\2\0\3\4\1\104\1\4\1\0\1\4\1\105"+
    "\1\4\5\0\1\4\3\0\26\4\2\0\1\4\2\0"+
    "\3\4\1\106\1\4\1\0\3\4\5\0\1\4\3\0"+
    "\26\4\2\0\1\4\2\0\5\4\1\0\1\4\1\107"+
    "\1\4\5\0\1\4\3\0\13\4\1\110\12\4\2\0"+
    "\1\4\2\0\5\4\1\0\3\4\5\0\1\4\3\0"+
    "\5\4\1\111\20\4\2\0\1\4\2\0\5\4\1\0"+
    "\1\4\1\112\1\4\5\0\1\4\3\0\13\4\1\113"+
    "\12\4\2\0\1\4\2\0\1\4\1\114\3\4\1\0"+
    "\3\4\5\0\1\4\3\0\26\4\2\0\1\4\2\0"+
    "\3\4\1\115\1\4\1\0\3\4\5\0\1\4\3\0"+
    "\11\4\1\116\12\4\2\50\2\117\1\50\1\117\1\120"+
    "\5\50\1\117\3\50\5\117\1\50\3\117\22\50\1\121"+
    "\1\50\2\51\2\0\1\51\2\0\5\51\1\0\3\51"+
    "\5\0\1\51\3\0\24\51\4\52\1\122\70\52\1\123"+
    "\34\52\6\54\1\0\46\54\6\0\1\124\1\125\45\0"+
    "\3\56\1\0\51\56\5\57\1\126\1\61\46\57\13\0"+
    "\1\127\41\0\2\4\2\0\1\4\2\0\5\4\1\0"+
    "\3\4\5\0\1\4\3\0\5\4\1\130\20\4\2\0"+
    "\1\4\2\0\5\4\1\0\3\4\5\0\1\4\3\0"+
    "\5\4\1\131\20\4\2\0\1\4\2\0\5\4\1\0"+
    "\3\4\5\0\1\4\3\0\14\4\1\132\7\4\51\133"+
    "\1\134\3\133\2\4\2\0\1\4\2\0\4\4\1\135"+
    "\1\0\3\4\5\0\1\4\3\0\26\4\2\0\1\4"+
    "\2\0\5\4\1\0\3\4\5\0\1\4\3\0\5\4"+
    "\1\136\20\4\2\0\1\4\2\0\5\4\1\0\3\4"+
    "\5\0\1\4\3\0\4\4\1\137\21\4\2\0\1\4"+
    "\2\0\1\4\1\140\3\4\1\0\3\4\5\0\1\4"+
    "\3\0\26\4\2\0\1\4\2\0\5\4\1\0\3\4"+
    "\5\0\1\4\3\0\6\4\1\141\15\4\27\0\1\142"+
    "\25\0\2\4\2\0\1\4\2\0\1\4\1\143\3\4"+
    "\1\0\3\4\5\0\1\4\3\0\26\4\2\0\1\4"+
    "\2\0\5\4\1\0\3\4\5\0\1\4\3\0\14\4"+
    "\1\144\11\4\2\0\1\4\2\0\5\4\1\0\3\4"+
    "\5\0\1\4\3\0\6\4\1\145\17\4\2\0\1\4"+
    "\2\0\1\4\1\146\3\4\1\0\3\4\5\0\1\4"+
    "\3\0\26\4\2\0\1\4\2\0\5\4\1\0\3\4"+
    "\5\0\1\4\3\0\15\4\1\147\10\4\2\0\1\4"+
    "\2\0\5\4\1\0\2\4\1\150\5\0\1\4\3\0"+
    "\26\4\2\0\1\4\2\0\5\4\1\0\2\4\1\151"+
    "\5\0\1\4\3\0\26\4\2\0\1\4\2\0\5\4"+
    "\1\0\3\4\5\0\1\4\3\0\6\4\1\152\17\4"+
    "\2\0\1\4\2\0\3\4\1\153\1\4\1\0\3\4"+
    "\5\0\1\4\3\0\26\4\2\0\1\4\2\0\5\4"+
    "\1\0\3\4\5\0\1\4\3\0\5\4\1\154\20\4"+
    "\2\0\1\4\2\0\1\155\4\4\1\0\3\4\5\0"+
    "\1\4\3\0\26\4\2\0\1\4\2\0\4\4\1\156"+
    "\1\0\1\157\2\4\5\0\1\4\3\0\26\4\2\0"+
    "\1\4\2\0\5\4\1\0\3\4\5\0\1\4\3\0"+
    "\6\4\1\160\17\4\2\0\1\4\2\0\1\4\1\161"+
    "\3\4\1\0\3\4\5\0\1\4\3\0\24\4\6\117"+
    "\1\120\44\117\1\162\7\117\1\120\44\117\1\163\1\117"+
    "\20\52\1\0\34\52\6\0\1\124\56\0\1\164\63\0"+
    "\1\165\35\0\2\4\2\0\1\4\2\0\1\4\1\166"+
    "\3\4\1\0\3\4\5\0\1\4\3\0\26\4\2\0"+
    "\1\4\2\0\5\4\1\0\3\4\5\0\1\4\3\0"+
    "\6\4\1\167\17\4\2\0\1\4\2\0\5\4\1\0"+
    "\1\4\1\170\1\4\5\0\1\4\3\0\24\4\3\134"+
    "\1\0\45\134\1\171\3\134\2\4\2\0\1\4\2\0"+
    "\5\4\1\0\3\4\5\0\1\4\3\0\5\4\1\172"+
    "\20\4\2\0\1\4\2\0\1\4\1\173\3\4\1\0"+
    "\3\4\5\0\1\4\3\0\26\4\2\0\1\4\2\0"+
    "\5\4\1\0\3\4\5\0\1\4\3\0\5\4\1\174"+
    "\20\4\2\0\1\4\2\0\4\4\1\175\1\0\3\4"+
    "\5\0\1\4\3\0\26\4\2\0\1\4\2\0\5\4"+
    "\1\0\3\4\5\0\1\4\3\0\4\4\1\176\21\4"+
    "\2\0\1\4\2\0\4\4\1\177\1\0\3\4\5\0"+
    "\1\4\3\0\26\4\2\0\1\4\2\0\1\4\1\200"+
    "\3\4\1\0\3\4\5\0\1\4\3\0\26\4\2\0"+
    "\1\4\2\0\5\4\1\0\3\4\5\0\1\4\3\0"+
    "\7\4\1\201\16\4\2\0\1\4\2\0\5\4\1\0"+
    "\3\4\5\0\1\4\3\0\4\4\1\202\21\4\2\0"+
    "\1\4\2\0\3\4\1\203\1\4\1\0\3\4\5\0"+
    "\1\4\3\0\26\4\2\0\1\4\2\0\5\4\1\0"+
    "\3\4\5\0\1\4\3\0\13\4\1\204\12\4\2\0"+
    "\1\4\2\0\5\4\1\0\3\4\5\0\1\4\3\0"+
    "\13\4\1\205\12\4\2\0\1\4\2\0\4\4\1\206"+
    "\1\0\3\4\5\0\1\4\3\0\26\4\2\0\1\4"+
    "\2\0\5\4\1\0\3\4\5\0\1\4\3\0\6\4"+
    "\1\207\17\4\2\0\1\4\2\0\5\4\1\0\3\4"+
    "\5\0\1\4\3\0\7\4\1\210\16\4\2\0\1\4"+
    "\2\0\5\4\1\0\3\4\5\0\1\4\3\0\4\4"+
    "\1\211\21\4\2\0\1\4\2\0\5\4\1\0\1\4"+
    "\1\212\1\4\5\0\1\4\3\0\26\4\2\0\1\4"+
    "\2\0\5\4\1\0\3\4\5\0\1\4\3\0\11\4"+
    "\1\213\14\4\2\0\1\4\2\0\5\4\1\0\3\4"+
    "\5\0\1\4\3\0\15\4\1\214\6\4\11\0\1\215"+
    "\57\0\1\216\40\0\2\4\2\0\1\4\2\0\5\4"+
    "\1\0\3\4\5\0\1\4\3\0\4\4\1\217\21\4"+
    "\2\0\1\4\2\0\5\4\1\0\3\4\5\0\1\4"+
    "\3\0\15\4\1\220\6\4\3\134\1\0\1\221\44\134"+
    "\1\171\3\134\2\4\2\0\1\4\2\0\5\4\1\0"+
    "\3\4\5\0\1\4\3\0\6\4\1\222\17\4\2\0"+
    "\1\4\2\0\5\4\1\0\3\4\5\0\1\4\3\0"+
    "\5\4\1\223\20\4\2\0\1\4\2\0\5\4\1\0"+
    "\2\4\1\224\5\0\1\4\3\0\26\4\2\0\1\4"+
    "\2\0\5\4\1\0\3\4\5\0\1\4\3\0\7\4"+
    "\1\225\16\4\2\0\1\4\2\0\4\4\1\226\1\0"+
    "\3\4\5\0\1\4\3\0\26\4\2\0\1\4\2\0"+
    "\5\4\1\0\3\4\5\0\1\4\3\0\7\4\1\227"+
    "\16\4\2\0\1\4\2\0\5\4\1\0\3\4\5\0"+
    "\1\4\3\0\4\4\1\230\21\4\2\0\1\4\2\0"+
    "\2\4\1\231\2\4\1\0\3\4\5\0\1\4\3\0"+
    "\26\4\2\0\1\4\2\0\5\4\1\0\3\4\5\0"+
    "\1\4\3\0\13\4\1\232\12\4\2\0\1\4\2\0"+
    "\3\4\1\233\1\4\1\0\3\4\5\0\1\4\3\0"+
    "\26\4\2\0\1\4\2\0\5\4\1\0\3\4\5\0"+
    "\1\4\3\0\12\4\1\234\13\4\2\0\1\4\2\0"+
    "\5\4\1\0\3\4\5\0\1\4\3\0\15\4\1\235"+
    "\10\4\2\0\1\4\2\0\1\4\1\236\3\4\1\0"+
    "\3\4\5\0\1\4\3\0\24\4\12\0\1\237\57\0"+
    "\1\240\37\0\2\4\2\0\1\4\2\0\4\4\1\241"+
    "\1\0\3\4\5\0\1\4\3\0\26\4\2\0\1\4"+
    "\2\0\5\4\1\0\3\4\5\0\1\4\3\0\6\4"+
    "\1\242\15\4\3\134\1\0\14\134\1\243\30\134\1\171"+
    "\3\134\2\4\2\0\1\4\2\0\5\4\1\0\3\4"+
    "\5\0\1\4\3\0\15\4\1\244\10\4\2\0\1\4"+
    "\2\0\5\4\1\0\3\4\5\0\1\4\3\0\7\4"+
    "\1\47\16\4\2\0\1\4\2\0\2\4\1\245\2\4"+
    "\1\0\3\4\5\0\1\4\3\0\26\4\2\0\1\4"+
    "\2\0\1\4\1\246\3\4\1\0\3\4\5\0\1\4"+
    "\3\0\26\4\2\0\1\4\2\0\5\4\1\0\3\4"+
    "\5\0\1\4\3\0\7\4\1\247\16\4\2\0\1\4"+
    "\2\0\5\4\1\0\3\4\5\0\1\4\3\0\7\4"+
    "\1\250\16\4\2\0\1\4\2\0\5\4\1\0\1\251"+
    "\2\4\5\0\1\4\3\0\26\4\2\0\1\4\2\0"+
    "\3\4\1\252\1\4\1\0\3\4\5\0\1\4\3\0"+
    "\26\4\2\0\1\4\2\0\5\4\1\0\2\4\1\253"+
    "\5\0\1\4\3\0\24\4\13\0\1\254\57\0\1\255"+
    "\36\0\2\4\2\0\1\4\2\0\5\4\1\0\1\256"+
    "\2\4\5\0\1\4\3\0\26\4\2\0\1\4\2\0"+
    "\5\4\1\0\3\4\5\0\1\4\3\0\13\4\1\257"+
    "\12\4\2\0\1\4\2\0\5\4\1\0\3\4\5\0"+
    "\1\4\3\0\4\4\1\260\21\4\2\0\1\4\2\0"+
    "\4\4\1\261\1\0\3\4\5\0\1\4\3\0\24\4"+
    "\14\0\1\262\57\0\1\263\35\0\2\4\2\0\1\4"+
    "\2\0\1\4\1\264\3\4\1\0\3\4\5\0\1\4"+
    "\3\0\26\4\2\0\1\4\2\0\5\4\1\0\1\265"+
    "\2\4\5\0\1\4\3\0\26\4\2\0\1\4\2\0"+
    "\5\4\1\0\3\4\5\0\1\4\3\0\6\4\1\266"+
    "\17\4\2\0\1\4\2\0\2\4\1\267\2\4\1\0"+
    "\3\4\5\0\1\4\3\0\24\4\15\0\1\270\47\0"+
    "\1\271\44\0\2\4\2\0\1\4\2\0\5\4\1\0"+
    "\3\4\5\0\1\4\3\0\6\4\1\272\17\4\2\0"+
    "\1\4\2\0\1\4\1\273\3\4\1\0\3\4\5\0"+
    "\1\4\3\0\24\4\16\0\1\274\56\0\1\275\34\0"+
    "\2\4\2\0\1\4\2\0\5\4\1\0\1\4\1\276"+
    "\1\4\5\0\1\4\3\0\24\4\17\0\1\277\35\0"+
    "\2\4\2\0\1\4\2\0\5\4\1\0\3\4\5\0"+
    "\1\4\3\0\15\4\1\300\6\4\10\0\1\301\64\0"+
    "\1\123\34\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6525];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\16\1\5\11\1\1\1\11\1\1\1\11\21\1"+
    "\1\0\3\1\1\0\1\11\2\0\4\1\1\0\7\1"+
    "\1\0\17\1\2\0\1\1\1\0\1\11\1\1\1\0"+
    "\1\1\1\0\3\1\1\11\1\0\5\1\1\11\17\1"+
    "\1\11\1\1\2\0\3\1\1\0\23\1\2\0\2\1"+
    "\1\0\15\1\2\0\13\1\2\0\4\1\2\0\4\1"+
    "\2\0\2\1\1\0\1\11\1\1\1\0\1\1\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[193];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */



  _HaskellLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _HaskellLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 128) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
      return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 57: 
          { return HaskellTokenTypes.CONSTRUCTOR_KEYWORD;
          }
        case 58: break;
        case 44: 
          { return HaskellTokenTypes.USING_KEYWORD;
          }
        case 59: break;
        case 33: 
          { return HaskellTokenTypes.THREE_DOTS;
          }
        case 60: break;
        case 8: 
          { return HaskellTokenTypes.LEFT_BRACE;
          }
        case 61: break;
        case 54: 
          { return HaskellTokenTypes.RENAMING_KEYWORD;
          }
        case 62: break;
        case 13: 
          { return HaskellTokenTypes.RIGHT_PAREN;
          }
        case 63: break;
        case 16: 
          { return HaskellTokenTypes.DOT;
          }
        case 64: break;
        case 1: 
          { return HaskellTokenTypes.COMMENT;
          }
        case 65: break;
        case 24: 
          { return HaskellTokenTypes.STRING;
          }
        case 66: break;
        case 2: 
          { return HaskellTokenTypes.ID;
          }
        case 67: break;
        case 56: 
          { yybegin(TEX); return HaskellTokenTypes.COMMENT;
          }
        case 68: break;
        case 4: 
          { return TokenType.WHITE_SPACE;
          }
        case 69: break;
        case 27: 
          { return HaskellTokenTypes.OF_KEYWORD;
          }
        case 70: break;
        case 10: 
          { return HaskellTokenTypes.LEFT_BRACKET;
          }
        case 71: break;
        case 20: 
          { return HaskellTokenTypes.ARROW;
          }
        case 72: break;
        case 25: 
          { return HaskellTokenTypes.IN_KEYWORD;
          }
        case 73: break;
        case 9: 
          { return HaskellTokenTypes.RIGHT_BRACE;
          }
        case 74: break;
        case 42: 
          { return HaskellTokenTypes.CLASS_KEYWORD;
          }
        case 75: break;
        case 28: 
          { return HaskellTokenTypes.DO_KEYWORD;
          }
        case 76: break;
        case 36: 
          { return HaskellTokenTypes.CASE_KEYWORD;
          }
        case 77: break;
        case 22: 
          { return HaskellTokenTypes.TYPE_CONS;
          }
        case 78: break;
        case 5: 
          { return TokenType.NEW_LINE_INDENT;
          }
        case 79: break;
        case 43: 
          { return HaskellTokenTypes.FIELD_KEYWORD;
          }
        case 80: break;
        case 30: 
          { return HaskellTokenTypes.CHARACTER;
          }
        case 81: break;
        case 49: 
          { return HaskellTokenTypes.MODULE_KEYWORD;
          }
        case 82: break;
        case 46: 
          { return HaskellTokenTypes.IMPORT_KEYWORD;
          }
        case 83: break;
        case 17: 
          { return HaskellTokenTypes.COMMA;
          }
        case 84: break;
        case 53: 
          { return HaskellTokenTypes.INSTANCE_KEYWORD;
          }
        case 85: break;
        case 3: 
          { return HaskellTokenTypes.NUMBER;
          }
        case 86: break;
        case 37: 
          { return HaskellTokenTypes.OPEN_KEYWORD;
          }
        case 87: break;
        case 14: 
          { return HaskellTokenTypes.COLON;
          }
        case 88: break;
        case 6: 
          { return TokenType.BAD_CHARACTER;
          }
        case 89: break;
        case 38: 
          { return HaskellTokenTypes.DATA_KEYWORD;
          }
        case 90: break;
        case 19: 
          { return HaskellTokenTypes.VERTICAL_BAR;
          }
        case 91: break;
        case 26: 
          { return HaskellTokenTypes.IF_KEYWORD;
          }
        case 92: break;
        case 35: 
          { return HaskellTokenTypes.ELSE_KEYWORD;
          }
        case 93: break;
        case 51: 
          { return HaskellTokenTypes.PUBLIC_KEYWORD;
          }
        case 94: break;
        case 50: 
          { return HaskellTokenTypes.MUTUAL_KEYWORD;
          }
        case 95: break;
        case 12: 
          { return HaskellTokenTypes.LEFT_PAREN;
          }
        case 96: break;
        case 52: 
          { return HaskellTokenTypes.RECORD_KEYWORD;
          }
        case 97: break;
        case 41: 
          { return HaskellTokenTypes.WITH_KEYWORD;
          }
        case 98: break;
        case 23: 
          { return HaskellTokenTypes.END_OF_LINE_COMMENT;
          }
        case 99: break;
        case 31: 
          { yybegin(YYINITIAL); return HaskellTokenTypes.COMMENT;
          }
        case 100: break;
        case 18: 
          { return HaskellTokenTypes.ASSIGNMENT;
          }
        case 101: break;
        case 39: 
          { return HaskellTokenTypes.THEN_KEYWORD;
          }
        case 102: break;
        case 21: 
          { return HaskellTokenTypes.FORALL;
          }
        case 103: break;
        case 48: 
          { return HaskellTokenTypes.HIDING_KEYWORD;
          }
        case 104: break;
        case 29: 
          { return HaskellTokenTypes.AS_KEYWORD;
          }
        case 105: break;
        case 11: 
          { return HaskellTokenTypes.RIGHT_BRACKET;
          }
        case 106: break;
        case 55: 
          { return HaskellTokenTypes.POSTULATE_KEYWORD;
          }
        case 107: break;
        case 40: 
          { return HaskellTokenTypes.TYPE_KEYWORD;
          }
        case 108: break;
        case 7: 
          { return HaskellTokenTypes.LAMBDA;
          }
        case 109: break;
        case 32: 
          { yybegin(BLOCK_COMMENT); return HaskellTokenTypes.COMMENT;
          }
        case 110: break;
        case 45: 
          { return HaskellTokenTypes.WHERE_KEYWORD;
          }
        case 111: break;
        case 34: 
          { return HaskellTokenTypes.LET_KEYWORD;
          }
        case 112: break;
        case 47: 
          { return HaskellTokenTypes.PRAGMA;
          }
        case 113: break;
        case 15: 
          { return HaskellTokenTypes.SEMICOLON;
          }
        case 114: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
