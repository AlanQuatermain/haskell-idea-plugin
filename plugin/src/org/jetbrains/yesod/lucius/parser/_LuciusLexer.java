/* The following code was generated by JFlex 1.5.1 */

package org.jetbrains.yesod.lucius.parser;

/**
 * @author Leyla H
 */

import java.util.*;
import com.intellij.lexer.*;
import com.intellij.psi.*;
import org.jetbrains.haskell.parser.token.*;
import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.1
 * from the specification file <tt>/Users/atsky/work/haskell-idea-plugin/plugin/src/org/jetbrains/yesod/lucius/parser/Lucius.flex</tt>
 */
class _LuciusLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\4\1\44\1\45\1\44\22\0\1\2\1\0\1\46"+
    "\1\41\3\0\1\42\2\0\1\55\2\0\1\3\1\50\1\52\3\1"+
    "\1\26\6\1\1\51\4\53\1\40\1\37\27\47\1\31\1\31\1\32"+
    "\1\53\1\43\1\53\1\35\1\47\1\0\1\5\1\13\1\10\1\24"+
    "\1\15\1\54\1\23\1\21\1\14\1\47\1\33\1\11\1\17\1\20"+
    "\1\30\1\27\1\47\1\7\1\22\1\6\1\12\1\47\1\34\1\25"+
    "\1\47\1\16\1\36\1\0\1\56\7\0\1\44\u1fa2\0\1\44\1\44"+
    "\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\12\4\6\1"+
    "\1\6\1\1\1\4\1\1\1\7\20\4\1\10\1\11"+
    "\1\0\1\12\1\0\1\13\3\0\1\14\1\15\1\0"+
    "\1\16\1\4\1\17\5\4\1\20\4\4\1\20\5\4"+
    "\1\0\1\21\13\4\1\20\1\11\1\4\1\0\7\4"+
    "\1\20\1\0\3\4\1\20\2\0\3\4\1\20\1\22"+
    "\13\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[122];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\57\0\353\0\u011a"+
    "\0\u0149\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0263\0\u0292"+
    "\0\u02c1\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac\0\u03db\0\u040a"+
    "\0\u0439\0\u0468\0\57\0\u0497\0\u04c6\0\u04f5\0\u0524\0\u0553"+
    "\0\u0582\0\u05b1\0\u05e0\0\u060f\0\u063e\0\u066d\0\u069c\0\u06cb"+
    "\0\u06fa\0\u0729\0\u0758\0\57\0\u0787\0\u02c1\0\u07b6\0\u034e"+
    "\0\57\0\u07e5\0\u037d\0\u0814\0\u03ac\0\u0843\0\u0872\0\57"+
    "\0\u08a1\0\57\0\u08d0\0\u08ff\0\u092e\0\u095d\0\u098c\0\u09bb"+
    "\0\u09ea\0\u0a19\0\u0a48\0\u0a77\0\274\0\u0aa6\0\u0ad5\0\u0b04"+
    "\0\u0b33\0\u0b62\0\u0b91\0\u0872\0\u0bc0\0\u0bef\0\u0c1e\0\u0c4d"+
    "\0\u0c7c\0\u0cab\0\u0cda\0\u0d09\0\u0d38\0\u0d67\0\u0d96\0\u0dc5"+
    "\0\u0b91\0\u0df4\0\u0e23\0\u0e52\0\u0e81\0\u0eb0\0\u0edf\0\u0f0e"+
    "\0\u0f3d\0\u0f6c\0\u0f9b\0\u0fca\0\u0ff9\0\u1028\0\u1057\0\u1086"+
    "\0\u10b5\0\u10e4\0\u1113\0\u1142\0\u1171\0\57\0\u10e4\0\u11a0"+
    "\0\u11cf\0\u11fe\0\u122d\0\u125c\0\u128b\0\u12ba\0\u12e9\0\u1318"+
    "\0\u1347\0\u1376";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[122];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\2\5\1\15\1\5\1\16\1\5"+
    "\1\17\1\20\3\5\1\3\6\5\1\21\1\2\1\22"+
    "\1\2\1\23\1\24\1\2\1\0\1\4\1\25\1\5"+
    "\1\26\1\27\1\30\1\2\1\31\1\32\1\33\60\0"+
    "\1\3\24\0\1\3\32\0\1\4\42\0\1\4\14\0"+
    "\1\5\1\0\21\5\1\0\6\5\12\0\1\5\4\0"+
    "\1\5\5\0\1\5\1\0\1\5\1\34\17\5\1\0"+
    "\6\5\12\0\1\5\4\0\1\5\5\0\1\5\1\0"+
    "\2\5\1\35\16\5\1\0\6\5\12\0\1\5\4\0"+
    "\1\5\5\0\1\5\1\0\1\36\7\5\1\37\5\5"+
    "\1\40\2\5\1\0\1\5\1\41\4\5\12\0\1\5"+
    "\4\0\1\5\5\0\1\5\1\0\1\42\4\5\1\43"+
    "\13\5\1\0\6\5\12\0\1\5\4\0\1\5\5\0"+
    "\1\5\1\0\7\5\1\44\11\5\1\0\6\5\12\0"+
    "\1\5\4\0\1\5\5\0\1\5\1\0\2\5\1\45"+
    "\16\5\1\0\6\5\12\0\1\5\4\0\1\5\5\0"+
    "\1\5\1\0\4\5\1\46\14\5\1\0\6\5\12\0"+
    "\1\5\4\0\1\5\5\0\1\5\1\0\1\47\20\5"+
    "\1\0\6\5\12\0\1\5\4\0\1\5\5\0\1\5"+
    "\1\0\1\5\1\31\13\5\1\50\3\5\1\0\6\5"+
    "\12\0\1\5\4\0\1\5\5\0\1\5\1\0\1\5"+
    "\1\51\1\5\1\52\15\5\1\0\4\5\1\53\1\5"+
    "\12\0\1\5\4\0\1\5\40\0\1\54\21\0\1\55"+
    "\1\0\1\55\1\0\30\55\1\0\1\54\1\0\1\56"+
    "\6\0\1\55\4\0\1\55\3\0\1\57\1\0\1\57"+
    "\1\0\30\57\1\0\1\54\10\0\1\57\4\0\1\57"+
    "\2\0\42\60\1\61\1\62\13\60\43\63\1\64\2\63"+
    "\1\61\10\63\3\0\1\65\1\0\21\65\1\0\6\65"+
    "\12\0\1\65\4\0\1\65\3\0\1\66\1\0\1\66"+
    "\1\0\30\66\12\0\1\66\1\0\1\67\2\0\1\66"+
    "\57\0\1\70\4\0\1\5\1\0\1\5\1\71\17\5"+
    "\1\0\6\5\12\0\1\5\4\0\1\5\54\0\1\72"+
    "\7\0\1\5\1\0\1\5\1\73\17\5\1\0\6\5"+
    "\12\0\1\5\4\0\1\5\5\0\1\5\1\0\1\74"+
    "\20\5\1\0\6\5\12\0\1\5\4\0\1\5\5\0"+
    "\1\5\1\0\17\5\1\75\1\5\1\0\6\5\12\0"+
    "\1\5\4\0\1\5\5\0\1\5\1\0\3\5\1\76"+
    "\15\5\1\0\1\77\5\5\12\0\1\5\4\0\1\5"+
    "\5\0\1\5\1\0\6\5\1\100\12\5\1\0\6\5"+
    "\12\0\1\5\4\0\1\5\5\0\1\5\1\0\1\5"+
    "\1\101\17\5\1\0\6\5\12\0\1\5\4\0\1\5"+
    "\5\0\1\5\1\0\4\5\1\102\14\5\1\0\6\5"+
    "\12\0\1\5\4\0\1\5\5\0\1\5\1\0\6\5"+
    "\1\103\12\5\1\0\6\5\12\0\1\5\4\0\1\5"+
    "\5\0\1\5\1\0\13\5\1\104\5\5\1\0\6\5"+
    "\12\0\1\5\4\0\1\5\5\0\1\5\1\0\4\5"+
    "\1\105\14\5\1\0\6\5\12\0\1\5\4\0\1\5"+
    "\5\0\1\5\1\0\10\5\1\106\10\5\1\0\6\5"+
    "\12\0\1\5\4\0\1\5\5\0\1\5\1\0\1\5"+
    "\1\107\17\5\1\0\6\5\12\0\1\5\4\0\1\5"+
    "\5\0\1\5\1\0\4\5\1\100\14\5\1\0\6\5"+
    "\12\0\1\5\4\0\1\5\5\0\1\5\1\0\10\5"+
    "\1\110\10\5\1\0\6\5\12\0\1\5\4\0\1\5"+
    "\5\0\1\5\1\0\1\111\20\5\1\0\6\5\12\0"+
    "\1\5\4\0\1\5\5\0\1\5\1\0\10\5\1\112"+
    "\10\5\1\0\6\5\12\0\1\5\4\0\1\5\3\0"+
    "\1\55\1\0\1\55\1\0\30\55\12\0\1\55\1\113"+
    "\3\0\1\55\3\0\1\57\1\0\1\57\1\0\30\57"+
    "\12\0\1\57\4\0\1\57\2\0\4\60\1\0\37\60"+
    "\2\0\11\60\4\63\1\0\37\63\2\0\11\63\1\0"+
    "\1\66\1\0\1\66\1\0\30\66\12\0\1\66\4\0"+
    "\1\66\3\0\1\114\1\0\1\114\1\0\30\114\12\0"+
    "\1\114\4\0\1\114\5\0\1\5\1\0\21\5\1\0"+
    "\1\115\5\5\12\0\1\5\4\0\1\5\5\0\1\5"+
    "\1\0\2\5\1\105\16\5\1\0\6\5\12\0\1\5"+
    "\4\0\1\5\5\0\1\5\1\0\13\5\1\116\5\5"+
    "\1\0\6\5\12\0\1\5\4\0\1\5\5\0\1\5"+
    "\1\0\7\5\1\117\11\5\1\0\6\5\12\0\1\5"+
    "\4\0\1\5\5\0\1\5\1\0\1\5\1\105\17\5"+
    "\1\0\6\5\12\0\1\5\4\0\1\5\5\0\1\5"+
    "\1\0\10\5\1\120\10\5\1\0\6\5\12\0\1\5"+
    "\4\0\1\5\5\0\1\5\1\0\1\105\20\5\1\0"+
    "\6\5\12\0\1\5\4\0\1\5\5\0\1\5\1\0"+
    "\1\121\20\5\1\0\6\5\12\0\1\5\4\0\1\5"+
    "\5\0\1\5\1\0\3\5\1\105\15\5\1\0\6\5"+
    "\12\0\1\5\4\0\1\5\5\0\1\5\1\0\7\5"+
    "\1\122\11\5\1\0\6\5\12\0\1\5\4\0\1\5"+
    "\5\0\1\5\1\0\10\5\1\123\10\5\1\0\6\5"+
    "\12\0\1\5\4\0\1\5\5\0\1\5\1\0\12\5"+
    "\1\124\6\5\1\0\6\5\12\0\1\5\4\0\1\5"+
    "\5\0\1\5\1\0\2\5\1\125\16\5\1\0\6\5"+
    "\12\0\1\5\4\0\1\5\5\0\1\5\1\0\21\5"+
    "\1\0\1\126\5\5\12\0\1\5\4\0\1\5\5\0"+
    "\1\5\1\0\4\5\1\127\14\5\1\0\6\5\12\0"+
    "\1\5\4\0\1\5\5\0\1\5\1\0\21\5\1\0"+
    "\5\5\1\130\12\0\1\5\4\0\1\5\3\0\1\131"+
    "\1\0\1\131\1\0\30\131\12\0\1\131\4\0\1\131"+
    "\5\0\1\5\1\0\15\5\1\132\3\5\1\0\6\5"+
    "\12\0\1\5\1\0\1\133\2\0\1\5\5\0\1\5"+
    "\1\0\15\5\1\134\3\5\1\0\6\5\12\0\1\5"+
    "\4\0\1\5\5\0\1\5\1\0\1\135\20\5\1\0"+
    "\6\5\12\0\1\5\4\0\1\5\5\0\1\5\1\0"+
    "\1\136\20\5\1\0\6\5\12\0\1\5\4\0\1\5"+
    "\5\0\1\5\1\0\1\5\1\127\17\5\1\0\6\5"+
    "\12\0\1\5\4\0\1\5\5\0\1\5\1\0\3\5"+
    "\1\137\15\5\1\0\6\5\12\0\1\5\4\0\1\5"+
    "\5\0\1\5\1\0\1\140\20\5\1\0\6\5\12\0"+
    "\1\5\4\0\1\5\5\0\1\5\1\0\10\5\1\141"+
    "\10\5\1\0\6\5\12\0\1\5\4\0\1\5\5\0"+
    "\1\5\1\0\7\5\1\142\11\5\1\0\6\5\12\0"+
    "\1\5\4\0\1\5\5\0\1\5\1\0\15\5\1\105"+
    "\3\5\1\0\6\5\12\0\1\5\4\0\1\5\5\0"+
    "\1\5\1\0\10\5\1\143\10\5\1\0\6\5\12\0"+
    "\1\5\4\0\1\5\5\0\1\5\1\0\21\5\1\0"+
    "\2\5\1\105\3\5\12\0\1\5\4\0\1\5\5\0"+
    "\1\5\1\0\21\5\1\0\6\5\12\0\1\5\1\0"+
    "\1\133\2\0\1\5\54\0\1\144\7\0\1\5\1\0"+
    "\4\5\1\101\14\5\1\0\6\5\12\0\1\5\4\0"+
    "\1\5\5\0\1\5\1\0\4\5\1\145\14\5\1\0"+
    "\6\5\12\0\1\5\4\0\1\5\5\0\1\5\1\0"+
    "\1\5\1\146\17\5\1\0\6\5\12\0\1\5\4\0"+
    "\1\5\5\0\1\147\1\0\21\5\1\0\6\5\12\0"+
    "\1\5\4\0\1\5\5\0\1\5\1\0\2\5\1\145"+
    "\16\5\1\0\6\5\12\0\1\5\4\0\1\5\5\0"+
    "\1\5\1\0\13\5\1\76\5\5\1\0\6\5\12\0"+
    "\1\5\4\0\1\5\5\0\1\5\1\0\20\5\1\150"+
    "\1\0\6\5\12\0\1\5\4\0\1\5\5\0\1\5"+
    "\1\0\21\5\1\151\2\5\2\105\2\5\12\0\1\5"+
    "\4\0\1\5\54\0\1\152\7\0\1\153\1\0\21\5"+
    "\1\0\6\5\12\0\1\5\4\0\1\5\5\0\1\5"+
    "\1\0\7\5\1\154\11\5\1\0\6\5\12\0\1\5"+
    "\4\0\1\5\5\0\1\5\1\0\6\5\1\155\12\5"+
    "\1\0\6\5\12\0\1\5\4\0\1\5\5\0\1\5"+
    "\1\0\21\5\1\151\6\5\12\0\1\5\4\0\1\5"+
    "\26\0\1\156\33\0\1\157\3\0\31\157\1\0\2\157"+
    "\2\0\1\157\3\0\6\157\5\0\1\5\1\0\16\5"+
    "\1\160\2\5\1\0\6\5\12\0\1\5\4\0\1\5"+
    "\5\0\1\5\1\0\13\5\1\161\5\5\1\0\6\5"+
    "\12\0\1\5\4\0\1\5\5\0\1\5\1\0\10\5"+
    "\1\162\10\5\1\0\6\5\12\0\1\5\4\0\1\5"+
    "\5\0\1\5\1\0\2\5\1\163\16\5\1\0\6\5"+
    "\12\0\1\5\4\0\1\5\5\0\1\5\1\0\16\5"+
    "\1\164\2\5\1\0\6\5\12\0\1\5\4\0\1\5"+
    "\5\0\1\5\1\0\11\5\1\165\7\5\1\0\6\5"+
    "\12\0\1\5\4\0\1\5\5\0\1\5\1\0\1\166"+
    "\20\5\1\0\6\5\12\0\1\5\4\0\1\5\5\0"+
    "\1\167\1\0\21\5\1\0\6\5\12\0\1\5\4\0"+
    "\1\5\5\0\1\5\1\0\7\5\1\170\11\5\1\0"+
    "\6\5\12\0\1\5\4\0\1\5\5\0\1\5\1\0"+
    "\17\5\1\171\1\5\1\0\6\5\12\0\1\5\4\0"+
    "\1\5\5\0\1\5\1\0\2\5\1\172\1\5\1\13"+
    "\14\5\1\0\6\5\12\0\1\5\4\0\1\5\5\0"+
    "\1\5\1\0\10\5\1\73\10\5\1\0\6\5\12\0"+
    "\1\5\4\0\1\5\5\0\1\5\1\0\7\5\1\124"+
    "\11\5\1\0\6\5\12\0\1\5\4\0\1\5\5\0"+
    "\1\5\1\0\1\36\20\5\1\0\6\5\12\0\1\5"+
    "\4\0\1\5\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5029];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\24\1\1\11\20\1\1\11"+
    "\1\1\1\0\1\1\1\0\1\11\3\0\2\1\1\0"+
    "\1\11\1\1\1\11\20\1\1\0\17\1\1\0\10\1"+
    "\1\0\4\1\2\0\3\1\1\11\14\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[122];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char[] zzBuffer = new char[0];

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _LuciusLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _LuciusLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 142) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer.toString().toCharArray();
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 19: break;
        case 2: 
          { return LuciusTokenTypes.NUMBER;
          }
        case 20: break;
        case 3: 
          { return TokenType.WHITE_SPACE;
          }
        case 21: break;
        case 4: 
          { return LuciusTokenTypes.IDENTIFIER;
          }
        case 22: break;
        case 5: 
          { return LuciusTokenTypes.NEWLINE;
          }
        case 23: break;
        case 6: 
          { return LuciusTokenTypes.COLON;
          }
        case 24: break;
        case 7: 
          { return LuciusTokenTypes.END_INTERPOLATION;
          }
        case 25: break;
        case 8: 
          { return LuciusTokenTypes.INTERPOLATION;
          }
        case 26: break;
        case 9: 
          { return LuciusTokenTypes.AT_IDENTIFIER;
          }
        case 27: break;
        case 10: 
          { return LuciusTokenTypes.SHARP_IDENTIFIER;
          }
        case 28: break;
        case 11: 
          { return LuciusTokenTypes.STRING;
          }
        case 29: break;
        case 12: 
          { return LuciusTokenTypes.DOT_IDENTIFIER;
          }
        case 30: break;
        case 13: 
          { return LuciusTokenTypes.COLON_IDENTIFIER;
          }
        case 31: break;
        case 14: 
          { return LuciusTokenTypes.COMMENT_START;
          }
        case 32: break;
        case 15: 
          { return LuciusTokenTypes.COMMENT_END;
          }
        case 33: break;
        case 16: 
          { return LuciusTokenTypes.FUNCTION;
          }
        case 34: break;
        case 17: 
          { return LuciusTokenTypes.CC_IDENTIFIER;
          }
        case 35: break;
        case 18: 
          { return LuciusTokenTypes.HYPERLINK;
          }
        case 36: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
